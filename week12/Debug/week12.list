
week12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ddc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08008f80  08008f80  00018f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009368  08009368  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08009368  08009368  00019368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009370  08009370  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009370  08009370  00019370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009374  08009374  00019374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08009378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000098  08009410  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08009410  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011733  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240e  00000000  00000000  000317fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00033c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00034c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dc8  00000000  00000000  00035b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115d6  00000000  00000000  0004d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b65e  00000000  00000000  0005eeb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa514  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf8  00000000  00000000  000fa568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f64 	.word	0x08008f64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08008f64 	.word	0x08008f64

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_frsub>:
 8000c6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c70:	e002      	b.n	8000c78 <__addsf3>
 8000c72:	bf00      	nop

08000c74 <__aeabi_fsub>:
 8000c74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c78 <__addsf3>:
 8000c78:	0042      	lsls	r2, r0, #1
 8000c7a:	bf1f      	itttt	ne
 8000c7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c80:	ea92 0f03 	teqne	r2, r3
 8000c84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8c:	d06a      	beq.n	8000d64 <__addsf3+0xec>
 8000c8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c96:	bfc1      	itttt	gt
 8000c98:	18d2      	addgt	r2, r2, r3
 8000c9a:	4041      	eorgt	r1, r0
 8000c9c:	4048      	eorgt	r0, r1
 8000c9e:	4041      	eorgt	r1, r0
 8000ca0:	bfb8      	it	lt
 8000ca2:	425b      	neglt	r3, r3
 8000ca4:	2b19      	cmp	r3, #25
 8000ca6:	bf88      	it	hi
 8000ca8:	4770      	bxhi	lr
 8000caa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4240      	negne	r0, r0
 8000cba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cbe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cc6:	bf18      	it	ne
 8000cc8:	4249      	negne	r1, r1
 8000cca:	ea92 0f03 	teq	r2, r3
 8000cce:	d03f      	beq.n	8000d50 <__addsf3+0xd8>
 8000cd0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cd4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cd8:	eb10 000c 	adds.w	r0, r0, ip
 8000cdc:	f1c3 0320 	rsb	r3, r3, #32
 8000ce0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ce4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__addsf3+0x78>
 8000cea:	4249      	negs	r1, r1
 8000cec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cf0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cf4:	d313      	bcc.n	8000d1e <__addsf3+0xa6>
 8000cf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cfa:	d306      	bcc.n	8000d0a <__addsf3+0x92>
 8000cfc:	0840      	lsrs	r0, r0, #1
 8000cfe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d02:	f102 0201 	add.w	r2, r2, #1
 8000d06:	2afe      	cmp	r2, #254	; 0xfe
 8000d08:	d251      	bcs.n	8000dae <__addsf3+0x136>
 8000d0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d12:	bf08      	it	eq
 8000d14:	f020 0001 	biceq.w	r0, r0, #1
 8000d18:	ea40 0003 	orr.w	r0, r0, r3
 8000d1c:	4770      	bx	lr
 8000d1e:	0049      	lsls	r1, r1, #1
 8000d20:	eb40 0000 	adc.w	r0, r0, r0
 8000d24:	3a01      	subs	r2, #1
 8000d26:	bf28      	it	cs
 8000d28:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d2c:	d2ed      	bcs.n	8000d0a <__addsf3+0x92>
 8000d2e:	fab0 fc80 	clz	ip, r0
 8000d32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d36:	ebb2 020c 	subs.w	r2, r2, ip
 8000d3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d3e:	bfaa      	itet	ge
 8000d40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d44:	4252      	neglt	r2, r2
 8000d46:	4318      	orrge	r0, r3
 8000d48:	bfbc      	itt	lt
 8000d4a:	40d0      	lsrlt	r0, r2
 8000d4c:	4318      	orrlt	r0, r3
 8000d4e:	4770      	bx	lr
 8000d50:	f092 0f00 	teq	r2, #0
 8000d54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d58:	bf06      	itte	eq
 8000d5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d5e:	3201      	addeq	r2, #1
 8000d60:	3b01      	subne	r3, #1
 8000d62:	e7b5      	b.n	8000cd0 <__addsf3+0x58>
 8000d64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d6c:	bf18      	it	ne
 8000d6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d72:	d021      	beq.n	8000db8 <__addsf3+0x140>
 8000d74:	ea92 0f03 	teq	r2, r3
 8000d78:	d004      	beq.n	8000d84 <__addsf3+0x10c>
 8000d7a:	f092 0f00 	teq	r2, #0
 8000d7e:	bf08      	it	eq
 8000d80:	4608      	moveq	r0, r1
 8000d82:	4770      	bx	lr
 8000d84:	ea90 0f01 	teq	r0, r1
 8000d88:	bf1c      	itt	ne
 8000d8a:	2000      	movne	r0, #0
 8000d8c:	4770      	bxne	lr
 8000d8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d92:	d104      	bne.n	8000d9e <__addsf3+0x126>
 8000d94:	0040      	lsls	r0, r0, #1
 8000d96:	bf28      	it	cs
 8000d98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d9c:	4770      	bx	lr
 8000d9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000da2:	bf3c      	itt	cc
 8000da4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000da8:	4770      	bxcc	lr
 8000daa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000db2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db6:	4770      	bx	lr
 8000db8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dbc:	bf16      	itet	ne
 8000dbe:	4608      	movne	r0, r1
 8000dc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dc4:	4601      	movne	r1, r0
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	bf06      	itte	eq
 8000dca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dce:	ea90 0f01 	teqeq	r0, r1
 8000dd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dd6:	4770      	bx	lr

08000dd8 <__aeabi_ui2f>:
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e004      	b.n	8000de8 <__aeabi_i2f+0x8>
 8000dde:	bf00      	nop

08000de0 <__aeabi_i2f>:
 8000de0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000de4:	bf48      	it	mi
 8000de6:	4240      	negmi	r0, r0
 8000de8:	ea5f 0c00 	movs.w	ip, r0
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000df4:	4601      	mov	r1, r0
 8000df6:	f04f 0000 	mov.w	r0, #0
 8000dfa:	e01c      	b.n	8000e36 <__aeabi_l2f+0x2a>

08000dfc <__aeabi_ul2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e00a      	b.n	8000e20 <__aeabi_l2f+0x14>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_l2f>:
 8000e0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e18:	d502      	bpl.n	8000e20 <__aeabi_l2f+0x14>
 8000e1a:	4240      	negs	r0, r0
 8000e1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e20:	ea5f 0c01 	movs.w	ip, r1
 8000e24:	bf02      	ittt	eq
 8000e26:	4684      	moveq	ip, r0
 8000e28:	4601      	moveq	r1, r0
 8000e2a:	2000      	moveq	r0, #0
 8000e2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e30:	bf08      	it	eq
 8000e32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e3a:	fabc f28c 	clz	r2, ip
 8000e3e:	3a08      	subs	r2, #8
 8000e40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e44:	db10      	blt.n	8000e68 <__aeabi_l2f+0x5c>
 8000e46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e50:	f1c2 0220 	rsb	r2, r2, #32
 8000e54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	eb43 0002 	adc.w	r0, r3, r2
 8000e60:	bf08      	it	eq
 8000e62:	f020 0001 	biceq.w	r0, r0, #1
 8000e66:	4770      	bx	lr
 8000e68:	f102 0220 	add.w	r2, r2, #32
 8000e6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e70:	f1c2 0220 	rsb	r2, r2, #32
 8000e74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e78:	fa21 f202 	lsr.w	r2, r1, r2
 8000e7c:	eb43 0002 	adc.w	r0, r3, r2
 8000e80:	bf08      	it	eq
 8000e82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e86:	4770      	bx	lr

08000e88 <__aeabi_uldivmod>:
 8000e88:	b953      	cbnz	r3, 8000ea0 <__aeabi_uldivmod+0x18>
 8000e8a:	b94a      	cbnz	r2, 8000ea0 <__aeabi_uldivmod+0x18>
 8000e8c:	2900      	cmp	r1, #0
 8000e8e:	bf08      	it	eq
 8000e90:	2800      	cmpeq	r0, #0
 8000e92:	bf1c      	itt	ne
 8000e94:	f04f 31ff 	movne.w	r1, #4294967295
 8000e98:	f04f 30ff 	movne.w	r0, #4294967295
 8000e9c:	f000 b96e 	b.w	800117c <__aeabi_idiv0>
 8000ea0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ea4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea8:	f000 f806 	bl	8000eb8 <__udivmoddi4>
 8000eac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb4:	b004      	add	sp, #16
 8000eb6:	4770      	bx	lr

08000eb8 <__udivmoddi4>:
 8000eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ebc:	9d08      	ldr	r5, [sp, #32]
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	468c      	mov	ip, r1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f040 8083 	bne.w	8000fce <__udivmoddi4+0x116>
 8000ec8:	428a      	cmp	r2, r1
 8000eca:	4617      	mov	r7, r2
 8000ecc:	d947      	bls.n	8000f5e <__udivmoddi4+0xa6>
 8000ece:	fab2 f282 	clz	r2, r2
 8000ed2:	b142      	cbz	r2, 8000ee6 <__udivmoddi4+0x2e>
 8000ed4:	f1c2 0020 	rsb	r0, r2, #32
 8000ed8:	fa24 f000 	lsr.w	r0, r4, r0
 8000edc:	4091      	lsls	r1, r2
 8000ede:	4097      	lsls	r7, r2
 8000ee0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ee4:	4094      	lsls	r4, r2
 8000ee6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eea:	0c23      	lsrs	r3, r4, #16
 8000eec:	fbbc f6f8 	udiv	r6, ip, r8
 8000ef0:	fa1f fe87 	uxth.w	lr, r7
 8000ef4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ef8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efc:	fb06 f10e 	mul.w	r1, r6, lr
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d909      	bls.n	8000f18 <__udivmoddi4+0x60>
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f0a:	f080 8119 	bcs.w	8001140 <__udivmoddi4+0x288>
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	f240 8116 	bls.w	8001140 <__udivmoddi4+0x288>
 8000f14:	3e02      	subs	r6, #2
 8000f16:	443b      	add	r3, r7
 8000f18:	1a5b      	subs	r3, r3, r1
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3310 	mls	r3, r8, r0, r3
 8000f24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d909      	bls.n	8000f44 <__udivmoddi4+0x8c>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f36:	f080 8105 	bcs.w	8001144 <__udivmoddi4+0x28c>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f240 8102 	bls.w	8001144 <__udivmoddi4+0x28c>
 8000f40:	3802      	subs	r0, #2
 8000f42:	443c      	add	r4, r7
 8000f44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f48:	eba4 040e 	sub.w	r4, r4, lr
 8000f4c:	2600      	movs	r6, #0
 8000f4e:	b11d      	cbz	r5, 8000f58 <__udivmoddi4+0xa0>
 8000f50:	40d4      	lsrs	r4, r2
 8000f52:	2300      	movs	r3, #0
 8000f54:	e9c5 4300 	strd	r4, r3, [r5]
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	b902      	cbnz	r2, 8000f62 <__udivmoddi4+0xaa>
 8000f60:	deff      	udf	#255	; 0xff
 8000f62:	fab2 f282 	clz	r2, r2
 8000f66:	2a00      	cmp	r2, #0
 8000f68:	d150      	bne.n	800100c <__udivmoddi4+0x154>
 8000f6a:	1bcb      	subs	r3, r1, r7
 8000f6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f70:	fa1f f887 	uxth.w	r8, r7
 8000f74:	2601      	movs	r6, #1
 8000f76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000f7a:	0c21      	lsrs	r1, r4, #16
 8000f7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000f80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f84:	fb08 f30c 	mul.w	r3, r8, ip
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d907      	bls.n	8000f9c <__udivmoddi4+0xe4>
 8000f8c:	1879      	adds	r1, r7, r1
 8000f8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000f92:	d202      	bcs.n	8000f9a <__udivmoddi4+0xe2>
 8000f94:	428b      	cmp	r3, r1
 8000f96:	f200 80e9 	bhi.w	800116c <__udivmoddi4+0x2b4>
 8000f9a:	4684      	mov	ip, r0
 8000f9c:	1ac9      	subs	r1, r1, r3
 8000f9e:	b2a3      	uxth	r3, r4
 8000fa0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fa4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000fac:	fb08 f800 	mul.w	r8, r8, r0
 8000fb0:	45a0      	cmp	r8, r4
 8000fb2:	d907      	bls.n	8000fc4 <__udivmoddi4+0x10c>
 8000fb4:	193c      	adds	r4, r7, r4
 8000fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fba:	d202      	bcs.n	8000fc2 <__udivmoddi4+0x10a>
 8000fbc:	45a0      	cmp	r8, r4
 8000fbe:	f200 80d9 	bhi.w	8001174 <__udivmoddi4+0x2bc>
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	eba4 0408 	sub.w	r4, r4, r8
 8000fc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000fcc:	e7bf      	b.n	8000f4e <__udivmoddi4+0x96>
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d909      	bls.n	8000fe6 <__udivmoddi4+0x12e>
 8000fd2:	2d00      	cmp	r5, #0
 8000fd4:	f000 80b1 	beq.w	800113a <__udivmoddi4+0x282>
 8000fd8:	2600      	movs	r6, #0
 8000fda:	e9c5 0100 	strd	r0, r1, [r5]
 8000fde:	4630      	mov	r0, r6
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	fab3 f683 	clz	r6, r3
 8000fea:	2e00      	cmp	r6, #0
 8000fec:	d14a      	bne.n	8001084 <__udivmoddi4+0x1cc>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d302      	bcc.n	8000ff8 <__udivmoddi4+0x140>
 8000ff2:	4282      	cmp	r2, r0
 8000ff4:	f200 80b8 	bhi.w	8001168 <__udivmoddi4+0x2b0>
 8000ff8:	1a84      	subs	r4, r0, r2
 8000ffa:	eb61 0103 	sbc.w	r1, r1, r3
 8000ffe:	2001      	movs	r0, #1
 8001000:	468c      	mov	ip, r1
 8001002:	2d00      	cmp	r5, #0
 8001004:	d0a8      	beq.n	8000f58 <__udivmoddi4+0xa0>
 8001006:	e9c5 4c00 	strd	r4, ip, [r5]
 800100a:	e7a5      	b.n	8000f58 <__udivmoddi4+0xa0>
 800100c:	f1c2 0320 	rsb	r3, r2, #32
 8001010:	fa20 f603 	lsr.w	r6, r0, r3
 8001014:	4097      	lsls	r7, r2
 8001016:	fa01 f002 	lsl.w	r0, r1, r2
 800101a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800101e:	40d9      	lsrs	r1, r3
 8001020:	4330      	orrs	r0, r6
 8001022:	0c03      	lsrs	r3, r0, #16
 8001024:	fbb1 f6fe 	udiv	r6, r1, lr
 8001028:	fa1f f887 	uxth.w	r8, r7
 800102c:	fb0e 1116 	mls	r1, lr, r6, r1
 8001030:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001034:	fb06 f108 	mul.w	r1, r6, r8
 8001038:	4299      	cmp	r1, r3
 800103a:	fa04 f402 	lsl.w	r4, r4, r2
 800103e:	d909      	bls.n	8001054 <__udivmoddi4+0x19c>
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	f106 3cff 	add.w	ip, r6, #4294967295
 8001046:	f080 808d 	bcs.w	8001164 <__udivmoddi4+0x2ac>
 800104a:	4299      	cmp	r1, r3
 800104c:	f240 808a 	bls.w	8001164 <__udivmoddi4+0x2ac>
 8001050:	3e02      	subs	r6, #2
 8001052:	443b      	add	r3, r7
 8001054:	1a5b      	subs	r3, r3, r1
 8001056:	b281      	uxth	r1, r0
 8001058:	fbb3 f0fe 	udiv	r0, r3, lr
 800105c:	fb0e 3310 	mls	r3, lr, r0, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb00 f308 	mul.w	r3, r0, r8
 8001068:	428b      	cmp	r3, r1
 800106a:	d907      	bls.n	800107c <__udivmoddi4+0x1c4>
 800106c:	1879      	adds	r1, r7, r1
 800106e:	f100 3cff 	add.w	ip, r0, #4294967295
 8001072:	d273      	bcs.n	800115c <__udivmoddi4+0x2a4>
 8001074:	428b      	cmp	r3, r1
 8001076:	d971      	bls.n	800115c <__udivmoddi4+0x2a4>
 8001078:	3802      	subs	r0, #2
 800107a:	4439      	add	r1, r7
 800107c:	1acb      	subs	r3, r1, r3
 800107e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001082:	e778      	b.n	8000f76 <__udivmoddi4+0xbe>
 8001084:	f1c6 0c20 	rsb	ip, r6, #32
 8001088:	fa03 f406 	lsl.w	r4, r3, r6
 800108c:	fa22 f30c 	lsr.w	r3, r2, ip
 8001090:	431c      	orrs	r4, r3
 8001092:	fa20 f70c 	lsr.w	r7, r0, ip
 8001096:	fa01 f306 	lsl.w	r3, r1, r6
 800109a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800109e:	fa21 f10c 	lsr.w	r1, r1, ip
 80010a2:	431f      	orrs	r7, r3
 80010a4:	0c3b      	lsrs	r3, r7, #16
 80010a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80010aa:	fa1f f884 	uxth.w	r8, r4
 80010ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80010b2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80010b6:	fb09 fa08 	mul.w	sl, r9, r8
 80010ba:	458a      	cmp	sl, r1
 80010bc:	fa02 f206 	lsl.w	r2, r2, r6
 80010c0:	fa00 f306 	lsl.w	r3, r0, r6
 80010c4:	d908      	bls.n	80010d8 <__udivmoddi4+0x220>
 80010c6:	1861      	adds	r1, r4, r1
 80010c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80010cc:	d248      	bcs.n	8001160 <__udivmoddi4+0x2a8>
 80010ce:	458a      	cmp	sl, r1
 80010d0:	d946      	bls.n	8001160 <__udivmoddi4+0x2a8>
 80010d2:	f1a9 0902 	sub.w	r9, r9, #2
 80010d6:	4421      	add	r1, r4
 80010d8:	eba1 010a 	sub.w	r1, r1, sl
 80010dc:	b2bf      	uxth	r7, r7
 80010de:	fbb1 f0fe 	udiv	r0, r1, lr
 80010e2:	fb0e 1110 	mls	r1, lr, r0, r1
 80010e6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80010ea:	fb00 f808 	mul.w	r8, r0, r8
 80010ee:	45b8      	cmp	r8, r7
 80010f0:	d907      	bls.n	8001102 <__udivmoddi4+0x24a>
 80010f2:	19e7      	adds	r7, r4, r7
 80010f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80010f8:	d22e      	bcs.n	8001158 <__udivmoddi4+0x2a0>
 80010fa:	45b8      	cmp	r8, r7
 80010fc:	d92c      	bls.n	8001158 <__udivmoddi4+0x2a0>
 80010fe:	3802      	subs	r0, #2
 8001100:	4427      	add	r7, r4
 8001102:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001106:	eba7 0708 	sub.w	r7, r7, r8
 800110a:	fba0 8902 	umull	r8, r9, r0, r2
 800110e:	454f      	cmp	r7, r9
 8001110:	46c6      	mov	lr, r8
 8001112:	4649      	mov	r1, r9
 8001114:	d31a      	bcc.n	800114c <__udivmoddi4+0x294>
 8001116:	d017      	beq.n	8001148 <__udivmoddi4+0x290>
 8001118:	b15d      	cbz	r5, 8001132 <__udivmoddi4+0x27a>
 800111a:	ebb3 020e 	subs.w	r2, r3, lr
 800111e:	eb67 0701 	sbc.w	r7, r7, r1
 8001122:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001126:	40f2      	lsrs	r2, r6
 8001128:	ea4c 0202 	orr.w	r2, ip, r2
 800112c:	40f7      	lsrs	r7, r6
 800112e:	e9c5 2700 	strd	r2, r7, [r5]
 8001132:	2600      	movs	r6, #0
 8001134:	4631      	mov	r1, r6
 8001136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113a:	462e      	mov	r6, r5
 800113c:	4628      	mov	r0, r5
 800113e:	e70b      	b.n	8000f58 <__udivmoddi4+0xa0>
 8001140:	4606      	mov	r6, r0
 8001142:	e6e9      	b.n	8000f18 <__udivmoddi4+0x60>
 8001144:	4618      	mov	r0, r3
 8001146:	e6fd      	b.n	8000f44 <__udivmoddi4+0x8c>
 8001148:	4543      	cmp	r3, r8
 800114a:	d2e5      	bcs.n	8001118 <__udivmoddi4+0x260>
 800114c:	ebb8 0e02 	subs.w	lr, r8, r2
 8001150:	eb69 0104 	sbc.w	r1, r9, r4
 8001154:	3801      	subs	r0, #1
 8001156:	e7df      	b.n	8001118 <__udivmoddi4+0x260>
 8001158:	4608      	mov	r0, r1
 800115a:	e7d2      	b.n	8001102 <__udivmoddi4+0x24a>
 800115c:	4660      	mov	r0, ip
 800115e:	e78d      	b.n	800107c <__udivmoddi4+0x1c4>
 8001160:	4681      	mov	r9, r0
 8001162:	e7b9      	b.n	80010d8 <__udivmoddi4+0x220>
 8001164:	4666      	mov	r6, ip
 8001166:	e775      	b.n	8001054 <__udivmoddi4+0x19c>
 8001168:	4630      	mov	r0, r6
 800116a:	e74a      	b.n	8001002 <__udivmoddi4+0x14a>
 800116c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001170:	4439      	add	r1, r7
 8001172:	e713      	b.n	8000f9c <__udivmoddi4+0xe4>
 8001174:	3802      	subs	r0, #2
 8001176:	443c      	add	r4, r7
 8001178:	e724      	b.n	8000fc4 <__udivmoddi4+0x10c>
 800117a:	bf00      	nop

0800117c <__aeabi_idiv0>:
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001188:	f002 fa04 	bl	8003594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118c:	f001 fc76 	bl	8002a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001190:	f001 fe42 	bl	8002e18 <MX_GPIO_Init>
  MX_DMA_Init();
 8001194:	f001 fe20 	bl	8002dd8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001198:	f001 fdf4 	bl	8002d84 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800119c:	f001 fcd6 	bl	8002b4c <MX_ADC1_Init>
  MX_SPI3_Init();
 80011a0:	f001 fd48 	bl	8002c34 <MX_SPI3_Init>
  MX_TIM3_Init();
 80011a4:	f001 fd7e 	bl	8002ca4 <MX_TIM3_Init>
  MX_TIM11_Init();
 80011a8:	f001 fdc8 	bl	8002d3c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 80011ac:	48d9      	ldr	r0, [pc, #868]	; (8001514 <main+0x394>)
 80011ae:	f004 ff4b 	bl	8006048 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 80011b2:	48d9      	ldr	r0, [pc, #868]	; (8001518 <main+0x398>)
 80011b4:	f004 ffa2 	bl	80060fc <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	49d8      	ldr	r1, [pc, #864]	; (800151c <main+0x39c>)
 80011bc:	48d8      	ldr	r0, [pc, #864]	; (8001520 <main+0x3a0>)
 80011be:	f002 fbdf 	bl	8003980 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c8:	48d6      	ldr	r0, [pc, #856]	; (8001524 <main+0x3a4>)
 80011ca:	f003 febb 	bl	8004f44 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(m==1){
 80011ce:	4bd6      	ldr	r3, [pc, #856]	; (8001528 <main+0x3a8>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011d8:	eef4 7a47 	vcmp.f32	s15, s14
 80011dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e0:	d102      	bne.n	80011e8 <main+0x68>
			m2=1;
 80011e2:	4bd2      	ldr	r3, [pc, #840]	; (800152c <main+0x3ac>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	801a      	strh	r2, [r3, #0]
		}
		if(m==-1){
 80011e8:	4bcf      	ldr	r3, [pc, #828]	; (8001528 <main+0x3a8>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80011f2:	eef4 7a47 	vcmp.f32	s15, s14
 80011f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fa:	d102      	bne.n	8001202 <main+0x82>
			m2=2;
 80011fc:	4bcb      	ldr	r3, [pc, #812]	; (800152c <main+0x3ac>)
 80011fe:	2202      	movs	r2, #2
 8001200:	801a      	strh	r2, [r3, #0]
		}
		statem[0] = m2;
 8001202:	4bca      	ldr	r3, [pc, #808]	; (800152c <main+0x3ac>)
 8001204:	881a      	ldrh	r2, [r3, #0]
 8001206:	4bca      	ldr	r3, [pc, #808]	; (8001530 <main+0x3b0>)
 8001208:	801a      	strh	r2, [r3, #0]
		static uint64_t timestamp = 0;
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 800120a:	2220      	movs	r2, #32
 800120c:	49c9      	ldr	r1, [pc, #804]	; (8001534 <main+0x3b4>)
 800120e:	48ca      	ldr	r0, [pc, #808]	; (8001538 <main+0x3b8>)
 8001210:	f005 fc8a 	bl	8006b28 <HAL_UART_Receive_IT>
		int16_t inputchar = UARTRecieveIT();
 8001214:	f001 fea0 	bl	8002f58 <UARTRecieveIT>
 8001218:	4603      	mov	r3, r0
 800121a:	80fb      	strh	r3, [r7, #6]
		if(inputchar!=-1)
 800121c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d011      	beq.n	800124a <main+0xca>
		{
			sprintf(TxDataBuffer, "In:[%c]\r\n", inputchar);
 8001226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122a:	461a      	mov	r2, r3
 800122c:	49c3      	ldr	r1, [pc, #780]	; (800153c <main+0x3bc>)
 800122e:	48c4      	ldr	r0, [pc, #784]	; (8001540 <main+0x3c0>)
 8001230:	f006 fa34 	bl	800769c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 8001234:	48c2      	ldr	r0, [pc, #776]	; (8001540 <main+0x3c0>)
 8001236:	f7fe ffd3 	bl	80001e0 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	49bf      	ldr	r1, [pc, #764]	; (8001540 <main+0x3c0>)
 8001244:	48bc      	ldr	r0, [pc, #752]	; (8001538 <main+0x3b8>)
 8001246:	f005 fb98 	bl	800697a <HAL_UART_Transmit>
		}
		switch(STATE_Display){
 800124a:	4bbe      	ldr	r3, [pc, #760]	; (8001544 <main+0x3c4>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	f240 2212 	movw	r2, #530	; 0x212
 8001252:	4293      	cmp	r3, r2
 8001254:	f301 818b 	bgt.w	800256e <main+0x13ee>
 8001258:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800125c:	da28      	bge.n	80012b0 <main+0x130>
 800125e:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8001262:	f001 802b 	beq.w	80022bc <main+0x113c>
 8001266:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800126a:	f301 8180 	bgt.w	800256e <main+0x13ee>
 800126e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001272:	f000 87e2 	beq.w	800223a <main+0x10ba>
 8001276:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800127a:	f301 8178 	bgt.w	800256e <main+0x13ee>
 800127e:	2bd2      	cmp	r3, #210	; 0xd2
 8001280:	f000 8743 	beq.w	800210a <main+0xf8a>
 8001284:	2bd2      	cmp	r3, #210	; 0xd2
 8001286:	f301 8172 	bgt.w	800256e <main+0x13ee>
 800128a:	2bc8      	cmp	r3, #200	; 0xc8
 800128c:	f000 872a 	beq.w	80020e4 <main+0xf64>
 8001290:	2bc8      	cmp	r3, #200	; 0xc8
 8001292:	f301 816c 	bgt.w	800256e <main+0x13ee>
 8001296:	2b6e      	cmp	r3, #110	; 0x6e
 8001298:	f301 8169 	bgt.w	800256e <main+0x13ee>
 800129c:	2b50      	cmp	r3, #80	; 0x50
 800129e:	da4d      	bge.n	800133c <main+0x1bc>
 80012a0:	2b1e      	cmp	r3, #30
 80012a2:	f300 811b 	bgt.w	80014dc <main+0x35c>
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f280 80d4 	bge.w	8001454 <main+0x2d4>
 80012ac:	f001 b95f 	b.w	800256e <main+0x13ee>
 80012b0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80012b4:	2b1e      	cmp	r3, #30
 80012b6:	f201 815a 	bhi.w	800256e <main+0x13ee>
 80012ba:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <main+0x140>)
 80012bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c0:	0800232f 	.word	0x0800232f
 80012c4:	0800256f 	.word	0x0800256f
 80012c8:	0800256f 	.word	0x0800256f
 80012cc:	0800256f 	.word	0x0800256f
 80012d0:	0800256f 	.word	0x0800256f
 80012d4:	0800256f 	.word	0x0800256f
 80012d8:	0800256f 	.word	0x0800256f
 80012dc:	0800256f 	.word	0x0800256f
 80012e0:	0800256f 	.word	0x0800256f
 80012e4:	0800256f 	.word	0x0800256f
 80012e8:	08002357 	.word	0x08002357
 80012ec:	0800256f 	.word	0x0800256f
 80012f0:	0800256f 	.word	0x0800256f
 80012f4:	0800256f 	.word	0x0800256f
 80012f8:	0800256f 	.word	0x0800256f
 80012fc:	0800256f 	.word	0x0800256f
 8001300:	0800256f 	.word	0x0800256f
 8001304:	0800256f 	.word	0x0800256f
 8001308:	0800256f 	.word	0x0800256f
 800130c:	0800256f 	.word	0x0800256f
 8001310:	08002435 	.word	0x08002435
 8001314:	0800256f 	.word	0x0800256f
 8001318:	0800256f 	.word	0x0800256f
 800131c:	0800256f 	.word	0x0800256f
 8001320:	0800256f 	.word	0x0800256f
 8001324:	0800256f 	.word	0x0800256f
 8001328:	0800256f 	.word	0x0800256f
 800132c:	0800256f 	.word	0x0800256f
 8001330:	0800256f 	.word	0x0800256f
 8001334:	0800256f 	.word	0x0800256f
 8001338:	0800245d 	.word	0x0800245d
 800133c:	3b50      	subs	r3, #80	; 0x50
 800133e:	2b1e      	cmp	r3, #30
 8001340:	f201 8115 	bhi.w	800256e <main+0x13ee>
 8001344:	a201      	add	r2, pc, #4	; (adr r2, 800134c <main+0x1cc>)
 8001346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134a:	bf00      	nop
 800134c:	0800199f 	.word	0x0800199f
 8001350:	0800256f 	.word	0x0800256f
 8001354:	0800256f 	.word	0x0800256f
 8001358:	0800256f 	.word	0x0800256f
 800135c:	0800256f 	.word	0x0800256f
 8001360:	0800256f 	.word	0x0800256f
 8001364:	0800256f 	.word	0x0800256f
 8001368:	0800256f 	.word	0x0800256f
 800136c:	0800256f 	.word	0x0800256f
 8001370:	0800256f 	.word	0x0800256f
 8001374:	080019fd 	.word	0x080019fd
 8001378:	0800256f 	.word	0x0800256f
 800137c:	0800256f 	.word	0x0800256f
 8001380:	0800256f 	.word	0x0800256f
 8001384:	0800256f 	.word	0x0800256f
 8001388:	0800256f 	.word	0x0800256f
 800138c:	0800256f 	.word	0x0800256f
 8001390:	0800256f 	.word	0x0800256f
 8001394:	0800256f 	.word	0x0800256f
 8001398:	0800256f 	.word	0x0800256f
 800139c:	08001d4d 	.word	0x08001d4d
 80013a0:	0800256f 	.word	0x0800256f
 80013a4:	0800256f 	.word	0x0800256f
 80013a8:	0800256f 	.word	0x0800256f
 80013ac:	0800256f 	.word	0x0800256f
 80013b0:	0800256f 	.word	0x0800256f
 80013b4:	0800256f 	.word	0x0800256f
 80013b8:	0800256f 	.word	0x0800256f
 80013bc:	0800256f 	.word	0x0800256f
 80013c0:	0800256f 	.word	0x0800256f
 80013c4:	08001d73 	.word	0x08001d73
 80013c8:	3b28      	subs	r3, #40	; 0x28
 80013ca:	2b1e      	cmp	r3, #30
 80013cc:	f201 80cf 	bhi.w	800256e <main+0x13ee>
 80013d0:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <main+0x258>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	080016d5 	.word	0x080016d5
 80013dc:	0800256f 	.word	0x0800256f
 80013e0:	0800256f 	.word	0x0800256f
 80013e4:	0800256f 	.word	0x0800256f
 80013e8:	0800256f 	.word	0x0800256f
 80013ec:	0800256f 	.word	0x0800256f
 80013f0:	0800256f 	.word	0x0800256f
 80013f4:	0800256f 	.word	0x0800256f
 80013f8:	0800256f 	.word	0x0800256f
 80013fc:	0800256f 	.word	0x0800256f
 8001400:	080016fd 	.word	0x080016fd
 8001404:	0800256f 	.word	0x0800256f
 8001408:	0800256f 	.word	0x0800256f
 800140c:	0800256f 	.word	0x0800256f
 8001410:	0800256f 	.word	0x0800256f
 8001414:	0800256f 	.word	0x0800256f
 8001418:	0800256f 	.word	0x0800256f
 800141c:	0800256f 	.word	0x0800256f
 8001420:	0800256f 	.word	0x0800256f
 8001424:	0800256f 	.word	0x0800256f
 8001428:	080018d1 	.word	0x080018d1
 800142c:	0800256f 	.word	0x0800256f
 8001430:	0800256f 	.word	0x0800256f
 8001434:	0800256f 	.word	0x0800256f
 8001438:	0800256f 	.word	0x0800256f
 800143c:	0800256f 	.word	0x0800256f
 8001440:	0800256f 	.word	0x0800256f
 8001444:	0800256f 	.word	0x0800256f
 8001448:	0800256f 	.word	0x0800256f
 800144c:	0800256f 	.word	0x0800256f
 8001450:	080018f9 	.word	0x080018f9
 8001454:	2b1e      	cmp	r3, #30
 8001456:	f201 808a 	bhi.w	800256e <main+0x13ee>
 800145a:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <main+0x2e0>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	080014ed 	.word	0x080014ed
 8001464:	0800256f 	.word	0x0800256f
 8001468:	0800256f 	.word	0x0800256f
 800146c:	0800256f 	.word	0x0800256f
 8001470:	0800256f 	.word	0x0800256f
 8001474:	0800256f 	.word	0x0800256f
 8001478:	0800256f 	.word	0x0800256f
 800147c:	0800256f 	.word	0x0800256f
 8001480:	0800256f 	.word	0x0800256f
 8001484:	0800256f 	.word	0x0800256f
 8001488:	0800154d 	.word	0x0800154d
 800148c:	0800256f 	.word	0x0800256f
 8001490:	0800256f 	.word	0x0800256f
 8001494:	0800256f 	.word	0x0800256f
 8001498:	0800256f 	.word	0x0800256f
 800149c:	0800256f 	.word	0x0800256f
 80014a0:	0800256f 	.word	0x0800256f
 80014a4:	0800256f 	.word	0x0800256f
 80014a8:	0800256f 	.word	0x0800256f
 80014ac:	0800256f 	.word	0x0800256f
 80014b0:	080015d7 	.word	0x080015d7
 80014b4:	0800256f 	.word	0x0800256f
 80014b8:	0800256f 	.word	0x0800256f
 80014bc:	0800256f 	.word	0x0800256f
 80014c0:	0800256f 	.word	0x0800256f
 80014c4:	0800256f 	.word	0x0800256f
 80014c8:	0800256f 	.word	0x0800256f
 80014cc:	0800256f 	.word	0x0800256f
 80014d0:	0800256f 	.word	0x0800256f
 80014d4:	0800256f 	.word	0x0800256f
 80014d8:	080015ff 	.word	0x080015ff
 80014dc:	2b46      	cmp	r3, #70	; 0x46
 80014de:	f301 8046 	bgt.w	800256e <main+0x13ee>
 80014e2:	2b28      	cmp	r3, #40	; 0x28
 80014e4:	f6bf af70 	bge.w	80013c8 <main+0x248>
 80014e8:	f001 b841 	b.w	800256e <main+0x13ee>
		case StateDisplay_start://0
			sprintf(TxDataBuffer, "Mode.\r\n[1]:sawtooth\r\n[2]:sine wave\r\n[3]:square wave\r\n");
 80014ec:	4916      	ldr	r1, [pc, #88]	; (8001548 <main+0x3c8>)
 80014ee:	4814      	ldr	r0, [pc, #80]	; (8001540 <main+0x3c0>)
 80014f0:	f006 f8d4 	bl	800769c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 80014f4:	4812      	ldr	r0, [pc, #72]	; (8001540 <main+0x3c0>)
 80014f6:	f7fe fe73 	bl	80001e0 <strlen>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	490f      	ldr	r1, [pc, #60]	; (8001540 <main+0x3c0>)
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <main+0x3b8>)
 8001506:	f005 fa38 	bl	800697a <HAL_UART_Transmit>
		  	STATE_Display = StateMode;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <main+0x3c4>)
 800150c:	220a      	movs	r2, #10
 800150e:	801a      	strh	r2, [r3, #0]
		  	break;
 8001510:	f001 b82d 	b.w	800256e <main+0x13ee>
 8001514:	20000140 	.word	0x20000140
 8001518:	20000228 	.word	0x20000228
 800151c:	200000f4 	.word	0x200000f4
 8001520:	200001e0 	.word	0x200001e0
 8001524:	40020000 	.word	0x40020000
 8001528:	2000000c 	.word	0x2000000c
 800152c:	20000118 	.word	0x20000118
 8001530:	20000110 	.word	0x20000110
 8001534:	200000d4 	.word	0x200000d4
 8001538:	200002d0 	.word	0x200002d0
 800153c:	08008f80 	.word	0x08008f80
 8001540:	200000b4 	.word	0x200000b4
 8001544:	20000106 	.word	0x20000106
 8001548:	08008f8c 	.word	0x08008f8c
		case StateMode://10
			switch(inputchar){
 800154c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001550:	2b33      	cmp	r3, #51	; 0x33
 8001552:	d01f      	beq.n	8001594 <main+0x414>
 8001554:	2b33      	cmp	r3, #51	; 0x33
 8001556:	dc28      	bgt.n	80015aa <main+0x42a>
 8001558:	2b32      	cmp	r3, #50	; 0x32
 800155a:	d010      	beq.n	800157e <main+0x3fe>
 800155c:	2b32      	cmp	r3, #50	; 0x32
 800155e:	dc24      	bgt.n	80015aa <main+0x42a>
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d034      	beq.n	80015d0 <main+0x450>
 8001566:	2b31      	cmp	r3, #49	; 0x31
 8001568:	d11f      	bne.n	80015aa <main+0x42a>
			case -1:
				break;
			case '1':
				count = 0;
 800156a:	4b8c      	ldr	r3, [pc, #560]	; (800179c <main+0x61c>)
 800156c:	2200      	movs	r2, #0
 800156e:	801a      	strh	r2, [r3, #0]
				STATE_Display = StateMenuNo_1;//20
 8001570:	4b8b      	ldr	r3, [pc, #556]	; (80017a0 <main+0x620>)
 8001572:	2214      	movs	r2, #20
 8001574:	801a      	strh	r2, [r3, #0]
				Mode = 1;
 8001576:	4b8b      	ldr	r3, [pc, #556]	; (80017a4 <main+0x624>)
 8001578:	2201      	movs	r2, #1
 800157a:	801a      	strh	r2, [r3, #0]
				break;
 800157c:	e029      	b.n	80015d2 <main+0x452>
			case '2':
				count = 0;
 800157e:	4b87      	ldr	r3, [pc, #540]	; (800179c <main+0x61c>)
 8001580:	2200      	movs	r2, #0
 8001582:	801a      	strh	r2, [r3, #0]
				STATE_Display = StateMenuNo_2;//300
 8001584:	4b86      	ldr	r3, [pc, #536]	; (80017a0 <main+0x620>)
 8001586:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800158a:	801a      	strh	r2, [r3, #0]
				Mode = 2;
 800158c:	4b85      	ldr	r3, [pc, #532]	; (80017a4 <main+0x624>)
 800158e:	2202      	movs	r2, #2
 8001590:	801a      	strh	r2, [r3, #0]
				break;
 8001592:	e01e      	b.n	80015d2 <main+0x452>
			case '3':
				count = 0;
 8001594:	4b81      	ldr	r3, [pc, #516]	; (800179c <main+0x61c>)
 8001596:	2200      	movs	r2, #0
 8001598:	801a      	strh	r2, [r3, #0]
				STATE_Display = StateMenuNo_3;//500
 800159a:	4b81      	ldr	r3, [pc, #516]	; (80017a0 <main+0x620>)
 800159c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015a0:	801a      	strh	r2, [r3, #0]
				Mode = 3;
 80015a2:	4b80      	ldr	r3, [pc, #512]	; (80017a4 <main+0x624>)
 80015a4:	2203      	movs	r2, #3
 80015a6:	801a      	strh	r2, [r3, #0]
				break;
 80015a8:	e013      	b.n	80015d2 <main+0x452>
			default:
				  count+=1;
 80015aa:	4b7c      	ldr	r3, [pc, #496]	; (800179c <main+0x61c>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b7a      	ldr	r3, [pc, #488]	; (800179c <main+0x61c>)
 80015b4:	801a      	strh	r2, [r3, #0]
				  if(count==2)
 80015b6:	4b79      	ldr	r3, [pc, #484]	; (800179c <main+0x61c>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	f040 87b5 	bne.w	800252a <main+0x13aa>
				  {
					  count=0;
 80015c0:	4b76      	ldr	r3, [pc, #472]	; (800179c <main+0x61c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	801a      	strh	r2, [r3, #0]
					  STATE_Display = StateDisplay_start;//0
 80015c6:	4b76      	ldr	r3, [pc, #472]	; (80017a0 <main+0x620>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	801a      	strh	r2, [r3, #0]
				  }
			}
			break;
 80015cc:	f000 bfad 	b.w	800252a <main+0x13aa>
				break;
 80015d0:	bf00      	nop
			break;
 80015d2:	f000 bfaa 	b.w	800252a <main+0x13aa>
		case StateMenuNo_1://20
			  sprintf(TxDataBuffer,"sawtooth\r\n[f]:frequency\r\n[v]:Vhigh,Vlow\r\n[s]:slope\r\n[x]:x\r\n");
 80015d6:	4974      	ldr	r1, [pc, #464]	; (80017a8 <main+0x628>)
 80015d8:	4874      	ldr	r0, [pc, #464]	; (80017ac <main+0x62c>)
 80015da:	f006 f85f 	bl	800769c <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 80015de:	4873      	ldr	r0, [pc, #460]	; (80017ac <main+0x62c>)
 80015e0:	f7fe fdfe 	bl	80001e0 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ec:	496f      	ldr	r1, [pc, #444]	; (80017ac <main+0x62c>)
 80015ee:	4870      	ldr	r0, [pc, #448]	; (80017b0 <main+0x630>)
 80015f0:	f005 f9c3 	bl	800697a <HAL_UART_Transmit>
			  STATE_Display = StateNo_1;//30
 80015f4:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <main+0x620>)
 80015f6:	221e      	movs	r2, #30
 80015f8:	801a      	strh	r2, [r3, #0]
			  break;
 80015fa:	f000 bfb8 	b.w	800256e <main+0x13ee>
		case StateNo_1://30
			switch(inputchar){
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001606:	d062      	beq.n	80016ce <main+0x54e>
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	db4c      	blt.n	80016a8 <main+0x528>
 800160e:	2b78      	cmp	r3, #120	; 0x78
 8001610:	dc4a      	bgt.n	80016a8 <main+0x528>
 8001612:	2b66      	cmp	r3, #102	; 0x66
 8001614:	db48      	blt.n	80016a8 <main+0x528>
 8001616:	3b66      	subs	r3, #102	; 0x66
 8001618:	2b12      	cmp	r3, #18
 800161a:	d845      	bhi.n	80016a8 <main+0x528>
 800161c:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <main+0x4a4>)
 800161e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001622:	bf00      	nop
 8001624:	08001671 	.word	0x08001671
 8001628:	080016a9 	.word	0x080016a9
 800162c:	080016a9 	.word	0x080016a9
 8001630:	080016a9 	.word	0x080016a9
 8001634:	080016a9 	.word	0x080016a9
 8001638:	080016a9 	.word	0x080016a9
 800163c:	080016a9 	.word	0x080016a9
 8001640:	080016a9 	.word	0x080016a9
 8001644:	080016a9 	.word	0x080016a9
 8001648:	080016a9 	.word	0x080016a9
 800164c:	080016a9 	.word	0x080016a9
 8001650:	080016a9 	.word	0x080016a9
 8001654:	080016a9 	.word	0x080016a9
 8001658:	0800168d 	.word	0x0800168d
 800165c:	080016a9 	.word	0x080016a9
 8001660:	080016a9 	.word	0x080016a9
 8001664:	0800167f 	.word	0x0800167f
 8001668:	080016a9 	.word	0x080016a9
 800166c:	0800169b 	.word	0x0800169b
			case -1:
				break;
			case 'f':
				count = 0;
 8001670:	4b4a      	ldr	r3, [pc, #296]	; (800179c <main+0x61c>)
 8001672:	2200      	movs	r2, #0
 8001674:	801a      	strh	r2, [r3, #0]
				STATE_Display = StateNo_1FP;//40
 8001676:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <main+0x620>)
 8001678:	2228      	movs	r2, #40	; 0x28
 800167a:	801a      	strh	r2, [r3, #0]
				break;
 800167c:	e028      	b.n	80016d0 <main+0x550>
			case 'v':
				count = 0;
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <main+0x61c>)
 8001680:	2200      	movs	r2, #0
 8001682:	801a      	strh	r2, [r3, #0]
				STATE_Display = StateNo_1VP;//60
 8001684:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <main+0x620>)
 8001686:	223c      	movs	r2, #60	; 0x3c
 8001688:	801a      	strh	r2, [r3, #0]
				break;
 800168a:	e021      	b.n	80016d0 <main+0x550>
			case 's':
				count = 0;
 800168c:	4b43      	ldr	r3, [pc, #268]	; (800179c <main+0x61c>)
 800168e:	2200      	movs	r2, #0
 8001690:	801a      	strh	r2, [r3, #0]
				STATE_Display = StateNo_1SP;//200
 8001692:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <main+0x620>)
 8001694:	22c8      	movs	r2, #200	; 0xc8
 8001696:	801a      	strh	r2, [r3, #0]
				break;
 8001698:	e01a      	b.n	80016d0 <main+0x550>
			case 'x':
				count =0;
 800169a:	4b40      	ldr	r3, [pc, #256]	; (800179c <main+0x61c>)
 800169c:	2200      	movs	r2, #0
 800169e:	801a      	strh	r2, [r3, #0]
				STATE_Display = StateDisplay_start;//0
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <main+0x620>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	801a      	strh	r2, [r3, #0]
				break;
 80016a6:	e013      	b.n	80016d0 <main+0x550>
			default:
				count+=1;
 80016a8:	4b3c      	ldr	r3, [pc, #240]	; (800179c <main+0x61c>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	4b3a      	ldr	r3, [pc, #232]	; (800179c <main+0x61c>)
 80016b2:	801a      	strh	r2, [r3, #0]
				if(count==2){
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <main+0x61c>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	f040 8738 	bne.w	800252e <main+0x13ae>
					count = 0;
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <main+0x61c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	801a      	strh	r2, [r3, #0]
					STATE_Display = StateMenuNo_1;//20
 80016c4:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <main+0x620>)
 80016c6:	2214      	movs	r2, #20
 80016c8:	801a      	strh	r2, [r3, #0]
				}
			}break;
 80016ca:	f000 bf30 	b.w	800252e <main+0x13ae>
				break;
 80016ce:	bf00      	nop
			}break;
 80016d0:	f000 bf2d 	b.w	800252e <main+0x13ae>
		case StateNo_1FP://40
			  sprintf(TxDataBuffer,"frequency\r\n[+]:+0.1Hz\r\n[-]:-0.1Hz\r\n[x]:x\r\n");
 80016d4:	4937      	ldr	r1, [pc, #220]	; (80017b4 <main+0x634>)
 80016d6:	4835      	ldr	r0, [pc, #212]	; (80017ac <main+0x62c>)
 80016d8:	f005 ffe0 	bl	800769c <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 80016dc:	4833      	ldr	r0, [pc, #204]	; (80017ac <main+0x62c>)
 80016de:	f7fe fd7f 	bl	80001e0 <strlen>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	4930      	ldr	r1, [pc, #192]	; (80017ac <main+0x62c>)
 80016ec:	4830      	ldr	r0, [pc, #192]	; (80017b0 <main+0x630>)
 80016ee:	f005 f944 	bl	800697a <HAL_UART_Transmit>
			  STATE_Display = StateNo_1F;//50
 80016f2:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <main+0x620>)
 80016f4:	2232      	movs	r2, #50	; 0x32
 80016f6:	801a      	strh	r2, [r3, #0]
			  break;
 80016f8:	f000 bf39 	b.w	800256e <main+0x13ee>
		case StateNo_1F://50
					switch(inputchar){
 80016fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001700:	2b78      	cmp	r3, #120	; 0x78
 8001702:	f000 80ac 	beq.w	800185e <main+0x6de>
 8001706:	2b78      	cmp	r3, #120	; 0x78
 8001708:	f300 80c6 	bgt.w	8001898 <main+0x718>
 800170c:	2b2d      	cmp	r3, #45	; 0x2d
 800170e:	d05f      	beq.n	80017d0 <main+0x650>
 8001710:	2b2d      	cmp	r3, #45	; 0x2d
 8001712:	f300 80c1 	bgt.w	8001898 <main+0x718>
 8001716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171a:	f000 80d0 	beq.w	80018be <main+0x73e>
 800171e:	2b2b      	cmp	r3, #43	; 0x2b
 8001720:	f040 80ba 	bne.w	8001898 <main+0x718>
					case -1:
						break;
			case '+':
				Hz = 0;
 8001724:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <main+0x638>)
 8001726:	2200      	movs	r2, #0
 8001728:	801a      	strh	r2, [r3, #0]
				count+=1;
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <main+0x61c>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <main+0x61c>)
 8001734:	801a      	strh	r2, [r3, #0]
				if(count==2){
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <main+0x61c>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d105      	bne.n	800174a <main+0x5ca>
					count = 0;
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <main+0x61c>)
 8001740:	2200      	movs	r2, #0
 8001742:	801a      	strh	r2, [r3, #0]
					STATE_Display = StateNo_1FP;//40
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <main+0x620>)
 8001746:	2228      	movs	r2, #40	; 0x28
 8001748:	801a      	strh	r2, [r3, #0]
				}
				if(ufreq<=99){
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <main+0x63c>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	2b63      	cmp	r3, #99	; 0x63
 8001750:	d805      	bhi.n	800175e <main+0x5de>
				ufreq+=1;
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <main+0x63c>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <main+0x63c>)
 800175c:	801a      	strh	r2, [r3, #0]
				}
				freq = ufreq/10.0;
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <main+0x63c>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fee6 	bl	8000534 <__aeabi_i2d>
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <main+0x640>)
 800176e:	f7ff f875 	bl	800085c <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff fa27 	bl	8000bcc <__aeabi_d2f>
 800177e:	4603      	mov	r3, r0
 8001780:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <main+0x644>)
 8001782:	6013      	str	r3, [r2, #0]
				halftime =  250/freq;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <main+0x644>)
 8001786:	ed93 7a00 	vldr	s14, [r3]
 800178a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80017c8 <main+0x648>
 800178e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <main+0x64c>)
 8001794:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001798:	e098      	b.n	80018cc <main+0x74c>
 800179a:	bf00      	nop
 800179c:	20000114 	.word	0x20000114
 80017a0:	20000106 	.word	0x20000106
 80017a4:	2000011a 	.word	0x2000011a
 80017a8:	08008fc4 	.word	0x08008fc4
 80017ac:	200000b4 	.word	0x200000b4
 80017b0:	200002d0 	.word	0x200002d0
 80017b4:	08009000 	.word	0x08009000
 80017b8:	2000011c 	.word	0x2000011c
 80017bc:	20000014 	.word	0x20000014
 80017c0:	40240000 	.word	0x40240000
 80017c4:	20000010 	.word	0x20000010
 80017c8:	437a0000 	.word	0x437a0000
 80017cc:	20000000 	.word	0x20000000
			case '-':
				count+=1;
 80017d0:	4b7d      	ldr	r3, [pc, #500]	; (80019c8 <main+0x848>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b7b      	ldr	r3, [pc, #492]	; (80019c8 <main+0x848>)
 80017da:	801a      	strh	r2, [r3, #0]
				if(count==2){
 80017dc:	4b7a      	ldr	r3, [pc, #488]	; (80019c8 <main+0x848>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d105      	bne.n	80017f0 <main+0x670>
					count = 0;
 80017e4:	4b78      	ldr	r3, [pc, #480]	; (80019c8 <main+0x848>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	801a      	strh	r2, [r3, #0]
					STATE_Display = StateNo_1FP;//40
 80017ea:	4b78      	ldr	r3, [pc, #480]	; (80019cc <main+0x84c>)
 80017ec:	2228      	movs	r2, #40	; 0x28
 80017ee:	801a      	strh	r2, [r3, #0]
				}
				if(ufreq>=1){
 80017f0:	4b77      	ldr	r3, [pc, #476]	; (80019d0 <main+0x850>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d022      	beq.n	800183e <main+0x6be>
					ufreq-=1;
 80017f8:	4b75      	ldr	r3, [pc, #468]	; (80019d0 <main+0x850>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b73      	ldr	r3, [pc, #460]	; (80019d0 <main+0x850>)
 8001802:	801a      	strh	r2, [r3, #0]
					freq=ufreq/10.0;
 8001804:	4b72      	ldr	r3, [pc, #456]	; (80019d0 <main+0x850>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe93 	bl	8000534 <__aeabi_i2d>
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	4b70      	ldr	r3, [pc, #448]	; (80019d4 <main+0x854>)
 8001814:	f7ff f822 	bl	800085c <__aeabi_ddiv>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff f9d4 	bl	8000bcc <__aeabi_d2f>
 8001824:	4603      	mov	r3, r0
 8001826:	4a6c      	ldr	r2, [pc, #432]	; (80019d8 <main+0x858>)
 8001828:	6013      	str	r3, [r2, #0]
					halftime = 250/freq;
 800182a:	4b6b      	ldr	r3, [pc, #428]	; (80019d8 <main+0x858>)
 800182c:	ed93 7a00 	vldr	s14, [r3]
 8001830:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80019dc <main+0x85c>
 8001834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001838:	4b69      	ldr	r3, [pc, #420]	; (80019e0 <main+0x860>)
 800183a:	edc3 7a00 	vstr	s15, [r3]
				}
				if(ufreq==0){
 800183e:	4b64      	ldr	r3, [pc, #400]	; (80019d0 <main+0x850>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d13e      	bne.n	80018c4 <main+0x744>
					Hz = 1;
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <main+0x864>)
 8001848:	2201      	movs	r2, #1
 800184a:	801a      	strh	r2, [r3, #0]
					freq=0;
 800184c:	4b62      	ldr	r3, [pc, #392]	; (80019d8 <main+0x858>)
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
					halftime=0;
 8001854:	4b62      	ldr	r3, [pc, #392]	; (80019e0 <main+0x860>)
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
				}


				break;
 800185c:	e032      	b.n	80018c4 <main+0x744>
			case 'x':
				count =0;
 800185e:	4b5a      	ldr	r3, [pc, #360]	; (80019c8 <main+0x848>)
 8001860:	2200      	movs	r2, #0
 8001862:	801a      	strh	r2, [r3, #0]
				if(Mode==1){
 8001864:	4b60      	ldr	r3, [pc, #384]	; (80019e8 <main+0x868>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d103      	bne.n	8001874 <main+0x6f4>
				STATE_Display = StateMenuNo_1;}//20
 800186c:	4b57      	ldr	r3, [pc, #348]	; (80019cc <main+0x84c>)
 800186e:	2214      	movs	r2, #20
 8001870:	801a      	strh	r2, [r3, #0]
				else if(Mode==2){
				STATE_Display = StateMenuNo_2;}//300
				else if(Mode==3){
				STATE_Display = StateMenuNo_3;}//500
				break;
 8001872:	e02a      	b.n	80018ca <main+0x74a>
				else if(Mode==2){
 8001874:	4b5c      	ldr	r3, [pc, #368]	; (80019e8 <main+0x868>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d104      	bne.n	8001886 <main+0x706>
				STATE_Display = StateMenuNo_2;}//300
 800187c:	4b53      	ldr	r3, [pc, #332]	; (80019cc <main+0x84c>)
 800187e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001882:	801a      	strh	r2, [r3, #0]
				break;
 8001884:	e021      	b.n	80018ca <main+0x74a>
				else if(Mode==3){
 8001886:	4b58      	ldr	r3, [pc, #352]	; (80019e8 <main+0x868>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d11d      	bne.n	80018ca <main+0x74a>
				STATE_Display = StateMenuNo_3;}//500
 800188e:	4b4f      	ldr	r3, [pc, #316]	; (80019cc <main+0x84c>)
 8001890:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001894:	801a      	strh	r2, [r3, #0]
				break;
 8001896:	e018      	b.n	80018ca <main+0x74a>
			default:
				count+=1;
 8001898:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <main+0x848>)
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b49      	ldr	r3, [pc, #292]	; (80019c8 <main+0x848>)
 80018a2:	801a      	strh	r2, [r3, #0]
				if(count==2){
 80018a4:	4b48      	ldr	r3, [pc, #288]	; (80019c8 <main+0x848>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	f040 8642 	bne.w	8002532 <main+0x13b2>
					count = 0;
 80018ae:	4b46      	ldr	r3, [pc, #280]	; (80019c8 <main+0x848>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]
					STATE_Display = StateNo_1FP;//40
 80018b4:	4b45      	ldr	r3, [pc, #276]	; (80019cc <main+0x84c>)
 80018b6:	2228      	movs	r2, #40	; 0x28
 80018b8:	801a      	strh	r2, [r3, #0]
				}
			}break;
 80018ba:	f000 be3a 	b.w	8002532 <main+0x13b2>
						break;
 80018be:	bf00      	nop
 80018c0:	f000 be37 	b.w	8002532 <main+0x13b2>
				break;
 80018c4:	bf00      	nop
 80018c6:	f000 be34 	b.w	8002532 <main+0x13b2>
				break;
 80018ca:	bf00      	nop
			}break;
 80018cc:	f000 be31 	b.w	8002532 <main+0x13b2>
		case StateNo_1VP://60
			sprintf(TxDataBuffer,"Voltage\r\n[h]:high\r\n[l]:low\r\n[x]:x\r\n");
 80018d0:	4946      	ldr	r1, [pc, #280]	; (80019ec <main+0x86c>)
 80018d2:	4847      	ldr	r0, [pc, #284]	; (80019f0 <main+0x870>)
 80018d4:	f005 fee2 	bl	800769c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 80018d8:	4845      	ldr	r0, [pc, #276]	; (80019f0 <main+0x870>)
 80018da:	f7fe fc81 	bl	80001e0 <strlen>
 80018de:	4603      	mov	r3, r0
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	4942      	ldr	r1, [pc, #264]	; (80019f0 <main+0x870>)
 80018e8:	4842      	ldr	r0, [pc, #264]	; (80019f4 <main+0x874>)
 80018ea:	f005 f846 	bl	800697a <HAL_UART_Transmit>
			STATE_Display = StateNo_1V;//70
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <main+0x84c>)
 80018f0:	2246      	movs	r2, #70	; 0x46
 80018f2:	801a      	strh	r2, [r3, #0]
			break;
 80018f4:	f000 be3b 	b.w	800256e <main+0x13ee>
			case StateNo_1V://70
				switch(inputchar){
 80018f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fc:	2b78      	cmp	r3, #120	; 0x78
 80018fe:	d018      	beq.n	8001932 <main+0x7b2>
 8001900:	2b78      	cmp	r3, #120	; 0x78
 8001902:	dc33      	bgt.n	800196c <main+0x7ec>
 8001904:	2b6c      	cmp	r3, #108	; 0x6c
 8001906:	d00d      	beq.n	8001924 <main+0x7a4>
 8001908:	2b6c      	cmp	r3, #108	; 0x6c
 800190a:	dc2f      	bgt.n	800196c <main+0x7ec>
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d03f      	beq.n	8001992 <main+0x812>
 8001912:	2b68      	cmp	r3, #104	; 0x68
 8001914:	d12a      	bne.n	800196c <main+0x7ec>
				case -1:
					break;
				case 'h':
					count = 0;
 8001916:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <main+0x848>)
 8001918:	2200      	movs	r2, #0
 800191a:	801a      	strh	r2, [r3, #0]
					STATE_Display = StateVhp;//80
 800191c:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <main+0x84c>)
 800191e:	2250      	movs	r2, #80	; 0x50
 8001920:	801a      	strh	r2, [r3, #0]
					break;
 8001922:	e03a      	b.n	800199a <main+0x81a>
				case 'l':
					count = 0;
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <main+0x848>)
 8001926:	2200      	movs	r2, #0
 8001928:	801a      	strh	r2, [r3, #0]
					STATE_Display = StateVlp;//100
 800192a:	4b28      	ldr	r3, [pc, #160]	; (80019cc <main+0x84c>)
 800192c:	2264      	movs	r2, #100	; 0x64
 800192e:	801a      	strh	r2, [r3, #0]
					break;
 8001930:	e033      	b.n	800199a <main+0x81a>
				case 'x':
					count =0;
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <main+0x848>)
 8001934:	2200      	movs	r2, #0
 8001936:	801a      	strh	r2, [r3, #0]
					if(Mode==1){
 8001938:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <main+0x868>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d103      	bne.n	8001948 <main+0x7c8>
					STATE_Display = StateMenuNo_1;}//30
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <main+0x84c>)
 8001942:	2214      	movs	r2, #20
 8001944:	801a      	strh	r2, [r3, #0]
					else if(Mode==2){
					STATE_Display = StateMenuNo_2;}//300
					else if(Mode==3){
					STATE_Display = StateMenuNo_3;}//500
					break;
 8001946:	e027      	b.n	8001998 <main+0x818>
					else if(Mode==2){
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <main+0x868>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d104      	bne.n	800195a <main+0x7da>
					STATE_Display = StateMenuNo_2;}//300
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <main+0x84c>)
 8001952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001956:	801a      	strh	r2, [r3, #0]
					break;
 8001958:	e01e      	b.n	8001998 <main+0x818>
					else if(Mode==3){
 800195a:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <main+0x868>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d11a      	bne.n	8001998 <main+0x818>
					STATE_Display = StateMenuNo_3;}//500
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <main+0x84c>)
 8001964:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001968:	801a      	strh	r2, [r3, #0]
					break;
 800196a:	e015      	b.n	8001998 <main+0x818>
				default:
					count+=1;
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <main+0x848>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	b29a      	uxth	r2, r3
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <main+0x848>)
 8001976:	801a      	strh	r2, [r3, #0]
					if(count==2){
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <main+0x848>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	2b02      	cmp	r3, #2
 800197e:	f040 85da 	bne.w	8002536 <main+0x13b6>
						count = 0;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <main+0x848>)
 8001984:	2200      	movs	r2, #0
 8001986:	801a      	strh	r2, [r3, #0]
						STATE_Display = StateNo_1VP;}//60
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <main+0x84c>)
 800198a:	223c      	movs	r2, #60	; 0x3c
 800198c:	801a      	strh	r2, [r3, #0]
				}break;
 800198e:	f000 bdd2 	b.w	8002536 <main+0x13b6>
					break;
 8001992:	bf00      	nop
 8001994:	f000 bdcf 	b.w	8002536 <main+0x13b6>
					break;
 8001998:	bf00      	nop
				}break;
 800199a:	f000 bdcc 	b.w	8002536 <main+0x13b6>
				case StateVhp://80
					sprintf(TxDataBuffer,"Vhigh\r\n[+]:+\r\n[-]:-\r\n[x]:x\r\n");
 800199e:	4916      	ldr	r1, [pc, #88]	; (80019f8 <main+0x878>)
 80019a0:	4813      	ldr	r0, [pc, #76]	; (80019f0 <main+0x870>)
 80019a2:	f005 fe7b 	bl	800769c <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 80019a6:	4812      	ldr	r0, [pc, #72]	; (80019f0 <main+0x870>)
 80019a8:	f7fe fc1a 	bl	80001e0 <strlen>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b4:	490e      	ldr	r1, [pc, #56]	; (80019f0 <main+0x870>)
 80019b6:	480f      	ldr	r0, [pc, #60]	; (80019f4 <main+0x874>)
 80019b8:	f004 ffdf 	bl	800697a <HAL_UART_Transmit>
					STATE_Display = StateVh;//90
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <main+0x84c>)
 80019be:	225a      	movs	r2, #90	; 0x5a
 80019c0:	801a      	strh	r2, [r3, #0]
					break;
 80019c2:	f000 bdd4 	b.w	800256e <main+0x13ee>
 80019c6:	bf00      	nop
 80019c8:	20000114 	.word	0x20000114
 80019cc:	20000106 	.word	0x20000106
 80019d0:	20000014 	.word	0x20000014
 80019d4:	40240000 	.word	0x40240000
 80019d8:	20000010 	.word	0x20000010
 80019dc:	437a0000 	.word	0x437a0000
 80019e0:	20000000 	.word	0x20000000
 80019e4:	2000011c 	.word	0x2000011c
 80019e8:	2000011a 	.word	0x2000011a
 80019ec:	0800902c 	.word	0x0800902c
 80019f0:	200000b4 	.word	0x200000b4
 80019f4:	200002d0 	.word	0x200002d0
 80019f8:	08009050 	.word	0x08009050
				case StateVh://90
					switch(inputchar)
 80019fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a00:	2b78      	cmp	r3, #120	; 0x78
 8001a02:	f000 8165 	beq.w	8001cd0 <main+0xb50>
 8001a06:	2b78      	cmp	r3, #120	; 0x78
 8001a08:	f300 818c 	bgt.w	8001d24 <main+0xba4>
 8001a0c:	2b2d      	cmp	r3, #45	; 0x2d
 8001a0e:	d071      	beq.n	8001af4 <main+0x974>
 8001a10:	2b2d      	cmp	r3, #45	; 0x2d
 8001a12:	f300 8187 	bgt.w	8001d24 <main+0xba4>
 8001a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1a:	f000 8195 	beq.w	8001d48 <main+0xbc8>
 8001a1e:	2b2b      	cmp	r3, #43	; 0x2b
 8001a20:	f040 8180 	bne.w	8001d24 <main+0xba4>
					{
						case -1:
							break;
						case '+':
							count+=1;
 8001a24:	4bb6      	ldr	r3, [pc, #728]	; (8001d00 <main+0xb80>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4bb4      	ldr	r3, [pc, #720]	; (8001d00 <main+0xb80>)
 8001a2e:	801a      	strh	r2, [r3, #0]
							if(count==2)
 8001a30:	4bb3      	ldr	r3, [pc, #716]	; (8001d00 <main+0xb80>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d105      	bne.n	8001a44 <main+0x8c4>
							{
								count = 0;
 8001a38:	4bb1      	ldr	r3, [pc, #708]	; (8001d00 <main+0xb80>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	801a      	strh	r2, [r3, #0]
								STATE_Display = StateVhp;//80
 8001a3e:	4bb1      	ldr	r3, [pc, #708]	; (8001d04 <main+0xb84>)
 8001a40:	2250      	movs	r2, #80	; 0x50
 8001a42:	801a      	strh	r2, [r3, #0]
							}
							Vhigh+=0.1;
 8001a44:	4bb0      	ldr	r3, [pc, #704]	; (8001d08 <main+0xb88>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd85 	bl	8000558 <__aeabi_f2d>
 8001a4e:	a3a4      	add	r3, pc, #656	; (adr r3, 8001ce0 <main+0xb60>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fc22 	bl	800029c <__adddf3>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff f8b4 	bl	8000bcc <__aeabi_d2f>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4aa8      	ldr	r2, [pc, #672]	; (8001d08 <main+0xb88>)
 8001a68:	6013      	str	r3, [r2, #0]
							if(Vhigh>=3.3)
 8001a6a:	4ba7      	ldr	r3, [pc, #668]	; (8001d08 <main+0xb88>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd72 	bl	8000558 <__aeabi_f2d>
 8001a74:	a39c      	add	r3, pc, #624	; (adr r3, 8001ce8 <main+0xb68>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7ff f84b 	bl	8000b14 <__aeabi_dcmpge>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <main+0x90a>
							{
								Vhigh=3.3;
 8001a84:	4ba0      	ldr	r3, [pc, #640]	; (8001d08 <main+0xb88>)
 8001a86:	4aa1      	ldr	r2, [pc, #644]	; (8001d0c <main+0xb8c>)
 8001a88:	601a      	str	r2, [r3, #0]
							}
							Vhighr = Vhigh*4095/3.3;
 8001a8a:	4b9f      	ldr	r3, [pc, #636]	; (8001d08 <main+0xb88>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8001d10 <main+0xb90>
 8001a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a98:	ee17 0a90 	vmov	r0, s15
 8001a9c:	f7fe fd5c 	bl	8000558 <__aeabi_f2d>
 8001aa0:	a391      	add	r3, pc, #580	; (adr r3, 8001ce8 <main+0xb68>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fed9 	bl	800085c <__aeabi_ddiv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7ff f86b 	bl	8000b8c <__aeabi_d2uiz>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	4b96      	ldr	r3, [pc, #600]	; (8001d14 <main+0xb94>)
 8001abc:	801a      	strh	r2, [r3, #0]
							Vlowr = Vlow*4095/3.3;
 8001abe:	4b96      	ldr	r3, [pc, #600]	; (8001d18 <main+0xb98>)
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001d10 <main+0xb90>
 8001ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001acc:	ee17 0a90 	vmov	r0, s15
 8001ad0:	f7fe fd42 	bl	8000558 <__aeabi_f2d>
 8001ad4:	a384      	add	r3, pc, #528	; (adr r3, 8001ce8 <main+0xb68>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe febf 	bl	800085c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f851 	bl	8000b8c <__aeabi_d2uiz>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b8b      	ldr	r3, [pc, #556]	; (8001d1c <main+0xb9c>)
 8001af0:	801a      	strh	r2, [r3, #0]
							break;
 8001af2:	e12a      	b.n	8001d4a <main+0xbca>
						case '-':
							count+=1;
 8001af4:	4b82      	ldr	r3, [pc, #520]	; (8001d00 <main+0xb80>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <main+0xb80>)
 8001afe:	801a      	strh	r2, [r3, #0]
							if(count==2)
 8001b00:	4b7f      	ldr	r3, [pc, #508]	; (8001d00 <main+0xb80>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d105      	bne.n	8001b14 <main+0x994>
							{
								count = 0;
 8001b08:	4b7d      	ldr	r3, [pc, #500]	; (8001d00 <main+0xb80>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	801a      	strh	r2, [r3, #0]
								STATE_Display = StateVhp;//80
 8001b0e:	4b7d      	ldr	r3, [pc, #500]	; (8001d04 <main+0xb84>)
 8001b10:	2250      	movs	r2, #80	; 0x50
 8001b12:	801a      	strh	r2, [r3, #0]
							}
								Vhigh-=0.1;
 8001b14:	4b7c      	ldr	r3, [pc, #496]	; (8001d08 <main+0xb88>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd1d 	bl	8000558 <__aeabi_f2d>
 8001b1e:	a370      	add	r3, pc, #448	; (adr r3, 8001ce0 <main+0xb60>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fbb8 	bl	8000298 <__aeabi_dsub>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7ff f84c 	bl	8000bcc <__aeabi_d2f>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4a74      	ldr	r2, [pc, #464]	; (8001d08 <main+0xb88>)
 8001b38:	6013      	str	r3, [r2, #0]
							if(Vhigh<=0.08)
 8001b3a:	4b73      	ldr	r3, [pc, #460]	; (8001d08 <main+0xb88>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fd0a 	bl	8000558 <__aeabi_f2d>
 8001b44:	a36a      	add	r3, pc, #424	; (adr r3, 8001cf0 <main+0xb70>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe ffd9 	bl	8000b00 <__aeabi_dcmple>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <main+0x9da>
							{
								Vhigh=0.1;
 8001b54:	4b6c      	ldr	r3, [pc, #432]	; (8001d08 <main+0xb88>)
 8001b56:	4a72      	ldr	r2, [pc, #456]	; (8001d20 <main+0xba0>)
 8001b58:	601a      	str	r2, [r3, #0]
							}
							if(Vhigh-0.001<=Vlow&Vlow!=0)
 8001b5a:	4b6b      	ldr	r3, [pc, #428]	; (8001d08 <main+0xb88>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fcfa 	bl	8000558 <__aeabi_f2d>
 8001b64:	a364      	add	r3, pc, #400	; (adr r3, 8001cf8 <main+0xb78>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fb95 	bl	8000298 <__aeabi_dsub>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4690      	mov	r8, r2
 8001b74:	4699      	mov	r9, r3
 8001b76:	4b68      	ldr	r3, [pc, #416]	; (8001d18 <main+0xb98>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fcec 	bl	8000558 <__aeabi_f2d>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	2101      	movs	r1, #1
 8001b86:	460e      	mov	r6, r1
 8001b88:	4640      	mov	r0, r8
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	f7fe ffb8 	bl	8000b00 <__aeabi_dcmple>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <main+0xa1a>
 8001b96:	2300      	movs	r3, #0
 8001b98:	461e      	mov	r6, r3
 8001b9a:	b2f2      	uxtb	r2, r6
 8001b9c:	4b5e      	ldr	r3, [pc, #376]	; (8001d18 <main+0xb98>)
 8001b9e:	edd3 7a00 	vldr	s15, [r3]
 8001ba2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d012      	beq.n	8001be0 <main+0xa60>
							{
								Vlow=Vhigh-0.1;
 8001bba:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <main+0xb88>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fcca 	bl	8000558 <__aeabi_f2d>
 8001bc4:	a346      	add	r3, pc, #280	; (adr r3, 8001ce0 <main+0xb60>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fb65 	bl	8000298 <__aeabi_dsub>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe fff9 	bl	8000bcc <__aeabi_d2f>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a4e      	ldr	r2, [pc, #312]	; (8001d18 <main+0xb98>)
 8001bde:	6013      	str	r3, [r2, #0]
							}
							if(Vhigh-0.001<=Vlow&Vlow==0)
 8001be0:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <main+0xb88>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fcb7 	bl	8000558 <__aeabi_f2d>
 8001bea:	a343      	add	r3, pc, #268	; (adr r3, 8001cf8 <main+0xb78>)
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	f7fe fb52 	bl	8000298 <__aeabi_dsub>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4690      	mov	r8, r2
 8001bfa:	4699      	mov	r9, r3
 8001bfc:	4b46      	ldr	r3, [pc, #280]	; (8001d18 <main+0xb98>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fca9 	bl	8000558 <__aeabi_f2d>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	460e      	mov	r6, r1
 8001c0e:	4640      	mov	r0, r8
 8001c10:	4649      	mov	r1, r9
 8001c12:	f7fe ff75 	bl	8000b00 <__aeabi_dcmple>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <main+0xaa0>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	461e      	mov	r6, r3
 8001c20:	b2f2      	uxtb	r2, r6
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <main+0xb98>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d012      	beq.n	8001c66 <main+0xae6>
							{
								Vhigh+=0.1;
 8001c40:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <main+0xb88>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc87 	bl	8000558 <__aeabi_f2d>
 8001c4a:	a325      	add	r3, pc, #148	; (adr r3, 8001ce0 <main+0xb60>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fb24 	bl	800029c <__adddf3>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ffb6 	bl	8000bcc <__aeabi_d2f>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <main+0xb88>)
 8001c64:	6013      	str	r3, [r2, #0]
							}
							Vhighr = Vhigh*4095/3.3;
 8001c66:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <main+0xb88>)
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001d10 <main+0xb90>
 8001c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c74:	ee17 0a90 	vmov	r0, s15
 8001c78:	f7fe fc6e 	bl	8000558 <__aeabi_f2d>
 8001c7c:	a31a      	add	r3, pc, #104	; (adr r3, 8001ce8 <main+0xb68>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	f7fe fdeb 	bl	800085c <__aeabi_ddiv>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe ff7d 	bl	8000b8c <__aeabi_d2uiz>
 8001c92:	4603      	mov	r3, r0
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <main+0xb94>)
 8001c98:	801a      	strh	r2, [r3, #0]
							Vlowr = Vlow*4095/3.3;
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <main+0xb98>)
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001d10 <main+0xb90>
 8001ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca8:	ee17 0a90 	vmov	r0, s15
 8001cac:	f7fe fc54 	bl	8000558 <__aeabi_f2d>
 8001cb0:	a30d      	add	r3, pc, #52	; (adr r3, 8001ce8 <main+0xb68>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe fdd1 	bl	800085c <__aeabi_ddiv>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7fe ff63 	bl	8000b8c <__aeabi_d2uiz>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <main+0xb9c>)
 8001ccc:	801a      	strh	r2, [r3, #0]
							break;
 8001cce:	e03c      	b.n	8001d4a <main+0xbca>
						case 'x':
							count =0;
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <main+0xb80>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	801a      	strh	r2, [r3, #0]
							STATE_Display = StateNo_1VP;//60
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <main+0xb84>)
 8001cd8:	223c      	movs	r2, #60	; 0x3c
 8001cda:	801a      	strh	r2, [r3, #0]
							break;
 8001cdc:	e035      	b.n	8001d4a <main+0xbca>
 8001cde:	bf00      	nop
 8001ce0:	9999999a 	.word	0x9999999a
 8001ce4:	3fb99999 	.word	0x3fb99999
 8001ce8:	66666666 	.word	0x66666666
 8001cec:	400a6666 	.word	0x400a6666
 8001cf0:	47ae147b 	.word	0x47ae147b
 8001cf4:	3fb47ae1 	.word	0x3fb47ae1
 8001cf8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cfc:	3f50624d 	.word	0x3f50624d
 8001d00:	20000114 	.word	0x20000114
 8001d04:	20000106 	.word	0x20000106
 8001d08:	20000004 	.word	0x20000004
 8001d0c:	40533333 	.word	0x40533333
 8001d10:	457ff000 	.word	0x457ff000
 8001d14:	20000008 	.word	0x20000008
 8001d18:	20000100 	.word	0x20000100
 8001d1c:	20000108 	.word	0x20000108
 8001d20:	3dcccccd 	.word	0x3dcccccd
						default:
							count+=1;
 8001d24:	4ba2      	ldr	r3, [pc, #648]	; (8001fb0 <main+0xe30>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4ba0      	ldr	r3, [pc, #640]	; (8001fb0 <main+0xe30>)
 8001d2e:	801a      	strh	r2, [r3, #0]
							if(count==2)
 8001d30:	4b9f      	ldr	r3, [pc, #636]	; (8001fb0 <main+0xe30>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	f040 8400 	bne.w	800253a <main+0x13ba>
							{
								count = 0;
 8001d3a:	4b9d      	ldr	r3, [pc, #628]	; (8001fb0 <main+0xe30>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	801a      	strh	r2, [r3, #0]
								STATE_Display = StateVhp;//80
 8001d40:	4b9c      	ldr	r3, [pc, #624]	; (8001fb4 <main+0xe34>)
 8001d42:	2250      	movs	r2, #80	; 0x50
 8001d44:	801a      	strh	r2, [r3, #0]
							}
					}break;
 8001d46:	e3f8      	b.n	800253a <main+0x13ba>
							break;
 8001d48:	bf00      	nop
					}break;
 8001d4a:	e3f6      	b.n	800253a <main+0x13ba>
					case StateVlp://100
						sprintf(TxDataBuffer,"Vlow\r\n[+]:+\r\n[-]:-\r\n[x]:x\r\n");
 8001d4c:	499a      	ldr	r1, [pc, #616]	; (8001fb8 <main+0xe38>)
 8001d4e:	489b      	ldr	r0, [pc, #620]	; (8001fbc <main+0xe3c>)
 8001d50:	f005 fca4 	bl	800769c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 8001d54:	4899      	ldr	r0, [pc, #612]	; (8001fbc <main+0xe3c>)
 8001d56:	f7fe fa43 	bl	80001e0 <strlen>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d62:	4996      	ldr	r1, [pc, #600]	; (8001fbc <main+0xe3c>)
 8001d64:	4896      	ldr	r0, [pc, #600]	; (8001fc0 <main+0xe40>)
 8001d66:	f004 fe08 	bl	800697a <HAL_UART_Transmit>
						STATE_Display = StateVl;//110
 8001d6a:	4b92      	ldr	r3, [pc, #584]	; (8001fb4 <main+0xe34>)
 8001d6c:	226e      	movs	r2, #110	; 0x6e
 8001d6e:	801a      	strh	r2, [r3, #0]
						break;
 8001d70:	e3fd      	b.n	800256e <main+0x13ee>
					case StateVl://110
						switch(inputchar)
 8001d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d76:	2b78      	cmp	r3, #120	; 0x78
 8001d78:	f000 8199 	beq.w	80020ae <main+0xf2e>
 8001d7c:	2b78      	cmp	r3, #120	; 0x78
 8001d7e:	f300 819d 	bgt.w	80020bc <main+0xf3c>
 8001d82:	2b2d      	cmp	r3, #45	; 0x2d
 8001d84:	f000 812a 	beq.w	8001fdc <main+0xe5c>
 8001d88:	2b2d      	cmp	r3, #45	; 0x2d
 8001d8a:	f300 8197 	bgt.w	80020bc <main+0xf3c>
 8001d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d92:	f000 81a5 	beq.w	80020e0 <main+0xf60>
 8001d96:	2b2b      	cmp	r3, #43	; 0x2b
 8001d98:	f040 8190 	bne.w	80020bc <main+0xf3c>
						{
							case -1:
								break;
							case '+':
								count+=1;
 8001d9c:	4b84      	ldr	r3, [pc, #528]	; (8001fb0 <main+0xe30>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <main+0xe30>)
 8001da6:	801a      	strh	r2, [r3, #0]
								if(count==2)
 8001da8:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <main+0xe30>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d105      	bne.n	8001dbc <main+0xc3c>
								{
									count = 0;
 8001db0:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <main+0xe30>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	801a      	strh	r2, [r3, #0]
									STATE_Display = StateVlp;//100
 8001db6:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <main+0xe34>)
 8001db8:	2264      	movs	r2, #100	; 0x64
 8001dba:	801a      	strh	r2, [r3, #0]
								}
								Vlow+=0.1;
 8001dbc:	4b81      	ldr	r3, [pc, #516]	; (8001fc4 <main+0xe44>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbc9 	bl	8000558 <__aeabi_f2d>
 8001dc6:	a372      	add	r3, pc, #456	; (adr r3, 8001f90 <main+0xe10>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fa66 	bl	800029c <__adddf3>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe fef8 	bl	8000bcc <__aeabi_d2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a79      	ldr	r2, [pc, #484]	; (8001fc4 <main+0xe44>)
 8001de0:	6013      	str	r3, [r2, #0]
								if(Vlow>=3.18)
 8001de2:	4b78      	ldr	r3, [pc, #480]	; (8001fc4 <main+0xe44>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fbb6 	bl	8000558 <__aeabi_f2d>
 8001dec:	a36a      	add	r3, pc, #424	; (adr r3, 8001f98 <main+0xe18>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fe8f 	bl	8000b14 <__aeabi_dcmpge>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <main+0xc82>
								{
									Vlow=3.2;
 8001dfc:	4b71      	ldr	r3, [pc, #452]	; (8001fc4 <main+0xe44>)
 8001dfe:	4a72      	ldr	r2, [pc, #456]	; (8001fc8 <main+0xe48>)
 8001e00:	601a      	str	r2, [r3, #0]
								}
								if(Vlow>=Vhigh-0.001&Vhigh<=3.3)
 8001e02:	4b70      	ldr	r3, [pc, #448]	; (8001fc4 <main+0xe44>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fba6 	bl	8000558 <__aeabi_f2d>
 8001e0c:	4680      	mov	r8, r0
 8001e0e:	4689      	mov	r9, r1
 8001e10:	4b6e      	ldr	r3, [pc, #440]	; (8001fcc <main+0xe4c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fb9f 	bl	8000558 <__aeabi_f2d>
 8001e1a:	a361      	add	r3, pc, #388	; (adr r3, 8001fa0 <main+0xe20>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fa3a 	bl	8000298 <__aeabi_dsub>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	2101      	movs	r1, #1
 8001e2a:	460e      	mov	r6, r1
 8001e2c:	4640      	mov	r0, r8
 8001e2e:	4649      	mov	r1, r9
 8001e30:	f7fe fe70 	bl	8000b14 <__aeabi_dcmpge>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <main+0xcbe>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	461e      	mov	r6, r3
 8001e3e:	b2f6      	uxtb	r6, r6
 8001e40:	4b62      	ldr	r3, [pc, #392]	; (8001fcc <main+0xe4c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb87 	bl	8000558 <__aeabi_f2d>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	4698      	mov	r8, r3
 8001e4e:	a356      	add	r3, pc, #344	; (adr r3, 8001fa8 <main+0xe28>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	f7fe fe54 	bl	8000b00 <__aeabi_dcmple>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <main+0xce2>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	4698      	mov	r8, r3
 8001e62:	fa5f f388 	uxtb.w	r3, r8
 8001e66:	4033      	ands	r3, r6
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d012      	beq.n	8001e94 <main+0xd14>
								{
									Vhigh=Vlow+0.1;
 8001e6e:	4b55      	ldr	r3, [pc, #340]	; (8001fc4 <main+0xe44>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb70 	bl	8000558 <__aeabi_f2d>
 8001e78:	a345      	add	r3, pc, #276	; (adr r3, 8001f90 <main+0xe10>)
 8001e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7e:	f7fe fa0d 	bl	800029c <__adddf3>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f7fe fe9f 	bl	8000bcc <__aeabi_d2f>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4a4e      	ldr	r2, [pc, #312]	; (8001fcc <main+0xe4c>)
 8001e92:	6013      	str	r3, [r2, #0]
								}
								if(Vlow>=Vhigh-0.001&Vhigh==3.3)
 8001e94:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <main+0xe44>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb5d 	bl	8000558 <__aeabi_f2d>
 8001e9e:	4680      	mov	r8, r0
 8001ea0:	4689      	mov	r9, r1
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <main+0xe4c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fb56 	bl	8000558 <__aeabi_f2d>
 8001eac:	a33c      	add	r3, pc, #240	; (adr r3, 8001fa0 <main+0xe20>)
 8001eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb2:	f7fe f9f1 	bl	8000298 <__aeabi_dsub>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	2101      	movs	r1, #1
 8001ebc:	460e      	mov	r6, r1
 8001ebe:	4640      	mov	r0, r8
 8001ec0:	4649      	mov	r1, r9
 8001ec2:	f7fe fe27 	bl	8000b14 <__aeabi_dcmpge>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <main+0xd50>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	461e      	mov	r6, r3
 8001ed0:	b2f6      	uxtb	r6, r6
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <main+0xe4c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb3e 	bl	8000558 <__aeabi_f2d>
 8001edc:	2301      	movs	r3, #1
 8001ede:	4698      	mov	r8, r3
 8001ee0:	a331      	add	r3, pc, #196	; (adr r3, 8001fa8 <main+0xe28>)
 8001ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee6:	f7fe fdf7 	bl	8000ad8 <__aeabi_dcmpeq>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <main+0xd74>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	4698      	mov	r8, r3
 8001ef4:	fa5f f388 	uxtb.w	r3, r8
 8001ef8:	4033      	ands	r3, r6
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d012      	beq.n	8001f26 <main+0xda6>
								{
									Vlow-=0.1;
 8001f00:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <main+0xe44>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fb27 	bl	8000558 <__aeabi_f2d>
 8001f0a:	a321      	add	r3, pc, #132	; (adr r3, 8001f90 <main+0xe10>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	f7fe f9c2 	bl	8000298 <__aeabi_dsub>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7fe fe56 	bl	8000bcc <__aeabi_d2f>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <main+0xe44>)
 8001f24:	6013      	str	r3, [r2, #0]
								}
								Vhighr = Vhigh*4095/3.3;
 8001f26:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <main+0xe4c>)
 8001f28:	edd3 7a00 	vldr	s15, [r3]
 8001f2c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001fd0 <main+0xe50>
 8001f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f34:	ee17 0a90 	vmov	r0, s15
 8001f38:	f7fe fb0e 	bl	8000558 <__aeabi_f2d>
 8001f3c:	a31a      	add	r3, pc, #104	; (adr r3, 8001fa8 <main+0xe28>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f7fe fc8b 	bl	800085c <__aeabi_ddiv>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f7fe fe1d 	bl	8000b8c <__aeabi_d2uiz>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <main+0xe54>)
 8001f58:	801a      	strh	r2, [r3, #0]
								Vlowr = Vlow*4095/3.3;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <main+0xe44>)
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001fd0 <main+0xe50>
 8001f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f68:	ee17 0a90 	vmov	r0, s15
 8001f6c:	f7fe faf4 	bl	8000558 <__aeabi_f2d>
 8001f70:	a30d      	add	r3, pc, #52	; (adr r3, 8001fa8 <main+0xe28>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fc71 	bl	800085c <__aeabi_ddiv>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f7fe fe03 	bl	8000b8c <__aeabi_d2uiz>
 8001f86:	4603      	mov	r3, r0
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <main+0xe58>)
 8001f8c:	801a      	strh	r2, [r3, #0]
								break;
 8001f8e:	e0a8      	b.n	80020e2 <main+0xf62>
 8001f90:	9999999a 	.word	0x9999999a
 8001f94:	3fb99999 	.word	0x3fb99999
 8001f98:	d70a3d71 	.word	0xd70a3d71
 8001f9c:	400970a3 	.word	0x400970a3
 8001fa0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fa4:	3f50624d 	.word	0x3f50624d
 8001fa8:	66666666 	.word	0x66666666
 8001fac:	400a6666 	.word	0x400a6666
 8001fb0:	20000114 	.word	0x20000114
 8001fb4:	20000106 	.word	0x20000106
 8001fb8:	08009070 	.word	0x08009070
 8001fbc:	200000b4 	.word	0x200000b4
 8001fc0:	200002d0 	.word	0x200002d0
 8001fc4:	20000100 	.word	0x20000100
 8001fc8:	404ccccd 	.word	0x404ccccd
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	457ff000 	.word	0x457ff000
 8001fd4:	20000008 	.word	0x20000008
 8001fd8:	20000108 	.word	0x20000108
							case '-':
								count+=1;
 8001fdc:	4ba8      	ldr	r3, [pc, #672]	; (8002280 <main+0x1100>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	4ba6      	ldr	r3, [pc, #664]	; (8002280 <main+0x1100>)
 8001fe6:	801a      	strh	r2, [r3, #0]
								if(count==2)
 8001fe8:	4ba5      	ldr	r3, [pc, #660]	; (8002280 <main+0x1100>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d105      	bne.n	8001ffc <main+0xe7c>
								{
									count = 0;
 8001ff0:	4ba3      	ldr	r3, [pc, #652]	; (8002280 <main+0x1100>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	801a      	strh	r2, [r3, #0]
									STATE_Display = StateVlp;//100
 8001ff6:	4ba3      	ldr	r3, [pc, #652]	; (8002284 <main+0x1104>)
 8001ff8:	2264      	movs	r2, #100	; 0x64
 8001ffa:	801a      	strh	r2, [r3, #0]
								}
									Vlow-=0.1;
 8001ffc:	4ba2      	ldr	r3, [pc, #648]	; (8002288 <main+0x1108>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faa9 	bl	8000558 <__aeabi_f2d>
 8002006:	a398      	add	r3, pc, #608	; (adr r3, 8002268 <main+0x10e8>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	f7fe f944 	bl	8000298 <__aeabi_dsub>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	f7fe fdd8 	bl	8000bcc <__aeabi_d2f>
 800201c:	4603      	mov	r3, r0
 800201e:	4a9a      	ldr	r2, [pc, #616]	; (8002288 <main+0x1108>)
 8002020:	6013      	str	r3, [r2, #0]
								if(Vlow<=0.08)
 8002022:	4b99      	ldr	r3, [pc, #612]	; (8002288 <main+0x1108>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fa96 	bl	8000558 <__aeabi_f2d>
 800202c:	a390      	add	r3, pc, #576	; (adr r3, 8002270 <main+0x10f0>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe fd65 	bl	8000b00 <__aeabi_dcmple>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <main+0xec4>
								{
									Vlow=0;
 800203c:	4b92      	ldr	r3, [pc, #584]	; (8002288 <main+0x1108>)
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
								}
								Vhighr = Vhigh*4095/3.3;
 8002044:	4b91      	ldr	r3, [pc, #580]	; (800228c <main+0x110c>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8002290 <main+0x1110>
 800204e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002052:	ee17 0a90 	vmov	r0, s15
 8002056:	f7fe fa7f 	bl	8000558 <__aeabi_f2d>
 800205a:	a387      	add	r3, pc, #540	; (adr r3, 8002278 <main+0x10f8>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe fbfc 	bl	800085c <__aeabi_ddiv>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	f7fe fd8e 	bl	8000b8c <__aeabi_d2uiz>
 8002070:	4603      	mov	r3, r0
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b87      	ldr	r3, [pc, #540]	; (8002294 <main+0x1114>)
 8002076:	801a      	strh	r2, [r3, #0]
								Vlowr = Vlow*4095/3.3;
 8002078:	4b83      	ldr	r3, [pc, #524]	; (8002288 <main+0x1108>)
 800207a:	edd3 7a00 	vldr	s15, [r3]
 800207e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002290 <main+0x1110>
 8002082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002086:	ee17 0a90 	vmov	r0, s15
 800208a:	f7fe fa65 	bl	8000558 <__aeabi_f2d>
 800208e:	a37a      	add	r3, pc, #488	; (adr r3, 8002278 <main+0x10f8>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fbe2 	bl	800085c <__aeabi_ddiv>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fd74 	bl	8000b8c <__aeabi_d2uiz>
 80020a4:	4603      	mov	r3, r0
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	4b7b      	ldr	r3, [pc, #492]	; (8002298 <main+0x1118>)
 80020aa:	801a      	strh	r2, [r3, #0]
								break;
 80020ac:	e019      	b.n	80020e2 <main+0xf62>
							case 'x':
								count =0;
 80020ae:	4b74      	ldr	r3, [pc, #464]	; (8002280 <main+0x1100>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	801a      	strh	r2, [r3, #0]
								STATE_Display = StateNo_1VP;//60
 80020b4:	4b73      	ldr	r3, [pc, #460]	; (8002284 <main+0x1104>)
 80020b6:	223c      	movs	r2, #60	; 0x3c
 80020b8:	801a      	strh	r2, [r3, #0]
								break;
 80020ba:	e012      	b.n	80020e2 <main+0xf62>
							default:
								count+=1;
 80020bc:	4b70      	ldr	r3, [pc, #448]	; (8002280 <main+0x1100>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	4b6e      	ldr	r3, [pc, #440]	; (8002280 <main+0x1100>)
 80020c6:	801a      	strh	r2, [r3, #0]
								if(count==2)
 80020c8:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <main+0x1100>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	f040 8236 	bne.w	800253e <main+0x13be>
								{
									count = 0;
 80020d2:	4b6b      	ldr	r3, [pc, #428]	; (8002280 <main+0x1100>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	801a      	strh	r2, [r3, #0]
									STATE_Display = StateVlp;//60
 80020d8:	4b6a      	ldr	r3, [pc, #424]	; (8002284 <main+0x1104>)
 80020da:	2264      	movs	r2, #100	; 0x64
 80020dc:	801a      	strh	r2, [r3, #0]
								}
						}break;
 80020de:	e22e      	b.n	800253e <main+0x13be>
								break;
 80020e0:	bf00      	nop
						}break;
 80020e2:	e22c      	b.n	800253e <main+0x13be>


				case StateNo_1SP://200
					sprintf(TxDataBuffer,"slope\r\n[+]:+\r\n[-]:-\r\n[x]:x\r\n");
 80020e4:	496d      	ldr	r1, [pc, #436]	; (800229c <main+0x111c>)
 80020e6:	486e      	ldr	r0, [pc, #440]	; (80022a0 <main+0x1120>)
 80020e8:	f005 fad8 	bl	800769c <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 80020ec:	486c      	ldr	r0, [pc, #432]	; (80022a0 <main+0x1120>)
 80020ee:	f7fe f877 	bl	80001e0 <strlen>
 80020f2:	4603      	mov	r3, r0
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fa:	4969      	ldr	r1, [pc, #420]	; (80022a0 <main+0x1120>)
 80020fc:	4869      	ldr	r0, [pc, #420]	; (80022a4 <main+0x1124>)
 80020fe:	f004 fc3c 	bl	800697a <HAL_UART_Transmit>
					STATE_Display = StateNo_1S;//210
 8002102:	4b60      	ldr	r3, [pc, #384]	; (8002284 <main+0x1104>)
 8002104:	22d2      	movs	r2, #210	; 0xd2
 8002106:	801a      	strh	r2, [r3, #0]
					break;
 8002108:	e231      	b.n	800256e <main+0x13ee>
					case StateNo_1S://210
						switch(inputchar){
 800210a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210e:	2b78      	cmp	r3, #120	; 0x78
 8002110:	d074      	beq.n	80021fc <main+0x107c>
 8002112:	2b78      	cmp	r3, #120	; 0x78
 8002114:	dc79      	bgt.n	800220a <main+0x108a>
 8002116:	2b2d      	cmp	r3, #45	; 0x2d
 8002118:	d03c      	beq.n	8002194 <main+0x1014>
 800211a:	2b2d      	cmp	r3, #45	; 0x2d
 800211c:	dc75      	bgt.n	800220a <main+0x108a>
 800211e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002122:	f000 8084 	beq.w	800222e <main+0x10ae>
 8002126:	2b2b      	cmp	r3, #43	; 0x2b
 8002128:	d16f      	bne.n	800220a <main+0x108a>
						case -1:
							break;
						case '+':
							count += 1;
 800212a:	4b55      	ldr	r3, [pc, #340]	; (8002280 <main+0x1100>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	4b53      	ldr	r3, [pc, #332]	; (8002280 <main+0x1100>)
 8002134:	801a      	strh	r2, [r3, #0]
							if(count==2)
 8002136:	4b52      	ldr	r3, [pc, #328]	; (8002280 <main+0x1100>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d105      	bne.n	800214a <main+0xfca>
							{
								count = 0;
 800213e:	4b50      	ldr	r3, [pc, #320]	; (8002280 <main+0x1100>)
 8002140:	2200      	movs	r2, #0
 8002142:	801a      	strh	r2, [r3, #0]
								STATE_Display = StateNo_1SP;//200
 8002144:	4b4f      	ldr	r3, [pc, #316]	; (8002284 <main+0x1104>)
 8002146:	22c8      	movs	r2, #200	; 0xc8
 8002148:	801a      	strh	r2, [r3, #0]
							}
							if(m==-1){
 800214a:	4b57      	ldr	r3, [pc, #348]	; (80022a8 <main+0x1128>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002154:	eef4 7a47 	vcmp.f32	s15, s14
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	d103      	bne.n	8002166 <main+0xfe6>
								m=1;
 800215e:	4b52      	ldr	r3, [pc, #328]	; (80022a8 <main+0x1128>)
 8002160:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002164:	601a      	str	r2, [r3, #0]
							}
							if(statem[0]==1&statem[1]==2){
 8002166:	4b51      	ldr	r3, [pc, #324]	; (80022ac <main+0x112c>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	bf0c      	ite	eq
 800216e:	2301      	moveq	r3, #1
 8002170:	2300      	movne	r3, #0
 8002172:	b2da      	uxtb	r2, r3
 8002174:	4b4d      	ldr	r3, [pc, #308]	; (80022ac <main+0x112c>)
 8002176:	885b      	ldrh	r3, [r3, #2]
 8002178:	2b02      	cmp	r3, #2
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	4013      	ands	r3, r2
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d053      	beq.n	8002232 <main+0x10b2>
								dataOut=Vlowr;
 800218a:	4b43      	ldr	r3, [pc, #268]	; (8002298 <main+0x1118>)
 800218c:	881a      	ldrh	r2, [r3, #0]
 800218e:	4b48      	ldr	r3, [pc, #288]	; (80022b0 <main+0x1130>)
 8002190:	801a      	strh	r2, [r3, #0]
							}
							break;
 8002192:	e04e      	b.n	8002232 <main+0x10b2>
						case '-':
							count += 1;
 8002194:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <main+0x1100>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	4b38      	ldr	r3, [pc, #224]	; (8002280 <main+0x1100>)
 800219e:	801a      	strh	r2, [r3, #0]
							if(count==2)
 80021a0:	4b37      	ldr	r3, [pc, #220]	; (8002280 <main+0x1100>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d105      	bne.n	80021b4 <main+0x1034>
							{
								count = 0;
 80021a8:	4b35      	ldr	r3, [pc, #212]	; (8002280 <main+0x1100>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	801a      	strh	r2, [r3, #0]
								STATE_Display = StateNo_1SP;//200
 80021ae:	4b35      	ldr	r3, [pc, #212]	; (8002284 <main+0x1104>)
 80021b0:	22c8      	movs	r2, #200	; 0xc8
 80021b2:	801a      	strh	r2, [r3, #0]
							}
							if(m==1){
 80021b4:	4b3c      	ldr	r3, [pc, #240]	; (80022a8 <main+0x1128>)
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021be:	eef4 7a47 	vcmp.f32	s15, s14
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	d102      	bne.n	80021ce <main+0x104e>
								m=-1;
 80021c8:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <main+0x1128>)
 80021ca:	4a3a      	ldr	r2, [pc, #232]	; (80022b4 <main+0x1134>)
 80021cc:	601a      	str	r2, [r3, #0]
							}
							if(statem[0]==2&statem[1]==1){
 80021ce:	4b37      	ldr	r3, [pc, #220]	; (80022ac <main+0x112c>)
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	bf0c      	ite	eq
 80021d6:	2301      	moveq	r3, #1
 80021d8:	2300      	movne	r3, #0
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b33      	ldr	r3, [pc, #204]	; (80022ac <main+0x112c>)
 80021de:	885b      	ldrh	r3, [r3, #2]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4013      	ands	r3, r2
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d021      	beq.n	8002236 <main+0x10b6>
								dataOut=Vhighr;
 80021f2:	4b28      	ldr	r3, [pc, #160]	; (8002294 <main+0x1114>)
 80021f4:	881a      	ldrh	r2, [r3, #0]
 80021f6:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <main+0x1130>)
 80021f8:	801a      	strh	r2, [r3, #0]
							}
							break;
 80021fa:	e01c      	b.n	8002236 <main+0x10b6>
						case 'x':
							count =0;
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <main+0x1100>)
 80021fe:	2200      	movs	r2, #0
 8002200:	801a      	strh	r2, [r3, #0]
							STATE_Display = StateMenuNo_1;//20
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <main+0x1104>)
 8002204:	2214      	movs	r2, #20
 8002206:	801a      	strh	r2, [r3, #0]
							break;
 8002208:	e016      	b.n	8002238 <main+0x10b8>
						default:
							count+=1;
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <main+0x1100>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <main+0x1100>)
 8002214:	801a      	strh	r2, [r3, #0]
							if(count==2)
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <main+0x1100>)
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	2b02      	cmp	r3, #2
 800221c:	f040 8191 	bne.w	8002542 <main+0x13c2>
							{
								count = 0;
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <main+0x1100>)
 8002222:	2200      	movs	r2, #0
 8002224:	801a      	strh	r2, [r3, #0]
								STATE_Display = StateNo_1SP;//200
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <main+0x1104>)
 8002228:	22c8      	movs	r2, #200	; 0xc8
 800222a:	801a      	strh	r2, [r3, #0]
							}
						}break;
 800222c:	e189      	b.n	8002542 <main+0x13c2>
							break;
 800222e:	bf00      	nop
 8002230:	e187      	b.n	8002542 <main+0x13c2>
							break;
 8002232:	bf00      	nop
 8002234:	e185      	b.n	8002542 <main+0x13c2>
							break;
 8002236:	bf00      	nop
						}break;
 8002238:	e183      	b.n	8002542 <main+0x13c2>
						case StateMenuNo_2://300
							  sprintf(TxDataBuffer,"sine\r\n[f]:freq\r\n[v]:Vhigh,Vlow\r\n[x]:x\r\n");
 800223a:	491f      	ldr	r1, [pc, #124]	; (80022b8 <main+0x1138>)
 800223c:	4818      	ldr	r0, [pc, #96]	; (80022a0 <main+0x1120>)
 800223e:	f005 fa2d 	bl	800769c <siprintf>
							  HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 8002242:	4817      	ldr	r0, [pc, #92]	; (80022a0 <main+0x1120>)
 8002244:	f7fd ffcc 	bl	80001e0 <strlen>
 8002248:	4603      	mov	r3, r0
 800224a:	b29a      	uxth	r2, r3
 800224c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002250:	4913      	ldr	r1, [pc, #76]	; (80022a0 <main+0x1120>)
 8002252:	4814      	ldr	r0, [pc, #80]	; (80022a4 <main+0x1124>)
 8002254:	f004 fb91 	bl	800697a <HAL_UART_Transmit>
							  STATE_Display = StateNo_2;//310
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <main+0x1104>)
 800225a:	f44f 729b 	mov.w	r2, #310	; 0x136
 800225e:	801a      	strh	r2, [r3, #0]
							  break;
 8002260:	e185      	b.n	800256e <main+0x13ee>
 8002262:	bf00      	nop
 8002264:	f3af 8000 	nop.w
 8002268:	9999999a 	.word	0x9999999a
 800226c:	3fb99999 	.word	0x3fb99999
 8002270:	47ae147b 	.word	0x47ae147b
 8002274:	3fb47ae1 	.word	0x3fb47ae1
 8002278:	66666666 	.word	0x66666666
 800227c:	400a6666 	.word	0x400a6666
 8002280:	20000114 	.word	0x20000114
 8002284:	20000106 	.word	0x20000106
 8002288:	20000100 	.word	0x20000100
 800228c:	20000004 	.word	0x20000004
 8002290:	457ff000 	.word	0x457ff000
 8002294:	20000008 	.word	0x20000008
 8002298:	20000108 	.word	0x20000108
 800229c:	0800908c 	.word	0x0800908c
 80022a0:	200000b4 	.word	0x200000b4
 80022a4:	200002d0 	.word	0x200002d0
 80022a8:	2000000c 	.word	0x2000000c
 80022ac:	20000110 	.word	0x20000110
 80022b0:	20000104 	.word	0x20000104
 80022b4:	bf800000 	.word	0xbf800000
 80022b8:	080090ac 	.word	0x080090ac
						case StateNo_2://310
							switch(inputchar){
 80022bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c0:	2b78      	cmp	r3, #120	; 0x78
 80022c2:	d018      	beq.n	80022f6 <main+0x1176>
 80022c4:	2b78      	cmp	r3, #120	; 0x78
 80022c6:	dc1d      	bgt.n	8002304 <main+0x1184>
 80022c8:	2b76      	cmp	r3, #118	; 0x76
 80022ca:	d00d      	beq.n	80022e8 <main+0x1168>
 80022cc:	2b76      	cmp	r3, #118	; 0x76
 80022ce:	dc19      	bgt.n	8002304 <main+0x1184>
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d029      	beq.n	800232a <main+0x11aa>
 80022d6:	2b66      	cmp	r3, #102	; 0x66
 80022d8:	d114      	bne.n	8002304 <main+0x1184>
							case -1:
								break;
							case 'f':
								count = 0;
 80022da:	4b9d      	ldr	r3, [pc, #628]	; (8002550 <main+0x13d0>)
 80022dc:	2200      	movs	r2, #0
 80022de:	801a      	strh	r2, [r3, #0]
								STATE_Display = StateNo_1FP;//40
 80022e0:	4b9c      	ldr	r3, [pc, #624]	; (8002554 <main+0x13d4>)
 80022e2:	2228      	movs	r2, #40	; 0x28
 80022e4:	801a      	strh	r2, [r3, #0]
								break;
 80022e6:	e021      	b.n	800232c <main+0x11ac>
							case 'v':
								count = 0;
 80022e8:	4b99      	ldr	r3, [pc, #612]	; (8002550 <main+0x13d0>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	801a      	strh	r2, [r3, #0]
								STATE_Display = StateNo_1VP;//60
 80022ee:	4b99      	ldr	r3, [pc, #612]	; (8002554 <main+0x13d4>)
 80022f0:	223c      	movs	r2, #60	; 0x3c
 80022f2:	801a      	strh	r2, [r3, #0]
								break;
 80022f4:	e01a      	b.n	800232c <main+0x11ac>
							case 'x':
								count =0;
 80022f6:	4b96      	ldr	r3, [pc, #600]	; (8002550 <main+0x13d0>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	801a      	strh	r2, [r3, #0]
								STATE_Display = StateDisplay_start;//0
 80022fc:	4b95      	ldr	r3, [pc, #596]	; (8002554 <main+0x13d4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	801a      	strh	r2, [r3, #0]
								break;
 8002302:	e013      	b.n	800232c <main+0x11ac>
							default:
								count+=1;
 8002304:	4b92      	ldr	r3, [pc, #584]	; (8002550 <main+0x13d0>)
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	4b90      	ldr	r3, [pc, #576]	; (8002550 <main+0x13d0>)
 800230e:	801a      	strh	r2, [r3, #0]
								if(count==2){
 8002310:	4b8f      	ldr	r3, [pc, #572]	; (8002550 <main+0x13d0>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	2b02      	cmp	r3, #2
 8002316:	f040 8116 	bne.w	8002546 <main+0x13c6>
									count = 0;
 800231a:	4b8d      	ldr	r3, [pc, #564]	; (8002550 <main+0x13d0>)
 800231c:	2200      	movs	r2, #0
 800231e:	801a      	strh	r2, [r3, #0]
									STATE_Display = StateMenuNo_2;//310
 8002320:	4b8c      	ldr	r3, [pc, #560]	; (8002554 <main+0x13d4>)
 8002322:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002326:	801a      	strh	r2, [r3, #0]
								}
							}break;
 8002328:	e10d      	b.n	8002546 <main+0x13c6>
								break;
 800232a:	bf00      	nop
							}break;
 800232c:	e10b      	b.n	8002546 <main+0x13c6>
							case StateMenuNo_3://500
								  sprintf(TxDataBuffer,"square\r\n[f]:freq\r\n[v]:Vhigh,Vlow\r\n[d]:duty\r\n[x]:x\r\n");
 800232e:	498a      	ldr	r1, [pc, #552]	; (8002558 <main+0x13d8>)
 8002330:	488a      	ldr	r0, [pc, #552]	; (800255c <main+0x13dc>)
 8002332:	f005 f9b3 	bl	800769c <siprintf>
								  HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 8002336:	4889      	ldr	r0, [pc, #548]	; (800255c <main+0x13dc>)
 8002338:	f7fd ff52 	bl	80001e0 <strlen>
 800233c:	4603      	mov	r3, r0
 800233e:	b29a      	uxth	r2, r3
 8002340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002344:	4985      	ldr	r1, [pc, #532]	; (800255c <main+0x13dc>)
 8002346:	4886      	ldr	r0, [pc, #536]	; (8002560 <main+0x13e0>)
 8002348:	f004 fb17 	bl	800697a <HAL_UART_Transmit>
								  STATE_Display = StateNo_3;//510
 800234c:	4b81      	ldr	r3, [pc, #516]	; (8002554 <main+0x13d4>)
 800234e:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8002352:	801a      	strh	r2, [r3, #0]
								  break;
 8002354:	e10b      	b.n	800256e <main+0x13ee>
							case StateNo_3://510
								switch(inputchar){
 8002356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800235a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235e:	d067      	beq.n	8002430 <main+0x12b0>
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	db51      	blt.n	800240a <main+0x128a>
 8002366:	2b78      	cmp	r3, #120	; 0x78
 8002368:	dc4f      	bgt.n	800240a <main+0x128a>
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	db4d      	blt.n	800240a <main+0x128a>
 800236e:	3b64      	subs	r3, #100	; 0x64
 8002370:	2b14      	cmp	r3, #20
 8002372:	d84a      	bhi.n	800240a <main+0x128a>
 8002374:	a201      	add	r2, pc, #4	; (adr r2, 800237c <main+0x11fc>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	080023ed 	.word	0x080023ed
 8002380:	0800240b 	.word	0x0800240b
 8002384:	080023d1 	.word	0x080023d1
 8002388:	0800240b 	.word	0x0800240b
 800238c:	0800240b 	.word	0x0800240b
 8002390:	0800240b 	.word	0x0800240b
 8002394:	0800240b 	.word	0x0800240b
 8002398:	0800240b 	.word	0x0800240b
 800239c:	0800240b 	.word	0x0800240b
 80023a0:	0800240b 	.word	0x0800240b
 80023a4:	0800240b 	.word	0x0800240b
 80023a8:	0800240b 	.word	0x0800240b
 80023ac:	0800240b 	.word	0x0800240b
 80023b0:	0800240b 	.word	0x0800240b
 80023b4:	0800240b 	.word	0x0800240b
 80023b8:	0800240b 	.word	0x0800240b
 80023bc:	0800240b 	.word	0x0800240b
 80023c0:	0800240b 	.word	0x0800240b
 80023c4:	080023df 	.word	0x080023df
 80023c8:	0800240b 	.word	0x0800240b
 80023cc:	080023fd 	.word	0x080023fd
								case -1:
									break;
								case 'f':
									count = 0;
 80023d0:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <main+0x13d0>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	801a      	strh	r2, [r3, #0]
									STATE_Display = StateNo_1FP;//40
 80023d6:	4b5f      	ldr	r3, [pc, #380]	; (8002554 <main+0x13d4>)
 80023d8:	2228      	movs	r2, #40	; 0x28
 80023da:	801a      	strh	r2, [r3, #0]
									break;
 80023dc:	e029      	b.n	8002432 <main+0x12b2>
								case 'v':
									count = 0;
 80023de:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <main+0x13d0>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	801a      	strh	r2, [r3, #0]
									STATE_Display = StateNo_1VP;//60
 80023e4:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <main+0x13d4>)
 80023e6:	223c      	movs	r2, #60	; 0x3c
 80023e8:	801a      	strh	r2, [r3, #0]
									break;
 80023ea:	e022      	b.n	8002432 <main+0x12b2>
								case 'd':
									count = 0;
 80023ec:	4b58      	ldr	r3, [pc, #352]	; (8002550 <main+0x13d0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	801a      	strh	r2, [r3, #0]
									STATE_Display = StateDutyP;
 80023f2:	4b58      	ldr	r3, [pc, #352]	; (8002554 <main+0x13d4>)
 80023f4:	f44f 7202 	mov.w	r2, #520	; 0x208
 80023f8:	801a      	strh	r2, [r3, #0]
									break;
 80023fa:	e01a      	b.n	8002432 <main+0x12b2>
								case 'x':
									count =0;
 80023fc:	4b54      	ldr	r3, [pc, #336]	; (8002550 <main+0x13d0>)
 80023fe:	2200      	movs	r2, #0
 8002400:	801a      	strh	r2, [r3, #0]
									STATE_Display = StateDisplay_start;//0
 8002402:	4b54      	ldr	r3, [pc, #336]	; (8002554 <main+0x13d4>)
 8002404:	2200      	movs	r2, #0
 8002406:	801a      	strh	r2, [r3, #0]
									break;
 8002408:	e013      	b.n	8002432 <main+0x12b2>
								default:
									count+=1;
 800240a:	4b51      	ldr	r3, [pc, #324]	; (8002550 <main+0x13d0>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b4f      	ldr	r3, [pc, #316]	; (8002550 <main+0x13d0>)
 8002414:	801a      	strh	r2, [r3, #0]
									if(count==2){
 8002416:	4b4e      	ldr	r3, [pc, #312]	; (8002550 <main+0x13d0>)
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	2b02      	cmp	r3, #2
 800241c:	f040 8095 	bne.w	800254a <main+0x13ca>
										count = 0;
 8002420:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <main+0x13d0>)
 8002422:	2200      	movs	r2, #0
 8002424:	801a      	strh	r2, [r3, #0]
										STATE_Display = StateMenuNo_3;//510
 8002426:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <main+0x13d4>)
 8002428:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800242c:	801a      	strh	r2, [r3, #0]
									}
								}break;
 800242e:	e08c      	b.n	800254a <main+0x13ca>
									break;
 8002430:	bf00      	nop
								}break;
 8002432:	e08a      	b.n	800254a <main+0x13ca>
								case StateDutyP://520
									  sprintf(TxDataBuffer,"Duty cycle\r\n[+]:+\r\n[-]:-\r\n[x]:x\r\n");
 8002434:	494b      	ldr	r1, [pc, #300]	; (8002564 <main+0x13e4>)
 8002436:	4849      	ldr	r0, [pc, #292]	; (800255c <main+0x13dc>)
 8002438:	f005 f930 	bl	800769c <siprintf>
									  HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 800243c:	4847      	ldr	r0, [pc, #284]	; (800255c <main+0x13dc>)
 800243e:	f7fd fecf 	bl	80001e0 <strlen>
 8002442:	4603      	mov	r3, r0
 8002444:	b29a      	uxth	r2, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	4944      	ldr	r1, [pc, #272]	; (800255c <main+0x13dc>)
 800244c:	4844      	ldr	r0, [pc, #272]	; (8002560 <main+0x13e0>)
 800244e:	f004 fa94 	bl	800697a <HAL_UART_Transmit>
									  STATE_Display = StateDuty;//510
 8002452:	4b40      	ldr	r3, [pc, #256]	; (8002554 <main+0x13d4>)
 8002454:	f240 2212 	movw	r2, #530	; 0x212
 8002458:	801a      	strh	r2, [r3, #0]
									  break;
 800245a:	e088      	b.n	800256e <main+0x13ee>
								case StateDuty://510
									switch(inputchar){
 800245c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002460:	2b78      	cmp	r3, #120	; 0x78
 8002462:	d042      	beq.n	80024ea <main+0x136a>
 8002464:	2b78      	cmp	r3, #120	; 0x78
 8002466:	dc48      	bgt.n	80024fa <main+0x137a>
 8002468:	2b2d      	cmp	r3, #45	; 0x2d
 800246a:	d022      	beq.n	80024b2 <main+0x1332>
 800246c:	2b2d      	cmp	r3, #45	; 0x2d
 800246e:	dc44      	bgt.n	80024fa <main+0x137a>
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d053      	beq.n	800251e <main+0x139e>
 8002476:	2b2b      	cmp	r3, #43	; 0x2b
 8002478:	d13f      	bne.n	80024fa <main+0x137a>
									case -1:
										break;
									case '+':
										count+=1;
 800247a:	4b35      	ldr	r3, [pc, #212]	; (8002550 <main+0x13d0>)
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	3301      	adds	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	4b33      	ldr	r3, [pc, #204]	; (8002550 <main+0x13d0>)
 8002484:	801a      	strh	r2, [r3, #0]
										if(count>=2){
 8002486:	4b32      	ldr	r3, [pc, #200]	; (8002550 <main+0x13d0>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d906      	bls.n	800249c <main+0x131c>
											count=0;
 800248e:	4b30      	ldr	r3, [pc, #192]	; (8002550 <main+0x13d0>)
 8002490:	2200      	movs	r2, #0
 8002492:	801a      	strh	r2, [r3, #0]
											STATE_Display = StateDutyP;
 8002494:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <main+0x13d4>)
 8002496:	f44f 7202 	mov.w	r2, #520	; 0x208
 800249a:	801a      	strh	r2, [r3, #0]
										}
										if(duty<=99){
 800249c:	4b32      	ldr	r3, [pc, #200]	; (8002568 <main+0x13e8>)
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	2b63      	cmp	r3, #99	; 0x63
 80024a2:	d83e      	bhi.n	8002522 <main+0x13a2>
										duty+=1;}
 80024a4:	4b30      	ldr	r3, [pc, #192]	; (8002568 <main+0x13e8>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <main+0x13e8>)
 80024ae:	801a      	strh	r2, [r3, #0]
										break;
 80024b0:	e037      	b.n	8002522 <main+0x13a2>
									case '-':
										count+=1;
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <main+0x13d0>)
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	4b25      	ldr	r3, [pc, #148]	; (8002550 <main+0x13d0>)
 80024bc:	801a      	strh	r2, [r3, #0]
										if(count>=2){
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <main+0x13d0>)
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d906      	bls.n	80024d4 <main+0x1354>
											count=0;
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <main+0x13d0>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	801a      	strh	r2, [r3, #0]
											STATE_Display = StateDutyP;
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <main+0x13d4>)
 80024ce:	f44f 7202 	mov.w	r2, #520	; 0x208
 80024d2:	801a      	strh	r2, [r3, #0]
										}
										if(duty>=1){
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <main+0x13e8>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d024      	beq.n	8002526 <main+0x13a6>
											duty-=1;
 80024dc:	4b22      	ldr	r3, [pc, #136]	; (8002568 <main+0x13e8>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b20      	ldr	r3, [pc, #128]	; (8002568 <main+0x13e8>)
 80024e6:	801a      	strh	r2, [r3, #0]
										}
										break;
 80024e8:	e01d      	b.n	8002526 <main+0x13a6>
									case 'x':
										count =0;
 80024ea:	4b19      	ldr	r3, [pc, #100]	; (8002550 <main+0x13d0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	801a      	strh	r2, [r3, #0]
										STATE_Display = StateMenuNo_3;//0
 80024f0:	4b18      	ldr	r3, [pc, #96]	; (8002554 <main+0x13d4>)
 80024f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80024f6:	801a      	strh	r2, [r3, #0]
										break;
 80024f8:	e016      	b.n	8002528 <main+0x13a8>
									default:
										count+=1;
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <main+0x13d0>)
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <main+0x13d0>)
 8002504:	801a      	strh	r2, [r3, #0]
										if(count==2){
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <main+0x13d0>)
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d12e      	bne.n	800256c <main+0x13ec>
											count = 0;
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <main+0x13d0>)
 8002510:	2200      	movs	r2, #0
 8002512:	801a      	strh	r2, [r3, #0]
											STATE_Display = StateDutyP;//510
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <main+0x13d4>)
 8002516:	f44f 7202 	mov.w	r2, #520	; 0x208
 800251a:	801a      	strh	r2, [r3, #0]
										}
									}break;
 800251c:	e026      	b.n	800256c <main+0x13ec>
										break;
 800251e:	bf00      	nop
 8002520:	e024      	b.n	800256c <main+0x13ec>
										break;
 8002522:	bf00      	nop
 8002524:	e022      	b.n	800256c <main+0x13ec>
										break;
 8002526:	bf00      	nop
									}break;
 8002528:	e020      	b.n	800256c <main+0x13ec>
			break;
 800252a:	bf00      	nop
 800252c:	e01f      	b.n	800256e <main+0x13ee>
			}break;
 800252e:	bf00      	nop
 8002530:	e01d      	b.n	800256e <main+0x13ee>
			}break;
 8002532:	bf00      	nop
 8002534:	e01b      	b.n	800256e <main+0x13ee>
				}break;
 8002536:	bf00      	nop
 8002538:	e019      	b.n	800256e <main+0x13ee>
					}break;
 800253a:	bf00      	nop
 800253c:	e017      	b.n	800256e <main+0x13ee>
						}break;
 800253e:	bf00      	nop
 8002540:	e015      	b.n	800256e <main+0x13ee>
						}break;
 8002542:	bf00      	nop
 8002544:	e013      	b.n	800256e <main+0x13ee>
							}break;
 8002546:	bf00      	nop
 8002548:	e011      	b.n	800256e <main+0x13ee>
								}break;
 800254a:	bf00      	nop
 800254c:	e00f      	b.n	800256e <main+0x13ee>
 800254e:	bf00      	nop
 8002550:	20000114 	.word	0x20000114
 8002554:	20000106 	.word	0x20000106
 8002558:	080090d4 	.word	0x080090d4
 800255c:	200000b4 	.word	0x200000b4
 8002560:	200002d0 	.word	0x200002d0
 8002564:	08009108 	.word	0x08009108
 8002568:	2000001e 	.word	0x2000001e
									}break;
 800256c:	bf00      	nop


		}
		if(Mode==1|Mode==2){
 800256e:	4bae      	ldr	r3, [pc, #696]	; (8002828 <main+0x16a8>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	2b01      	cmp	r3, #1
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2da      	uxtb	r2, r3
 800257c:	4baa      	ldr	r3, [pc, #680]	; (8002828 <main+0x16a8>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	2b02      	cmp	r3, #2
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d025      	beq.n	80025de <main+0x145e>
			time =  halftime*((4095.0)/(Vhighr-Vlowr));
 8002592:	4ba6      	ldr	r3, [pc, #664]	; (800282c <main+0x16ac>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fd ffde 	bl	8000558 <__aeabi_f2d>
 800259c:	4680      	mov	r8, r0
 800259e:	4689      	mov	r9, r1
 80025a0:	4ba3      	ldr	r3, [pc, #652]	; (8002830 <main+0x16b0>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4ba3      	ldr	r3, [pc, #652]	; (8002834 <main+0x16b4>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ffc1 	bl	8000534 <__aeabi_i2d>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	a198      	add	r1, pc, #608	; (adr r1, 8002818 <main+0x1698>)
 80025b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025bc:	f7fe f94e 	bl	800085c <__aeabi_ddiv>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4640      	mov	r0, r8
 80025c6:	4649      	mov	r1, r9
 80025c8:	f7fe f81e 	bl	8000608 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7fe fafa 	bl	8000bcc <__aeabi_d2f>
 80025d8:	4603      	mov	r3, r0
 80025da:	4a97      	ldr	r2, [pc, #604]	; (8002838 <main+0x16b8>)
 80025dc:	6013      	str	r3, [r2, #0]
		}
		if(Mode==3){
 80025de:	4b92      	ldr	r3, [pc, #584]	; (8002828 <main+0x16a8>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d103      	bne.n	80025ee <main+0x146e>
			time = halftime;
 80025e6:	4b91      	ldr	r3, [pc, #580]	; (800282c <main+0x16ac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a93      	ldr	r2, [pc, #588]	; (8002838 <main+0x16b8>)
 80025ec:	6013      	str	r3, [r2, #0]
		}
		if (micros() - timestamp > time)
 80025ee:	f000 fd5d 	bl	80030ac <micros>
 80025f2:	4b92      	ldr	r3, [pc, #584]	; (800283c <main+0x16bc>)
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	1a84      	subs	r4, r0, r2
 80025fa:	eb61 0503 	sbc.w	r5, r1, r3
 80025fe:	4620      	mov	r0, r4
 8002600:	4629      	mov	r1, r5
 8002602:	f7fe fbfb 	bl	8000dfc <__aeabi_ul2f>
 8002606:	ee07 0a10 	vmov	s14, r0
 800260a:	4b8b      	ldr	r3, [pc, #556]	; (8002838 <main+0x16b8>)
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002618:	f340 8205 	ble.w	8002a26 <main+0x18a6>
		{
			timestamp = micros();
 800261c:	f000 fd46 	bl	80030ac <micros>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4985      	ldr	r1, [pc, #532]	; (800283c <main+0x16bc>)
 8002626:	e9c1 2300 	strd	r2, r3, [r1]
			if(Hz==1)
 800262a:	4b85      	ldr	r3, [pc, #532]	; (8002840 <main+0x16c0>)
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d10b      	bne.n	800264a <main+0x14ca>
			{
				dataOut=(Vhighr+Vlowr)/2;
 8002632:	4b7f      	ldr	r3, [pc, #508]	; (8002830 <main+0x16b0>)
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	4b7e      	ldr	r3, [pc, #504]	; (8002834 <main+0x16b4>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	4413      	add	r3, r2
 800263e:	0fda      	lsrs	r2, r3, #31
 8002640:	4413      	add	r3, r2
 8002642:	105b      	asrs	r3, r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	4b7f      	ldr	r3, [pc, #508]	; (8002844 <main+0x16c4>)
 8002648:	801a      	strh	r2, [r3, #0]
			}
			if((Mode==1)&(ufreq>=1)&(m==-1))
 800264a:	4b77      	ldr	r3, [pc, #476]	; (8002828 <main+0x16a8>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	2b01      	cmp	r3, #1
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b7b      	ldr	r3, [pc, #492]	; (8002848 <main+0x16c8>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4013      	ands	r3, r2
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	4b77      	ldr	r3, [pc, #476]	; (800284c <main+0x16cc>)
 800266e:	edd3 7a00 	vldr	s15, [r3]
 8002672:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002676:	eef4 7a47 	vcmp.f32	s15, s14
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d023      	beq.n	80026d4 <main+0x1554>
			{
				dataOut+=m;
 800268c:	4b6d      	ldr	r3, [pc, #436]	; (8002844 <main+0x16c4>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002698:	4b6c      	ldr	r3, [pc, #432]	; (800284c <main+0x16cc>)
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026a6:	ee17 3a90 	vmov	r3, s15
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	4b65      	ldr	r3, [pc, #404]	; (8002844 <main+0x16c4>)
 80026ae:	801a      	strh	r2, [r3, #0]
				if(dataOut<=Vlowr)
 80026b0:	4b64      	ldr	r3, [pc, #400]	; (8002844 <main+0x16c4>)
 80026b2:	881a      	ldrh	r2, [r3, #0]
 80026b4:	4b5f      	ldr	r3, [pc, #380]	; (8002834 <main+0x16b4>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d80b      	bhi.n	80026d4 <main+0x1554>
				{
					dataOut+=Vhighr-Vlowr;
 80026bc:	4b5c      	ldr	r3, [pc, #368]	; (8002830 <main+0x16b0>)
 80026be:	881a      	ldrh	r2, [r3, #0]
 80026c0:	4b5c      	ldr	r3, [pc, #368]	; (8002834 <main+0x16b4>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	4b5e      	ldr	r3, [pc, #376]	; (8002844 <main+0x16c4>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4b5c      	ldr	r3, [pc, #368]	; (8002844 <main+0x16c4>)
 80026d2:	801a      	strh	r2, [r3, #0]
				}
			}
			if(Mode==1&ufreq>=1&m==1)
 80026d4:	4b54      	ldr	r3, [pc, #336]	; (8002828 <main+0x16a8>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4b59      	ldr	r3, [pc, #356]	; (8002848 <main+0x16c8>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	bf14      	ite	ne
 80026ea:	2301      	movne	r3, #1
 80026ec:	2300      	moveq	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4013      	ands	r3, r2
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b55      	ldr	r3, [pc, #340]	; (800284c <main+0x16cc>)
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002700:	eef4 7a47 	vcmp.f32	s15, s14
 8002704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002708:	bf0c      	ite	eq
 800270a:	2301      	moveq	r3, #1
 800270c:	2300      	movne	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d01b      	beq.n	800274e <main+0x15ce>
			{
				dataOut+=1;
 8002716:	4b4b      	ldr	r3, [pc, #300]	; (8002844 <main+0x16c4>)
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	4b49      	ldr	r3, [pc, #292]	; (8002844 <main+0x16c4>)
 8002720:	801a      	strh	r2, [r3, #0]
				if(dataOut>=Vhighr)
 8002722:	4b48      	ldr	r3, [pc, #288]	; (8002844 <main+0x16c4>)
 8002724:	881a      	ldrh	r2, [r3, #0]
 8002726:	4b42      	ldr	r3, [pc, #264]	; (8002830 <main+0x16b0>)
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d30f      	bcc.n	800274e <main+0x15ce>
				{
					dataOut = (dataOut%Vhighr) + Vlowr;
 800272e:	4b45      	ldr	r3, [pc, #276]	; (8002844 <main+0x16c4>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	4a3f      	ldr	r2, [pc, #252]	; (8002830 <main+0x16b0>)
 8002734:	8812      	ldrh	r2, [r2, #0]
 8002736:	fbb3 f1f2 	udiv	r1, r3, r2
 800273a:	fb02 f201 	mul.w	r2, r2, r1
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	b29a      	uxth	r2, r3
 8002742:	4b3c      	ldr	r3, [pc, #240]	; (8002834 <main+0x16b4>)
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	4413      	add	r3, r2
 8002748:	b29a      	uxth	r2, r3
 800274a:	4b3e      	ldr	r3, [pc, #248]	; (8002844 <main+0x16c4>)
 800274c:	801a      	strh	r2, [r3, #0]
				}
			}
			if(Mode==2&ufreq>=1){
 800274e:	4b36      	ldr	r3, [pc, #216]	; (8002828 <main+0x16a8>)
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	2b02      	cmp	r3, #2
 8002754:	bf0c      	ite	eq
 8002756:	2301      	moveq	r3, #1
 8002758:	2300      	movne	r3, #0
 800275a:	b2da      	uxtb	r2, r3
 800275c:	4b3a      	ldr	r3, [pc, #232]	; (8002848 <main+0x16c8>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4013      	ands	r3, r2
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 80a7 	beq.w	80028c2 <main+0x1742>
				sintime+=4096/(4096*freq*(Vhighr-Vlowr));
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <main+0x16d0>)
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002854 <main+0x16d4>
 800277e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002782:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <main+0x16b0>)
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <main+0x16b4>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002854 <main+0x16d4>
 800279e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a2:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <main+0x16d8>)
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <main+0x16d8>)
 80027ae:	edc3 7a00 	vstr	s15, [r3]
				angle = 2*M_PI*freq*sintime;
 80027b2:	4b27      	ldr	r3, [pc, #156]	; (8002850 <main+0x16d0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd fece 	bl	8000558 <__aeabi_f2d>
 80027bc:	a318      	add	r3, pc, #96	; (adr r3, 8002820 <main+0x16a0>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f7fd ff21 	bl	8000608 <__aeabi_dmul>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4690      	mov	r8, r2
 80027cc:	4699      	mov	r9, r3
 80027ce:	4b22      	ldr	r3, [pc, #136]	; (8002858 <main+0x16d8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd fec0 	bl	8000558 <__aeabi_f2d>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4640      	mov	r0, r8
 80027de:	4649      	mov	r1, r9
 80027e0:	f7fd ff12 	bl	8000608 <__aeabi_dmul>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f7fe f9ee 	bl	8000bcc <__aeabi_d2f>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4a1a      	ldr	r2, [pc, #104]	; (800285c <main+0x16dc>)
 80027f4:	6013      	str	r3, [r2, #0]
				dataOut=((Vhighr-Vlowr)/2)*sin(angle)+((Vhighr+Vlowr)/2);
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <main+0x16b0>)
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <main+0x16b4>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	0fda      	lsrs	r2, r3, #31
 8002804:	4413      	add	r3, r2
 8002806:	105b      	asrs	r3, r3, #1
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe93 	bl	8000534 <__aeabi_i2d>
 800280e:	4680      	mov	r8, r0
 8002810:	4689      	mov	r9, r1
 8002812:	e025      	b.n	8002860 <main+0x16e0>
 8002814:	f3af 8000 	nop.w
 8002818:	00000000 	.word	0x00000000
 800281c:	40affe00 	.word	0x40affe00
 8002820:	54442d18 	.word	0x54442d18
 8002824:	401921fb 	.word	0x401921fb
 8002828:	2000011a 	.word	0x2000011a
 800282c:	20000000 	.word	0x20000000
 8002830:	20000008 	.word	0x20000008
 8002834:	20000108 	.word	0x20000108
 8002838:	20000120 	.word	0x20000120
 800283c:	20000128 	.word	0x20000128
 8002840:	2000011c 	.word	0x2000011c
 8002844:	20000104 	.word	0x20000104
 8002848:	20000014 	.word	0x20000014
 800284c:	2000000c 	.word	0x2000000c
 8002850:	20000010 	.word	0x20000010
 8002854:	45800000 	.word	0x45800000
 8002858:	20000018 	.word	0x20000018
 800285c:	2000010c 	.word	0x2000010c
 8002860:	4b74      	ldr	r3, [pc, #464]	; (8002a34 <main+0x18b4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fe77 	bl	8000558 <__aeabi_f2d>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	ec43 2b10 	vmov	d0, r2, r3
 8002872:	f005 fb41 	bl	8007ef8 <sin>
 8002876:	ec53 2b10 	vmov	r2, r3, d0
 800287a:	4640      	mov	r0, r8
 800287c:	4649      	mov	r1, r9
 800287e:	f7fd fec3 	bl	8000608 <__aeabi_dmul>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4690      	mov	r8, r2
 8002888:	4699      	mov	r9, r3
 800288a:	4b6b      	ldr	r3, [pc, #428]	; (8002a38 <main+0x18b8>)
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	4b6a      	ldr	r3, [pc, #424]	; (8002a3c <main+0x18bc>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	4413      	add	r3, r2
 8002896:	0fda      	lsrs	r2, r3, #31
 8002898:	4413      	add	r3, r2
 800289a:	105b      	asrs	r3, r3, #1
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fe49 	bl	8000534 <__aeabi_i2d>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4640      	mov	r0, r8
 80028a8:	4649      	mov	r1, r9
 80028aa:	f7fd fcf7 	bl	800029c <__adddf3>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	f7fe f969 	bl	8000b8c <__aeabi_d2uiz>
 80028ba:	4603      	mov	r3, r0
 80028bc:	b29a      	uxth	r2, r3
 80028be:	4b60      	ldr	r3, [pc, #384]	; (8002a40 <main+0x18c0>)
 80028c0:	801a      	strh	r2, [r3, #0]
			}
			if(Mode==3&Hz==0){
 80028c2:	4b60      	ldr	r3, [pc, #384]	; (8002a44 <main+0x18c4>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b5d      	ldr	r3, [pc, #372]	; (8002a48 <main+0x18c8>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	4013      	ands	r3, r2
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8089 	beq.w	80029fa <main+0x187a>
				dcount+=1;
 80028e8:	4b58      	ldr	r3, [pc, #352]	; (8002a4c <main+0x18cc>)
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b56      	ldr	r3, [pc, #344]	; (8002a4c <main+0x18cc>)
 80028f2:	801a      	strh	r2, [r3, #0]
				if(dcount<duty*4096.0/(100.0*y)){
 80028f4:	4b55      	ldr	r3, [pc, #340]	; (8002a4c <main+0x18cc>)
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fe1b 	bl	8000534 <__aeabi_i2d>
 80028fe:	4680      	mov	r8, r0
 8002900:	4689      	mov	r9, r1
 8002902:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <main+0x18d0>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fe14 	bl	8000534 <__aeabi_i2d>
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <main+0x18d4>)
 8002912:	f7fd fe79 	bl	8000608 <__aeabi_dmul>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4692      	mov	sl, r2
 800291c:	469b      	mov	fp, r3
 800291e:	4b4e      	ldr	r3, [pc, #312]	; (8002a58 <main+0x18d8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fe18 	bl	8000558 <__aeabi_f2d>
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	4b4b      	ldr	r3, [pc, #300]	; (8002a5c <main+0x18dc>)
 800292e:	f7fd fe6b 	bl	8000608 <__aeabi_dmul>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4650      	mov	r0, sl
 8002938:	4659      	mov	r1, fp
 800293a:	f7fd ff8f 	bl	800085c <__aeabi_ddiv>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4640      	mov	r0, r8
 8002944:	4649      	mov	r1, r9
 8002946:	f7fe f8d1 	bl	8000aec <__aeabi_dcmplt>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <main+0x17d8>
					dataOut=Vhighr;
 8002950:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <main+0x18b8>)
 8002952:	881a      	ldrh	r2, [r3, #0]
 8002954:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <main+0x18c0>)
 8002956:	801a      	strh	r2, [r3, #0]
				}
				if(dcount>=duty*4096/(100.0*y))
 8002958:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <main+0x18cc>)
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fde9 	bl	8000534 <__aeabi_i2d>
 8002962:	4680      	mov	r8, r0
 8002964:	4689      	mov	r9, r1
 8002966:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <main+0x18d0>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	031b      	lsls	r3, r3, #12
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fde1 	bl	8000534 <__aeabi_i2d>
 8002972:	4682      	mov	sl, r0
 8002974:	468b      	mov	fp, r1
 8002976:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <main+0x18d8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fdec 	bl	8000558 <__aeabi_f2d>
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <main+0x18dc>)
 8002986:	f7fd fe3f 	bl	8000608 <__aeabi_dmul>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4650      	mov	r0, sl
 8002990:	4659      	mov	r1, fp
 8002992:	f7fd ff63 	bl	800085c <__aeabi_ddiv>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4640      	mov	r0, r8
 800299c:	4649      	mov	r1, r9
 800299e:	f7fe f8b9 	bl	8000b14 <__aeabi_dcmpge>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d028      	beq.n	80029fa <main+0x187a>
				{
					if(duty<100){
 80029a8:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <main+0x18d0>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	2b63      	cmp	r3, #99	; 0x63
 80029ae:	d824      	bhi.n	80029fa <main+0x187a>
					dataOut=Vlowr;
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <main+0x18bc>)
 80029b2:	881a      	ldrh	r2, [r3, #0]
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <main+0x18c0>)
 80029b6:	801a      	strh	r2, [r3, #0]
					if(dcount>x*4096/(y)){
 80029b8:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <main+0x18cc>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	ee07 3a90 	vmov	s15, r3
 80029c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029c4:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <main+0x18e0>)
 80029c6:	edd3 7a00 	vldr	s15, [r3]
 80029ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002a64 <main+0x18e4>
 80029ce:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80029d2:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <main+0x18d8>)
 80029d4:	edd3 6a00 	vldr	s13, [r3]
 80029d8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80029dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e4:	dd02      	ble.n	80029ec <main+0x186c>
						dcount=0;}
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <main+0x18cc>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	801a      	strh	r2, [r3, #0]
					if(duty==100){
 80029ec:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <main+0x18d0>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	2b64      	cmp	r3, #100	; 0x64
 80029f2:	d102      	bne.n	80029fa <main+0x187a>
						count=0;
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <main+0x18e8>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	801a      	strh	r2, [r3, #0]
					}
					}
				}
			}
			if (hspi3.State == HAL_SPI_STATE_READY
 80029fa:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <main+0x18ec>)
 80029fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d10f      	bne.n	8002a26 <main+0x18a6>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8002a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a0a:	4819      	ldr	r0, [pc, #100]	; (8002a70 <main+0x18f0>)
 8002a0c:	f002 fa82 	bl	8004f14 <HAL_GPIO_ReadPin>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d107      	bne.n	8002a26 <main+0x18a6>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, dataOut);
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <main+0x18f4>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <main+0x18c0>)
 8002a1c:	8812      	ldrh	r2, [r2, #0]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fae9 	bl	8002ff8 <MCP4922SetOutput>
			}
		}
		statem[1]=statem[0];
 8002a26:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <main+0x18f8>)
 8002a28:	881a      	ldrh	r2, [r3, #0]
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <main+0x18f8>)
 8002a2c:	805a      	strh	r2, [r3, #2]
	{
 8002a2e:	f7fe bbce 	b.w	80011ce <main+0x4e>
 8002a32:	bf00      	nop
 8002a34:	2000010c 	.word	0x2000010c
 8002a38:	20000008 	.word	0x20000008
 8002a3c:	20000108 	.word	0x20000108
 8002a40:	20000104 	.word	0x20000104
 8002a44:	2000011a 	.word	0x2000011a
 8002a48:	2000011c 	.word	0x2000011c
 8002a4c:	20000116 	.word	0x20000116
 8002a50:	2000001e 	.word	0x2000001e
 8002a54:	40b00000 	.word	0x40b00000
 8002a58:	20000024 	.word	0x20000024
 8002a5c:	40590000 	.word	0x40590000
 8002a60:	20000020 	.word	0x20000020
 8002a64:	45800000 	.word	0x45800000
 8002a68:	20000114 	.word	0x20000114
 8002a6c:	20000188 	.word	0x20000188
 8002a70:	40020400 	.word	0x40020400
 8002a74:	2000001c 	.word	0x2000001c
 8002a78:	20000110 	.word	0x20000110

08002a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b094      	sub	sp, #80	; 0x50
 8002a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a82:	f107 0320 	add.w	r3, r7, #32
 8002a86:	2230      	movs	r2, #48	; 0x30
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 fdfe 	bl	800768c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <SystemClock_Config+0xc8>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	4a26      	ldr	r2, [pc, #152]	; (8002b44 <SystemClock_Config+0xc8>)
 8002aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aae:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab0:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <SystemClock_Config+0xc8>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002abc:	2300      	movs	r3, #0
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <SystemClock_Config+0xcc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <SystemClock_Config+0xcc>)
 8002ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <SystemClock_Config+0xcc>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002adc:	2301      	movs	r3, #1
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002aec:	2308      	movs	r3, #8
 8002aee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002af0:	2364      	movs	r3, #100	; 0x64
 8002af2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002af4:	2302      	movs	r3, #2
 8002af6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002af8:	2304      	movs	r3, #4
 8002afa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002afc:	f107 0320 	add.w	r3, r7, #32
 8002b00:	4618      	mov	r0, r3
 8002b02:	f002 fa39 	bl	8004f78 <HAL_RCC_OscConfig>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002b0c:	f000 fae8 	bl	80030e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b10:	230f      	movs	r3, #15
 8002b12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b14:	2302      	movs	r3, #2
 8002b16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002b26:	f107 030c 	add.w	r3, r7, #12
 8002b2a:	2103      	movs	r1, #3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f002 fc9b 	bl	8005468 <HAL_RCC_ClockConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002b38:	f000 fad2 	bl	80030e0 <Error_Handler>
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	3750      	adds	r7, #80	; 0x50
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40007000 	.word	0x40007000

08002b4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]
 8002b60:	611a      	str	r2, [r3, #16]
 8002b62:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b64:	463b      	mov	r3, r7
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b70:	4b2d      	ldr	r3, [pc, #180]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002b72:	4a2e      	ldr	r2, [pc, #184]	; (8002c2c <MX_ADC1_Init+0xe0>)
 8002b74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b76:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002b78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002b84:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b8a:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b90:	4b25      	ldr	r3, [pc, #148]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b98:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002ba0:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002ba2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002bae:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bc2:	4819      	ldr	r0, [pc, #100]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002bc4:	f000 fd58 	bl	8003678 <HAL_ADC_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002bce:	f000 fa87 	bl	80030e0 <Error_Handler>
  }
  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8002bd2:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <MX_ADC1_Init+0xe4>)
 8002bd4:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	4619      	mov	r1, r3
 8002bee:	480e      	ldr	r0, [pc, #56]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002bf0:	f001 f910 	bl	8003e14 <HAL_ADC_AnalogWDGConfig>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002bfa:	f000 fa71 	bl	80030e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c02:	2301      	movs	r3, #1
 8002c04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c0a:	463b      	mov	r3, r7
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4806      	ldr	r0, [pc, #24]	; (8002c28 <MX_ADC1_Init+0xdc>)
 8002c10:	f000 ffce 	bl	8003bb0 <HAL_ADC_ConfigChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8002c1a:	f000 fa61 	bl	80030e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c1e:	bf00      	nop
 8002c20:	3728      	adds	r7, #40	; 0x28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200001e0 	.word	0x200001e0
 8002c2c:	40012000 	.word	0x40012000
 8002c30:	00800200 	.word	0x00800200

08002c34 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002c38:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <MX_SPI3_Init+0x68>)
 8002c3a:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <MX_SPI3_Init+0x6c>)
 8002c3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002c3e:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <MX_SPI3_Init+0x68>)
 8002c40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <MX_SPI3_Init+0x68>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <MX_SPI3_Init+0x68>)
 8002c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c52:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <MX_SPI3_Init+0x68>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <MX_SPI3_Init+0x68>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <MX_SPI3_Init+0x68>)
 8002c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c66:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <MX_SPI3_Init+0x68>)
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <MX_SPI3_Init+0x68>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <MX_SPI3_Init+0x68>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <MX_SPI3_Init+0x68>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <MX_SPI3_Init+0x68>)
 8002c82:	220a      	movs	r2, #10
 8002c84:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002c86:	4805      	ldr	r0, [pc, #20]	; (8002c9c <MX_SPI3_Init+0x68>)
 8002c88:	f002 fdea 	bl	8005860 <HAL_SPI_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8002c92:	f000 fa25 	bl	80030e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000188 	.word	0x20000188
 8002ca0:	40003c00 	.word	0x40003c00

08002ca4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002caa:	f107 0308 	add.w	r3, r7, #8
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb8:	463b      	mov	r3, r7
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <MX_TIM3_Init+0x90>)
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <MX_TIM3_Init+0x94>)
 8002cc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <MX_TIM3_Init+0x90>)
 8002cc8:	2263      	movs	r2, #99	; 0x63
 8002cca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <MX_TIM3_Init+0x90>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002cd2:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <MX_TIM3_Init+0x90>)
 8002cd4:	2264      	movs	r2, #100	; 0x64
 8002cd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cd8:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <MX_TIM3_Init+0x90>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cde:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <MX_TIM3_Init+0x90>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ce4:	4813      	ldr	r0, [pc, #76]	; (8002d34 <MX_TIM3_Init+0x90>)
 8002ce6:	f003 f95f 	bl	8005fa8 <HAL_TIM_Base_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002cf0:	f000 f9f6 	bl	80030e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cfa:	f107 0308 	add.w	r3, r7, #8
 8002cfe:	4619      	mov	r1, r3
 8002d00:	480c      	ldr	r0, [pc, #48]	; (8002d34 <MX_TIM3_Init+0x90>)
 8002d02:	f003 fb65 	bl	80063d0 <HAL_TIM_ConfigClockSource>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002d0c:	f000 f9e8 	bl	80030e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002d10:	2320      	movs	r3, #32
 8002d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d18:	463b      	mov	r3, r7
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4805      	ldr	r0, [pc, #20]	; (8002d34 <MX_TIM3_Init+0x90>)
 8002d1e:	f003 fd5d 	bl	80067dc <HAL_TIMEx_MasterConfigSynchronization>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002d28:	f000 f9da 	bl	80030e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d2c:	bf00      	nop
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000140 	.word	0x20000140
 8002d38:	40000400 	.word	0x40000400

08002d3c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <MX_TIM11_Init+0x40>)
 8002d42:	4a0f      	ldr	r2, [pc, #60]	; (8002d80 <MX_TIM11_Init+0x44>)
 8002d44:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <MX_TIM11_Init+0x40>)
 8002d48:	2263      	movs	r2, #99	; 0x63
 8002d4a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <MX_TIM11_Init+0x40>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <MX_TIM11_Init+0x40>)
 8002d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d58:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <MX_TIM11_Init+0x40>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <MX_TIM11_Init+0x40>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <MX_TIM11_Init+0x40>)
 8002d68:	f003 f91e 	bl	8005fa8 <HAL_TIM_Base_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002d72:	f000 f9b5 	bl	80030e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000228 	.word	0x20000228
 8002d80:	40014800 	.word	0x40014800

08002d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <MX_USART2_UART_Init+0x4c>)
 8002d8a:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <MX_USART2_UART_Init+0x50>)
 8002d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <MX_USART2_UART_Init+0x4c>)
 8002d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <MX_USART2_UART_Init+0x4c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <MX_USART2_UART_Init+0x4c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <MX_USART2_UART_Init+0x4c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <MX_USART2_UART_Init+0x4c>)
 8002daa:	220c      	movs	r2, #12
 8002dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <MX_USART2_UART_Init+0x4c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <MX_USART2_UART_Init+0x4c>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dba:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <MX_USART2_UART_Init+0x4c>)
 8002dbc:	f003 fd90 	bl	80068e0 <HAL_UART_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002dc6:	f000 f98b 	bl	80030e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200002d0 	.word	0x200002d0
 8002dd4:	40004400 	.word	0x40004400

08002dd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <MX_DMA_Init+0x3c>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a0b      	ldr	r2, [pc, #44]	; (8002e14 <MX_DMA_Init+0x3c>)
 8002de8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <MX_DMA_Init+0x3c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	2038      	movs	r0, #56	; 0x38
 8002e00:	f001 facb 	bl	800439a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002e04:	2038      	movs	r0, #56	; 0x38
 8002e06:	f001 fae4 	bl	80043d2 <HAL_NVIC_EnableIRQ>

}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800

08002e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	605a      	str	r2, [r3, #4]
 8002e28:	609a      	str	r2, [r3, #8]
 8002e2a:	60da      	str	r2, [r3, #12]
 8002e2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	4b44      	ldr	r3, [pc, #272]	; (8002f44 <MX_GPIO_Init+0x12c>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a43      	ldr	r2, [pc, #268]	; (8002f44 <MX_GPIO_Init+0x12c>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <MX_GPIO_Init+0x12c>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <MX_GPIO_Init+0x12c>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4a3c      	ldr	r2, [pc, #240]	; (8002f44 <MX_GPIO_Init+0x12c>)
 8002e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4b3a      	ldr	r3, [pc, #232]	; (8002f44 <MX_GPIO_Init+0x12c>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <MX_GPIO_Init+0x12c>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a35      	ldr	r2, [pc, #212]	; (8002f44 <MX_GPIO_Init+0x12c>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b33      	ldr	r3, [pc, #204]	; (8002f44 <MX_GPIO_Init+0x12c>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	4b2f      	ldr	r3, [pc, #188]	; (8002f44 <MX_GPIO_Init+0x12c>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a2e      	ldr	r2, [pc, #184]	; (8002f44 <MX_GPIO_Init+0x12c>)
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
 8002e92:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <MX_GPIO_Init+0x12c>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2120      	movs	r1, #32
 8002ea2:	4829      	ldr	r0, [pc, #164]	; (8002f48 <MX_GPIO_Init+0x130>)
 8002ea4:	f002 f84e 	bl	8004f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002eae:	4827      	ldr	r0, [pc, #156]	; (8002f4c <MX_GPIO_Init+0x134>)
 8002eb0:	f002 f848 	bl	8004f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	4825      	ldr	r0, [pc, #148]	; (8002f50 <MX_GPIO_Init+0x138>)
 8002eba:	f002 f843 	bl	8004f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ec4:	4820      	ldr	r0, [pc, #128]	; (8002f48 <MX_GPIO_Init+0x130>)
 8002ec6:	f002 f83d 	bl	8004f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ed0:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <MX_GPIO_Init+0x13c>)
 8002ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4619      	mov	r1, r3
 8002ede:	481c      	ldr	r0, [pc, #112]	; (8002f50 <MX_GPIO_Init+0x138>)
 8002ee0:	f001 fe94 	bl	8004c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8002ee4:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eea:	2301      	movs	r3, #1
 8002eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef6:	f107 0314 	add.w	r3, r7, #20
 8002efa:	4619      	mov	r1, r3
 8002efc:	4812      	ldr	r0, [pc, #72]	; (8002f48 <MX_GPIO_Init+0x130>)
 8002efe:	f001 fe85 	bl	8004c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8002f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2300      	movs	r3, #0
 8002f12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	4619      	mov	r1, r3
 8002f1a:	480c      	ldr	r0, [pc, #48]	; (8002f4c <MX_GPIO_Init+0x134>)
 8002f1c:	f001 fe76 	bl	8004c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f24:	2301      	movs	r3, #1
 8002f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	4619      	mov	r1, r3
 8002f36:	4806      	ldr	r0, [pc, #24]	; (8002f50 <MX_GPIO_Init+0x138>)
 8002f38:	f001 fe68 	bl	8004c0c <HAL_GPIO_Init>

}
 8002f3c:	bf00      	nop
 8002f3e:	3728      	adds	r7, #40	; 0x28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020000 	.word	0x40020000
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	40020800 	.word	0x40020800
 8002f54:	10210000 	.word	0x10210000

08002f58 <UARTRecieveIT>:

}


int16_t UARTRecieveIT()
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8002f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f62:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <UARTRecieveIT+0x54>)
 8002f66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <UARTRecieveIT+0x54>)
 8002f6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <UARTRecieveIT+0x58>)
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d010      	beq.n	8002f9c <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <UARTRecieveIT+0x58>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a0d      	ldr	r2, [pc, #52]	; (8002fb4 <UARTRecieveIT+0x5c>)
 8002f80:	5cd3      	ldrb	r3, [r2, r3]
 8002f82:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <UARTRecieveIT+0x58>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	4a08      	ldr	r2, [pc, #32]	; (8002fac <UARTRecieveIT+0x54>)
 8002f8c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002f8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f92:	fb02 f201 	mul.w	r2, r2, r1
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <UARTRecieveIT+0x58>)
 8002f9a:	6013      	str	r3, [r2, #0]
	}
	return data;
 8002f9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	200002d0 	.word	0x200002d0
 8002fb0:	20000130 	.word	0x20000130
 8002fb4:	200000d4 	.word	0x200000d4

08002fb8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 8002fc0:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <HAL_UART_RxCpltCallback+0x30>)
 8002fc2:	490a      	ldr	r1, [pc, #40]	; (8002fec <HAL_UART_RxCpltCallback+0x34>)
 8002fc4:	480a      	ldr	r0, [pc, #40]	; (8002ff0 <HAL_UART_RxCpltCallback+0x38>)
 8002fc6:	f004 fb69 	bl	800769c <siprintf>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer));
 8002fca:	4809      	ldr	r0, [pc, #36]	; (8002ff0 <HAL_UART_RxCpltCallback+0x38>)
 8002fcc:	f7fd f908 	bl	80001e0 <strlen>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4906      	ldr	r1, [pc, #24]	; (8002ff0 <HAL_UART_RxCpltCallback+0x38>)
 8002fd8:	4806      	ldr	r0, [pc, #24]	; (8002ff4 <HAL_UART_RxCpltCallback+0x3c>)
 8002fda:	f003 fd60 	bl	8006a9e <HAL_UART_Transmit_IT>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200000d4 	.word	0x200000d4
 8002fec:	0800912c 	.word	0x0800912c
 8002ff0:	200000b4 	.word	0x200000b4
 8002ff4:	200002d0 	.word	0x200002d0

08002ff8 <MCP4922SetOutput>:
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	460a      	mov	r2, r1
 8003002:	71fb      	strb	r3, [r7, #7]
 8003004:	4613      	mov	r3, r2
 8003006:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8003008:	88bb      	ldrh	r3, [r7, #4]
 800300a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	031b      	lsls	r3, r3, #12
 8003012:	b29b      	uxth	r3, r3
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8003018:	2200      	movs	r2, #0
 800301a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800301e:	4807      	ldr	r0, [pc, #28]	; (800303c <MCP4922SetOutput+0x44>)
 8003020:	f001 ff90 	bl	8004f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8003024:	f107 030c 	add.w	r3, r7, #12
 8003028:	2201      	movs	r2, #1
 800302a:	4619      	mov	r1, r3
 800302c:	4804      	ldr	r0, [pc, #16]	; (8003040 <MCP4922SetOutput+0x48>)
 800302e:	f002 fca1 	bl	8005974 <HAL_SPI_Transmit_IT>
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40020400 	.word	0x40020400
 8003040:	20000188 	.word	0x20000188

08003044 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a06      	ldr	r2, [pc, #24]	; (8003068 <HAL_SPI_TxCpltCallback+0x24>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d105      	bne.n	8003060 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8003054:	2201      	movs	r2, #1
 8003056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800305a:	4804      	ldr	r0, [pc, #16]	; (800306c <HAL_SPI_TxCpltCallback+0x28>)
 800305c:	f001 ff72 	bl	8004f44 <HAL_GPIO_WritePin>
	}
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20000188 	.word	0x20000188
 800306c:	40020400 	.word	0x40020400

08003070 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b4b0      	push	{r4, r5, r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d10c      	bne.n	800309a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	1814      	adds	r4, r2, r0
 8003090:	eb43 0501 	adc.w	r5, r3, r1
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003096:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bcb0      	pop	{r4, r5, r7}
 80030a2:	4770      	bx	lr
 80030a4:	20000228 	.word	0x20000228
 80030a8:	200000f8 	.word	0x200000f8

080030ac <micros>:

inline uint64_t micros()
{
 80030ac:	b4b0      	push	{r4, r5, r7}
 80030ae:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <micros+0x2c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	4618      	mov	r0, r3
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	4b07      	ldr	r3, [pc, #28]	; (80030dc <micros+0x30>)
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	1884      	adds	r4, r0, r2
 80030c4:	eb41 0503 	adc.w	r5, r1, r3
 80030c8:	4622      	mov	r2, r4
 80030ca:	462b      	mov	r3, r5
}
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bcb0      	pop	{r4, r5, r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000228 	.word	0x20000228
 80030dc:	200000f8 	.word	0x200000f8

080030e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030e4:	b672      	cpsid	i
}
 80030e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80030e8:	e7fe      	b.n	80030e8 <Error_Handler+0x8>
	...

080030ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <HAL_MspInit+0x4c>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	4a0f      	ldr	r2, [pc, #60]	; (8003138 <HAL_MspInit+0x4c>)
 80030fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003100:	6453      	str	r3, [r2, #68]	; 0x44
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_MspInit+0x4c>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_MspInit+0x4c>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <HAL_MspInit+0x4c>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	6413      	str	r3, [r2, #64]	; 0x40
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_MspInit+0x4c>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800312a:	2007      	movs	r0, #7
 800312c:	f001 f92a 	bl	8004384 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800

0800313c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a33      	ldr	r2, [pc, #204]	; (8003228 <HAL_ADC_MspInit+0xec>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d15f      	bne.n	800321e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	4b32      	ldr	r3, [pc, #200]	; (800322c <HAL_ADC_MspInit+0xf0>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	4a31      	ldr	r2, [pc, #196]	; (800322c <HAL_ADC_MspInit+0xf0>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316c:	6453      	str	r3, [r2, #68]	; 0x44
 800316e:	4b2f      	ldr	r3, [pc, #188]	; (800322c <HAL_ADC_MspInit+0xf0>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_ADC_MspInit+0xf0>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a2a      	ldr	r2, [pc, #168]	; (800322c <HAL_ADC_MspInit+0xf0>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <HAL_ADC_MspInit+0xf0>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003196:	2301      	movs	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800319a:	2303      	movs	r3, #3
 800319c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a2:	f107 0314 	add.w	r3, r7, #20
 80031a6:	4619      	mov	r1, r3
 80031a8:	4821      	ldr	r0, [pc, #132]	; (8003230 <HAL_ADC_MspInit+0xf4>)
 80031aa:	f001 fd2f 	bl	8004c0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80031ae:	4b21      	ldr	r3, [pc, #132]	; (8003234 <HAL_ADC_MspInit+0xf8>)
 80031b0:	4a21      	ldr	r2, [pc, #132]	; (8003238 <HAL_ADC_MspInit+0xfc>)
 80031b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80031b4:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <HAL_ADC_MspInit+0xf8>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ba:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_ADC_MspInit+0xf8>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c0:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <HAL_ADC_MspInit+0xf8>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_ADC_MspInit+0xf8>)
 80031c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031ce:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_ADC_MspInit+0xf8>)
 80031d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031d6:	4b17      	ldr	r3, [pc, #92]	; (8003234 <HAL_ADC_MspInit+0xf8>)
 80031d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <HAL_ADC_MspInit+0xf8>)
 80031e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <HAL_ADC_MspInit+0xf8>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031ec:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_ADC_MspInit+0xf8>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031f2:	4810      	ldr	r0, [pc, #64]	; (8003234 <HAL_ADC_MspInit+0xf8>)
 80031f4:	f001 f908 	bl	8004408 <HAL_DMA_Init>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80031fe:	f7ff ff6f 	bl	80030e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a0b      	ldr	r2, [pc, #44]	; (8003234 <HAL_ADC_MspInit+0xf8>)
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
 8003208:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HAL_ADC_MspInit+0xf8>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2100      	movs	r1, #0
 8003212:	2012      	movs	r0, #18
 8003214:	f001 f8c1 	bl	800439a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003218:	2012      	movs	r0, #18
 800321a:	f001 f8da 	bl	80043d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800321e:	bf00      	nop
 8003220:	3728      	adds	r7, #40	; 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40012000 	.word	0x40012000
 800322c:	40023800 	.word	0x40023800
 8003230:	40020000 	.word	0x40020000
 8003234:	20000270 	.word	0x20000270
 8003238:	40026410 	.word	0x40026410

0800323c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <HAL_SPI_MspInit+0x94>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d133      	bne.n	80032c6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	4b1c      	ldr	r3, [pc, #112]	; (80032d4 <HAL_SPI_MspInit+0x98>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a1b      	ldr	r2, [pc, #108]	; (80032d4 <HAL_SPI_MspInit+0x98>)
 8003268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_SPI_MspInit+0x98>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <HAL_SPI_MspInit+0x98>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <HAL_SPI_MspInit+0x98>)
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_SPI_MspInit+0x98>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003296:	2338      	movs	r3, #56	; 0x38
 8003298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a2:	2303      	movs	r3, #3
 80032a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80032a6:	2306      	movs	r3, #6
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032aa:	f107 0314 	add.w	r3, r7, #20
 80032ae:	4619      	mov	r1, r3
 80032b0:	4809      	ldr	r0, [pc, #36]	; (80032d8 <HAL_SPI_MspInit+0x9c>)
 80032b2:	f001 fcab 	bl	8004c0c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2100      	movs	r1, #0
 80032ba:	2033      	movs	r0, #51	; 0x33
 80032bc:	f001 f86d 	bl	800439a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80032c0:	2033      	movs	r0, #51	; 0x33
 80032c2:	f001 f886 	bl	80043d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80032c6:	bf00      	nop
 80032c8:	3728      	adds	r7, #40	; 0x28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40003c00 	.word	0x40003c00
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40020400 	.word	0x40020400

080032dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a18      	ldr	r2, [pc, #96]	; (800334c <HAL_TIM_Base_MspInit+0x70>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d10e      	bne.n	800330c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	4b17      	ldr	r3, [pc, #92]	; (8003350 <HAL_TIM_Base_MspInit+0x74>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	4a16      	ldr	r2, [pc, #88]	; (8003350 <HAL_TIM_Base_MspInit+0x74>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	6413      	str	r3, [r2, #64]	; 0x40
 80032fe:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_TIM_Base_MspInit+0x74>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800330a:	e01a      	b.n	8003342 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a10      	ldr	r2, [pc, #64]	; (8003354 <HAL_TIM_Base_MspInit+0x78>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d115      	bne.n	8003342 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <HAL_TIM_Base_MspInit+0x74>)
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	4a0c      	ldr	r2, [pc, #48]	; (8003350 <HAL_TIM_Base_MspInit+0x74>)
 8003320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003324:	6453      	str	r3, [r2, #68]	; 0x44
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <HAL_TIM_Base_MspInit+0x74>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	201a      	movs	r0, #26
 8003338:	f001 f82f 	bl	800439a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800333c:	201a      	movs	r0, #26
 800333e:	f001 f848 	bl	80043d2 <HAL_NVIC_EnableIRQ>
}
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40000400 	.word	0x40000400
 8003350:	40023800 	.word	0x40023800
 8003354:	40014800 	.word	0x40014800

08003358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	; 0x28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_UART_MspInit+0x94>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d133      	bne.n	80033e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <HAL_UART_MspInit+0x98>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <HAL_UART_MspInit+0x98>)
 8003384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003388:	6413      	str	r3, [r2, #64]	; 0x40
 800338a:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <HAL_UART_MspInit+0x98>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <HAL_UART_MspInit+0x98>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <HAL_UART_MspInit+0x98>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_UART_MspInit+0x98>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033b2:	230c      	movs	r3, #12
 80033b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b6:	2302      	movs	r3, #2
 80033b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033be:	2303      	movs	r3, #3
 80033c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033c2:	2307      	movs	r3, #7
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c6:	f107 0314 	add.w	r3, r7, #20
 80033ca:	4619      	mov	r1, r3
 80033cc:	4809      	ldr	r0, [pc, #36]	; (80033f4 <HAL_UART_MspInit+0x9c>)
 80033ce:	f001 fc1d 	bl	8004c0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033d2:	2200      	movs	r2, #0
 80033d4:	2100      	movs	r1, #0
 80033d6:	2026      	movs	r0, #38	; 0x26
 80033d8:	f000 ffdf 	bl	800439a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033dc:	2026      	movs	r0, #38	; 0x26
 80033de:	f000 fff8 	bl	80043d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033e2:	bf00      	nop
 80033e4:	3728      	adds	r7, #40	; 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40004400 	.word	0x40004400
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40020000 	.word	0x40020000

080033f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033fc:	e7fe      	b.n	80033fc <NMI_Handler+0x4>

080033fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033fe:	b480      	push	{r7}
 8003400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003402:	e7fe      	b.n	8003402 <HardFault_Handler+0x4>

08003404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003408:	e7fe      	b.n	8003408 <MemManage_Handler+0x4>

0800340a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800340e:	e7fe      	b.n	800340e <BusFault_Handler+0x4>

08003410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003414:	e7fe      	b.n	8003414 <UsageFault_Handler+0x4>

08003416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003444:	f000 f8f8 	bl	8003638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}

0800344c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <ADC_IRQHandler+0x10>)
 8003452:	f000 f954 	bl	80036fe <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200001e0 	.word	0x200001e0

08003460 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003466:	f002 feab 	bl	80061c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000228 	.word	0x20000228

08003474 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <USART2_IRQHandler+0x10>)
 800347a:	f003 fb85 	bl	8006b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200002d0 	.word	0x200002d0

08003488 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <SPI3_IRQHandler+0x10>)
 800348e:	f002 fafb 	bl	8005a88 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000188 	.word	0x20000188

0800349c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <DMA2_Stream0_IRQHandler+0x10>)
 80034a2:	f001 f949 	bl	8004738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000270 	.word	0x20000270

080034b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <_sbrk+0x5c>)
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <_sbrk+0x60>)
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <_sbrk+0x64>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <_sbrk+0x64>)
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <_sbrk+0x68>)
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <_sbrk+0x64>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d207      	bcs.n	80034f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e0:	f004 f8aa 	bl	8007638 <__errno>
 80034e4:	4603      	mov	r3, r0
 80034e6:	220c      	movs	r2, #12
 80034e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	e009      	b.n	8003504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <_sbrk+0x64>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <_sbrk+0x64>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	4a05      	ldr	r2, [pc, #20]	; (8003514 <_sbrk+0x64>)
 8003500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20020000 	.word	0x20020000
 8003510:	00000400 	.word	0x00000400
 8003514:	20000134 	.word	0x20000134
 8003518:	20000328 	.word	0x20000328

0800351c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <SystemInit+0x20>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	4a05      	ldr	r2, [pc, #20]	; (800353c <SystemInit+0x20>)
 8003528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800352c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003544:	480d      	ldr	r0, [pc, #52]	; (800357c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003546:	490e      	ldr	r1, [pc, #56]	; (8003580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003548:	4a0e      	ldr	r2, [pc, #56]	; (8003584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800354a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800354c:	e002      	b.n	8003554 <LoopCopyDataInit>

0800354e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800354e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003552:	3304      	adds	r3, #4

08003554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003558:	d3f9      	bcc.n	800354e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800355a:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800355c:	4c0b      	ldr	r4, [pc, #44]	; (800358c <LoopFillZerobss+0x26>)
  movs r3, #0
 800355e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003560:	e001      	b.n	8003566 <LoopFillZerobss>

08003562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003564:	3204      	adds	r2, #4

08003566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003568:	d3fb      	bcc.n	8003562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800356a:	f7ff ffd7 	bl	800351c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800356e:	f004 f869 	bl	8007644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003572:	f7fd fe05 	bl	8001180 <main>
  bx  lr    
 8003576:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003578:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800357c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003580:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003584:	08009378 	.word	0x08009378
  ldr r2, =_sbss
 8003588:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800358c:	20000328 	.word	0x20000328

08003590 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003590:	e7fe      	b.n	8003590 <DMA1_Stream0_IRQHandler>
	...

08003594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <HAL_Init+0x40>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <HAL_Init+0x40>)
 800359e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_Init+0x40>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <HAL_Init+0x40>)
 80035aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <HAL_Init+0x40>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <HAL_Init+0x40>)
 80035b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035bc:	2003      	movs	r0, #3
 80035be:	f000 fee1 	bl	8004384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035c2:	2000      	movs	r0, #0
 80035c4:	f000 f808 	bl	80035d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035c8:	f7ff fd90 	bl	80030ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40023c00 	.word	0x40023c00

080035d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_InitTick+0x54>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_InitTick+0x58>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4619      	mov	r1, r3
 80035ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80035f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fef9 	bl	80043ee <HAL_SYSTICK_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e00e      	b.n	8003624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b0f      	cmp	r3, #15
 800360a:	d80a      	bhi.n	8003622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800360c:	2200      	movs	r2, #0
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	f04f 30ff 	mov.w	r0, #4294967295
 8003614:	f000 fec1 	bl	800439a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003618:	4a06      	ldr	r2, [pc, #24]	; (8003634 <HAL_InitTick+0x5c>)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000028 	.word	0x20000028
 8003630:	20000030 	.word	0x20000030
 8003634:	2000002c 	.word	0x2000002c

08003638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_IncTick+0x20>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_IncTick+0x24>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4413      	add	r3, r2
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <HAL_IncTick+0x24>)
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000030 	.word	0x20000030
 800365c:	20000314 	.word	0x20000314

08003660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return uwTick;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_GetTick+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000314 	.word	0x20000314

08003678 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e033      	b.n	80036f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff fd50 	bl	800313c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d118      	bne.n	80036e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036be:	f023 0302 	bic.w	r3, r3, #2
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fc02 	bl	8003ed4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
 80036e6:	e001      	b.n	80036ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b02      	cmp	r3, #2
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b20      	cmp	r3, #32
 8003730:	bf0c      	ite	eq
 8003732:	2301      	moveq	r3, #1
 8003734:	2300      	movne	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d049      	beq.n	80037d4 <HAL_ADC_IRQHandler+0xd6>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d046      	beq.n	80037d4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d105      	bne.n	800375e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d12b      	bne.n	80037c4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003770:	2b00      	cmp	r3, #0
 8003772:	d127      	bne.n	80037c4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800377e:	2b00      	cmp	r3, #0
 8003780:	d006      	beq.n	8003790 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800378c:	2b00      	cmp	r3, #0
 800378e:	d119      	bne.n	80037c4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0220 	bic.w	r2, r2, #32
 800379e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	f043 0201 	orr.w	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f9cb 	bl	8003b60 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f06f 0212 	mvn.w	r2, #18
 80037d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b04      	cmp	r3, #4
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	2b80      	cmp	r3, #128	; 0x80
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d057      	beq.n	80038b6 <HAL_ADC_IRQHandler+0x1b8>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d054      	beq.n	80038b6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d139      	bne.n	80038a6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800383c:	2b00      	cmp	r3, #0
 800383e:	d006      	beq.n	800384e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800384a:	2b00      	cmp	r3, #0
 800384c:	d12b      	bne.n	80038a6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003858:	2b00      	cmp	r3, #0
 800385a:	d124      	bne.n	80038a6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11d      	bne.n	80038a6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800386e:	2b00      	cmp	r3, #0
 8003870:	d119      	bne.n	80038a6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003880:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d105      	bne.n	80038a6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f043 0201 	orr.w	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fc92 	bl	80041d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 020c 	mvn.w	r2, #12
 80038b4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b40      	cmp	r3, #64	; 0x40
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d017      	beq.n	8003918 <HAL_ADC_IRQHandler+0x21a>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d014      	beq.n	8003918 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d10d      	bne.n	8003918 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f93d 	bl	8003b88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f06f 0201 	mvn.w	r2, #1
 8003916:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b20      	cmp	r3, #32
 8003924:	bf0c      	ite	eq
 8003926:	2301      	moveq	r3, #1
 8003928:	2300      	movne	r3, #0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800393c:	bf0c      	ite	eq
 800393e:	2301      	moveq	r3, #1
 8003940:	2300      	movne	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d015      	beq.n	8003978 <HAL_ADC_IRQHandler+0x27a>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d012      	beq.n	8003978 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f043 0202 	orr.w	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f06f 0220 	mvn.w	r2, #32
 8003966:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f917 	bl	8003b9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f06f 0220 	mvn.w	r2, #32
 8003976:	601a      	str	r2, [r3, #0]
  }
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_ADC_Start_DMA+0x1e>
 800399a:	2302      	movs	r3, #2
 800399c:	e0ce      	b.n	8003b3c <HAL_ADC_Start_DMA+0x1bc>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d018      	beq.n	80039e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039c4:	4b5f      	ldr	r3, [pc, #380]	; (8003b44 <HAL_ADC_Start_DMA+0x1c4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5f      	ldr	r2, [pc, #380]	; (8003b48 <HAL_ADC_Start_DMA+0x1c8>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	0c9a      	lsrs	r2, r3, #18
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80039d8:	e002      	b.n	80039e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	3b01      	subs	r3, #1
 80039de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f9      	bne.n	80039da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f4:	d107      	bne.n	8003a06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a04:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	f040 8086 	bne.w	8003b22 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a54:	d106      	bne.n	8003a64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f023 0206 	bic.w	r2, r3, #6
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	645a      	str	r2, [r3, #68]	; 0x44
 8003a62:	e002      	b.n	8003a6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <HAL_ADC_Start_DMA+0x1cc>)
 8003a74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	4a35      	ldr	r2, [pc, #212]	; (8003b50 <HAL_ADC_Start_DMA+0x1d0>)
 8003a7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	4a34      	ldr	r2, [pc, #208]	; (8003b54 <HAL_ADC_Start_DMA+0x1d4>)
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	4a33      	ldr	r2, [pc, #204]	; (8003b58 <HAL_ADC_Start_DMA+0x1d8>)
 8003a8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003a96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003aa6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	334c      	adds	r3, #76	; 0x4c
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f000 fd4c 	bl	8004564 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10f      	bne.n	8003af8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d129      	bne.n	8003b3a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003af4:	609a      	str	r2, [r3, #8]
 8003af6:	e020      	b.n	8003b3a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <HAL_ADC_Start_DMA+0x1dc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d11b      	bne.n	8003b3a <HAL_ADC_Start_DMA+0x1ba>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d114      	bne.n	8003b3a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	e00b      	b.n	8003b3a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f043 0210 	orr.w	r2, r3, #16
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f043 0201 	orr.w	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000028 	.word	0x20000028
 8003b48:	431bde83 	.word	0x431bde83
 8003b4c:	40012300 	.word	0x40012300
 8003b50:	080040cd 	.word	0x080040cd
 8003b54:	08004187 	.word	0x08004187
 8003b58:	080041a3 	.word	0x080041a3
 8003b5c:	40012000 	.word	0x40012000

08003b60 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x1c>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e113      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x244>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b09      	cmp	r3, #9
 8003bda:	d925      	bls.n	8003c28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68d9      	ldr	r1, [r3, #12]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	4613      	mov	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	4413      	add	r3, r2
 8003bf0:	3b1e      	subs	r3, #30
 8003bf2:	2207      	movs	r2, #7
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43da      	mvns	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	400a      	ands	r2, r1
 8003c00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68d9      	ldr	r1, [r3, #12]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	4618      	mov	r0, r3
 8003c14:	4603      	mov	r3, r0
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4403      	add	r3, r0
 8003c1a:	3b1e      	subs	r3, #30
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	e022      	b.n	8003c6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6919      	ldr	r1, [r3, #16]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	4613      	mov	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4413      	add	r3, r2
 8003c3c:	2207      	movs	r2, #7
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43da      	mvns	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	400a      	ands	r2, r1
 8003c4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6919      	ldr	r1, [r3, #16]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	4603      	mov	r3, r0
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4403      	add	r3, r0
 8003c64:	409a      	lsls	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d824      	bhi.n	8003cc0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	3b05      	subs	r3, #5
 8003c88:	221f      	movs	r2, #31
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	400a      	ands	r2, r1
 8003c96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	3b05      	subs	r3, #5
 8003cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8003cbe:	e04c      	b.n	8003d5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	d824      	bhi.n	8003d12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3b23      	subs	r3, #35	; 0x23
 8003cda:	221f      	movs	r2, #31
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43da      	mvns	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	400a      	ands	r2, r1
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	3b23      	subs	r3, #35	; 0x23
 8003d04:	fa00 f203 	lsl.w	r2, r0, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d10:	e023      	b.n	8003d5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	3b41      	subs	r3, #65	; 0x41
 8003d24:	221f      	movs	r2, #31
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	400a      	ands	r2, r1
 8003d32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	4618      	mov	r0, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3b41      	subs	r3, #65	; 0x41
 8003d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d5a:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <HAL_ADC_ConfigChannel+0x250>)
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a28      	ldr	r2, [pc, #160]	; (8003e04 <HAL_ADC_ConfigChannel+0x254>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d10f      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x1d8>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b12      	cmp	r3, #18
 8003d6e:	d10b      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <HAL_ADC_ConfigChannel+0x254>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d12b      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x23a>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1c      	ldr	r2, [pc, #112]	; (8003e08 <HAL_ADC_ConfigChannel+0x258>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <HAL_ADC_ConfigChannel+0x1f4>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b11      	cmp	r3, #17
 8003da2:	d122      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a11      	ldr	r2, [pc, #68]	; (8003e08 <HAL_ADC_ConfigChannel+0x258>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d111      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_ADC_ConfigChannel+0x25c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a11      	ldr	r2, [pc, #68]	; (8003e10 <HAL_ADC_ConfigChannel+0x260>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	0c9a      	lsrs	r2, r3, #18
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ddc:	e002      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f9      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40012300 	.word	0x40012300
 8003e04:	40012000 	.word	0x40012000
 8003e08:	10000012 	.word	0x10000012
 8003e0c:	20000028 	.word	0x20000028
 8003e10:	431bde83 	.word	0x431bde83

08003e14 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_ADC_AnalogWDGConfig+0x18>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e04d      	b.n	8003ec8 <HAL_ADC_AnalogWDGConfig+0xb4>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	7c1b      	ldrb	r3, [r3, #16]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d108      	bne.n	8003e4e <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e4a:	605a      	str	r2, [r3, #4]
 8003e4c:	e007      	b.n	8003e5e <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5c:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e70:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6859      	ldr	r1, [r3, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	6852      	ldr	r2, [r2, #4]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	6892      	ldr	r2, [r2, #8]
 8003e96:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 021f 	bic.w	r2, r2, #31
 8003ea6:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003edc:	4b79      	ldr	r3, [pc, #484]	; (80040c4 <ADC_Init+0x1f0>)
 8003ede:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	021a      	lsls	r2, r3, #8
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6899      	ldr	r1, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	4a58      	ldr	r2, [pc, #352]	; (80040c8 <ADC_Init+0x1f4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d022      	beq.n	8003fb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6899      	ldr	r1, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6899      	ldr	r1, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	e00f      	b.n	8003fd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0202 	bic.w	r2, r2, #2
 8003fe0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6899      	ldr	r1, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	7e1b      	ldrb	r3, [r3, #24]
 8003fec:	005a      	lsls	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800400e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800401e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6859      	ldr	r1, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	3b01      	subs	r3, #1
 800402c:	035a      	lsls	r2, r3, #13
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	e007      	b.n	8004048 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004046:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	3b01      	subs	r3, #1
 8004064:	051a      	lsls	r2, r3, #20
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800407c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6899      	ldr	r1, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800408a:	025a      	lsls	r2, r3, #9
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6899      	ldr	r1, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	029a      	lsls	r2, r3, #10
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	609a      	str	r2, [r3, #8]
}
 80040b8:	bf00      	nop
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	40012300 	.word	0x40012300
 80040c8:	0f000001 	.word	0x0f000001

080040cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d13c      	bne.n	8004160 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d12b      	bne.n	8004158 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004104:	2b00      	cmp	r3, #0
 8004106:	d127      	bne.n	8004158 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004112:	2b00      	cmp	r3, #0
 8004114:	d006      	beq.n	8004124 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004120:	2b00      	cmp	r3, #0
 8004122:	d119      	bne.n	8004158 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0220 	bic.w	r2, r2, #32
 8004132:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f043 0201 	orr.w	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff fd01 	bl	8003b60 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800415e:	e00e      	b.n	800417e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7ff fd15 	bl	8003b9c <HAL_ADC_ErrorCallback>
}
 8004172:	e004      	b.n	800417e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	4798      	blx	r3
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7ff fced 	bl	8003b74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800419a:	bf00      	nop
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2240      	movs	r2, #64	; 0x40
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	f043 0204 	orr.w	r2, r3, #4
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff fcea 	bl	8003b9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <__NVIC_SetPriorityGrouping+0x44>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004200:	4013      	ands	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800420c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004216:	4a04      	ldr	r2, [pc, #16]	; (8004228 <__NVIC_SetPriorityGrouping+0x44>)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	60d3      	str	r3, [r2, #12]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <__NVIC_GetPriorityGrouping+0x18>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	f003 0307 	and.w	r3, r3, #7
}
 800423a:	4618      	mov	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004256:	2b00      	cmp	r3, #0
 8004258:	db0b      	blt.n	8004272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	f003 021f 	and.w	r2, r3, #31
 8004260:	4907      	ldr	r1, [pc, #28]	; (8004280 <__NVIC_EnableIRQ+0x38>)
 8004262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	2001      	movs	r0, #1
 800426a:	fa00 f202 	lsl.w	r2, r0, r2
 800426e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	e000e100 	.word	0xe000e100

08004284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	6039      	str	r1, [r7, #0]
 800428e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004294:	2b00      	cmp	r3, #0
 8004296:	db0a      	blt.n	80042ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	b2da      	uxtb	r2, r3
 800429c:	490c      	ldr	r1, [pc, #48]	; (80042d0 <__NVIC_SetPriority+0x4c>)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	0112      	lsls	r2, r2, #4
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	440b      	add	r3, r1
 80042a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042ac:	e00a      	b.n	80042c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	4908      	ldr	r1, [pc, #32]	; (80042d4 <__NVIC_SetPriority+0x50>)
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	3b04      	subs	r3, #4
 80042bc:	0112      	lsls	r2, r2, #4
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	440b      	add	r3, r1
 80042c2:	761a      	strb	r2, [r3, #24]
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	e000e100 	.word	0xe000e100
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d8:	b480      	push	{r7}
 80042da:	b089      	sub	sp, #36	; 0x24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f1c3 0307 	rsb	r3, r3, #7
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	bf28      	it	cs
 80042f6:	2304      	movcs	r3, #4
 80042f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3304      	adds	r3, #4
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d902      	bls.n	8004308 <NVIC_EncodePriority+0x30>
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3b03      	subs	r3, #3
 8004306:	e000      	b.n	800430a <NVIC_EncodePriority+0x32>
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800430c:	f04f 32ff 	mov.w	r2, #4294967295
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43da      	mvns	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	401a      	ands	r2, r3
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004320:	f04f 31ff 	mov.w	r1, #4294967295
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	fa01 f303 	lsl.w	r3, r1, r3
 800432a:	43d9      	mvns	r1, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004330:	4313      	orrs	r3, r2
         );
}
 8004332:	4618      	mov	r0, r3
 8004334:	3724      	adds	r7, #36	; 0x24
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3b01      	subs	r3, #1
 800434c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004350:	d301      	bcc.n	8004356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004352:	2301      	movs	r3, #1
 8004354:	e00f      	b.n	8004376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004356:	4a0a      	ldr	r2, [pc, #40]	; (8004380 <SysTick_Config+0x40>)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3b01      	subs	r3, #1
 800435c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800435e:	210f      	movs	r1, #15
 8004360:	f04f 30ff 	mov.w	r0, #4294967295
 8004364:	f7ff ff8e 	bl	8004284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <SysTick_Config+0x40>)
 800436a:	2200      	movs	r2, #0
 800436c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800436e:	4b04      	ldr	r3, [pc, #16]	; (8004380 <SysTick_Config+0x40>)
 8004370:	2207      	movs	r2, #7
 8004372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	e000e010 	.word	0xe000e010

08004384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff ff29 	bl	80041e4 <__NVIC_SetPriorityGrouping>
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800439a:	b580      	push	{r7, lr}
 800439c:	b086      	sub	sp, #24
 800439e:	af00      	add	r7, sp, #0
 80043a0:	4603      	mov	r3, r0
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043ac:	f7ff ff3e 	bl	800422c <__NVIC_GetPriorityGrouping>
 80043b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	6978      	ldr	r0, [r7, #20]
 80043b8:	f7ff ff8e 	bl	80042d8 <NVIC_EncodePriority>
 80043bc:	4602      	mov	r2, r0
 80043be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ff5d 	bl	8004284 <__NVIC_SetPriority>
}
 80043ca:	bf00      	nop
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	4603      	mov	r3, r0
 80043da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ff31 	bl	8004248 <__NVIC_EnableIRQ>
}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff ffa2 	bl	8004340 <SysTick_Config>
 80043fc:	4603      	mov	r3, r0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004414:	f7ff f924 	bl	8003660 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e099      	b.n	8004558 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004444:	e00f      	b.n	8004466 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004446:	f7ff f90b 	bl	8003660 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b05      	cmp	r3, #5
 8004452:	d908      	bls.n	8004466 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2203      	movs	r2, #3
 800445e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e078      	b.n	8004558 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e8      	bne.n	8004446 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4b38      	ldr	r3, [pc, #224]	; (8004560 <HAL_DMA_Init+0x158>)
 8004480:	4013      	ands	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004492:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800449e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d107      	bne.n	80044d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	4313      	orrs	r3, r2
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f023 0307 	bic.w	r3, r3, #7
 80044e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d117      	bne.n	800452a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00e      	beq.n	800452a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fb01 	bl	8004b14 <DMA_CheckFifoParam>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2240      	movs	r2, #64	; 0x40
 800451c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004526:	2301      	movs	r3, #1
 8004528:	e016      	b.n	8004558 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fab8 	bl	8004aa8 <DMA_CalcBaseAndBitshift>
 8004538:	4603      	mov	r3, r0
 800453a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004540:	223f      	movs	r2, #63	; 0x3f
 8004542:	409a      	lsls	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	f010803f 	.word	0xf010803f

08004564 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_DMA_Start_IT+0x26>
 8004586:	2302      	movs	r3, #2
 8004588:	e040      	b.n	800460c <HAL_DMA_Start_IT+0xa8>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d12f      	bne.n	80045fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2202      	movs	r2, #2
 80045a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fa4a 	bl	8004a4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045bc:	223f      	movs	r2, #63	; 0x3f
 80045be:	409a      	lsls	r2, r3
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0216 	orr.w	r2, r2, #22
 80045d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0208 	orr.w	r2, r2, #8
 80045ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e005      	b.n	800460a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004606:	2302      	movs	r3, #2
 8004608:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800460a:	7dfb      	ldrb	r3, [r7, #23]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004622:	f7ff f81d 	bl	8003660 <HAL_GetTick>
 8004626:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d008      	beq.n	8004646 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2280      	movs	r2, #128	; 0x80
 8004638:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e052      	b.n	80046ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0216 	bic.w	r2, r2, #22
 8004654:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695a      	ldr	r2, [r3, #20]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004664:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d103      	bne.n	8004676 <HAL_DMA_Abort+0x62>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0208 	bic.w	r2, r2, #8
 8004684:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004696:	e013      	b.n	80046c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004698:	f7fe ffe2 	bl	8003660 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b05      	cmp	r3, #5
 80046a4:	d90c      	bls.n	80046c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2203      	movs	r2, #3
 80046b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e015      	b.n	80046ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e4      	bne.n	8004698 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d2:	223f      	movs	r2, #63	; 0x3f
 80046d4:	409a      	lsls	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d004      	beq.n	8004712 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2280      	movs	r2, #128	; 0x80
 800470c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e00c      	b.n	800472c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2205      	movs	r2, #5
 8004716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004744:	4b92      	ldr	r3, [pc, #584]	; (8004990 <HAL_DMA_IRQHandler+0x258>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a92      	ldr	r2, [pc, #584]	; (8004994 <HAL_DMA_IRQHandler+0x25c>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	0a9b      	lsrs	r3, r3, #10
 8004750:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004756:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004762:	2208      	movs	r2, #8
 8004764:	409a      	lsls	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01a      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d013      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0204 	bic.w	r2, r2, #4
 800478a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	2208      	movs	r2, #8
 8004792:	409a      	lsls	r2, r3
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479c:	f043 0201 	orr.w	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a8:	2201      	movs	r2, #1
 80047aa:	409a      	lsls	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d012      	beq.n	80047da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	2201      	movs	r2, #1
 80047c8:	409a      	lsls	r2, r3
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	f043 0202 	orr.w	r2, r3, #2
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047de:	2204      	movs	r2, #4
 80047e0:	409a      	lsls	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d012      	beq.n	8004810 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00b      	beq.n	8004810 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fc:	2204      	movs	r2, #4
 80047fe:	409a      	lsls	r2, r3
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004808:	f043 0204 	orr.w	r2, r3, #4
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004814:	2210      	movs	r2, #16
 8004816:	409a      	lsls	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4013      	ands	r3, r2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d043      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d03c      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	2210      	movs	r2, #16
 8004834:	409a      	lsls	r2, r3
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d018      	beq.n	800487a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d108      	bne.n	8004868 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d024      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	4798      	blx	r3
 8004866:	e01f      	b.n	80048a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01b      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	4798      	blx	r3
 8004878:	e016      	b.n	80048a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d107      	bne.n	8004898 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0208 	bic.w	r2, r2, #8
 8004896:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ac:	2220      	movs	r2, #32
 80048ae:	409a      	lsls	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 808e 	beq.w	80049d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8086 	beq.w	80049d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ce:	2220      	movs	r2, #32
 80048d0:	409a      	lsls	r2, r3
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b05      	cmp	r3, #5
 80048e0:	d136      	bne.n	8004950 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0216 	bic.w	r2, r2, #22
 80048f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004900:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <HAL_DMA_IRQHandler+0x1da>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0208 	bic.w	r2, r2, #8
 8004920:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004926:	223f      	movs	r2, #63	; 0x3f
 8004928:	409a      	lsls	r2, r3
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004942:	2b00      	cmp	r3, #0
 8004944:	d07d      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	4798      	blx	r3
        }
        return;
 800494e:	e078      	b.n	8004a42 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01c      	beq.n	8004998 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d108      	bne.n	800497e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004970:	2b00      	cmp	r3, #0
 8004972:	d030      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	4798      	blx	r3
 800497c:	e02b      	b.n	80049d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d027      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	4798      	blx	r3
 800498e:	e022      	b.n	80049d6 <HAL_DMA_IRQHandler+0x29e>
 8004990:	20000028 	.word	0x20000028
 8004994:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10f      	bne.n	80049c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0210 	bic.w	r2, r2, #16
 80049b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d032      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d022      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2205      	movs	r2, #5
 80049ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0201 	bic.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	3301      	adds	r3, #1
 8004a06:	60bb      	str	r3, [r7, #8]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d307      	bcc.n	8004a1e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f2      	bne.n	8004a02 <HAL_DMA_IRQHandler+0x2ca>
 8004a1c:	e000      	b.n	8004a20 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004a1e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	4798      	blx	r3
 8004a40:	e000      	b.n	8004a44 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004a42:	bf00      	nop
    }
  }
}
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop

08004a4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b40      	cmp	r3, #64	; 0x40
 8004a78:	d108      	bne.n	8004a8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a8a:	e007      	b.n	8004a9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	60da      	str	r2, [r3, #12]
}
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	3b10      	subs	r3, #16
 8004ab8:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <DMA_CalcBaseAndBitshift+0x64>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	091b      	lsrs	r3, r3, #4
 8004ac0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ac2:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <DMA_CalcBaseAndBitshift+0x68>)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d909      	bls.n	8004aea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ade:	f023 0303 	bic.w	r3, r3, #3
 8004ae2:	1d1a      	adds	r2, r3, #4
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	659a      	str	r2, [r3, #88]	; 0x58
 8004ae8:	e007      	b.n	8004afa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004af2:	f023 0303 	bic.w	r3, r3, #3
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	aaaaaaab 	.word	0xaaaaaaab
 8004b10:	08009154 	.word	0x08009154

08004b14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d11f      	bne.n	8004b6e <DMA_CheckFifoParam+0x5a>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d856      	bhi.n	8004be2 <DMA_CheckFifoParam+0xce>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <DMA_CheckFifoParam+0x28>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004b4d 	.word	0x08004b4d
 8004b40:	08004b5f 	.word	0x08004b5f
 8004b44:	08004b4d 	.word	0x08004b4d
 8004b48:	08004be3 	.word	0x08004be3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d046      	beq.n	8004be6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b5c:	e043      	b.n	8004be6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b66:	d140      	bne.n	8004bea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b6c:	e03d      	b.n	8004bea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b76:	d121      	bne.n	8004bbc <DMA_CheckFifoParam+0xa8>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d837      	bhi.n	8004bee <DMA_CheckFifoParam+0xda>
 8004b7e:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <DMA_CheckFifoParam+0x70>)
 8004b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b84:	08004b95 	.word	0x08004b95
 8004b88:	08004b9b 	.word	0x08004b9b
 8004b8c:	08004b95 	.word	0x08004b95
 8004b90:	08004bad 	.word	0x08004bad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
      break;
 8004b98:	e030      	b.n	8004bfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d025      	beq.n	8004bf2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004baa:	e022      	b.n	8004bf2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bb4:	d11f      	bne.n	8004bf6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bba:	e01c      	b.n	8004bf6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d903      	bls.n	8004bca <DMA_CheckFifoParam+0xb6>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d003      	beq.n	8004bd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bc8:	e018      	b.n	8004bfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8004bce:	e015      	b.n	8004bfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00e      	beq.n	8004bfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
      break;
 8004be0:	e00b      	b.n	8004bfa <DMA_CheckFifoParam+0xe6>
      break;
 8004be2:	bf00      	nop
 8004be4:	e00a      	b.n	8004bfc <DMA_CheckFifoParam+0xe8>
      break;
 8004be6:	bf00      	nop
 8004be8:	e008      	b.n	8004bfc <DMA_CheckFifoParam+0xe8>
      break;
 8004bea:	bf00      	nop
 8004bec:	e006      	b.n	8004bfc <DMA_CheckFifoParam+0xe8>
      break;
 8004bee:	bf00      	nop
 8004bf0:	e004      	b.n	8004bfc <DMA_CheckFifoParam+0xe8>
      break;
 8004bf2:	bf00      	nop
 8004bf4:	e002      	b.n	8004bfc <DMA_CheckFifoParam+0xe8>
      break;   
 8004bf6:	bf00      	nop
 8004bf8:	e000      	b.n	8004bfc <DMA_CheckFifoParam+0xe8>
      break;
 8004bfa:	bf00      	nop
    }
  } 
  
  return status; 
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop

08004c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b089      	sub	sp, #36	; 0x24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	e159      	b.n	8004edc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c28:	2201      	movs	r2, #1
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	f040 8148 	bne.w	8004ed6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d005      	beq.n	8004c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d130      	bne.n	8004cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	2203      	movs	r2, #3
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43db      	mvns	r3, r3
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	4013      	ands	r3, r2
 8004c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c94:	2201      	movs	r2, #1
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 0201 	and.w	r2, r3, #1
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d017      	beq.n	8004cfc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d123      	bne.n	8004d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	08da      	lsrs	r2, r3, #3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3208      	adds	r2, #8
 8004d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	220f      	movs	r2, #15
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	43db      	mvns	r3, r3
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	08da      	lsrs	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3208      	adds	r2, #8
 8004d4a:	69b9      	ldr	r1, [r7, #24]
 8004d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 0203 	and.w	r2, r3, #3
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80a2 	beq.w	8004ed6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	4b57      	ldr	r3, [pc, #348]	; (8004ef4 <HAL_GPIO_Init+0x2e8>)
 8004d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9a:	4a56      	ldr	r2, [pc, #344]	; (8004ef4 <HAL_GPIO_Init+0x2e8>)
 8004d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004da0:	6453      	str	r3, [r2, #68]	; 0x44
 8004da2:	4b54      	ldr	r3, [pc, #336]	; (8004ef4 <HAL_GPIO_Init+0x2e8>)
 8004da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dae:	4a52      	ldr	r2, [pc, #328]	; (8004ef8 <HAL_GPIO_Init+0x2ec>)
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	089b      	lsrs	r3, r3, #2
 8004db4:	3302      	adds	r3, #2
 8004db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	220f      	movs	r2, #15
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a49      	ldr	r2, [pc, #292]	; (8004efc <HAL_GPIO_Init+0x2f0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d019      	beq.n	8004e0e <HAL_GPIO_Init+0x202>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a48      	ldr	r2, [pc, #288]	; (8004f00 <HAL_GPIO_Init+0x2f4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d013      	beq.n	8004e0a <HAL_GPIO_Init+0x1fe>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a47      	ldr	r2, [pc, #284]	; (8004f04 <HAL_GPIO_Init+0x2f8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00d      	beq.n	8004e06 <HAL_GPIO_Init+0x1fa>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a46      	ldr	r2, [pc, #280]	; (8004f08 <HAL_GPIO_Init+0x2fc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d007      	beq.n	8004e02 <HAL_GPIO_Init+0x1f6>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a45      	ldr	r2, [pc, #276]	; (8004f0c <HAL_GPIO_Init+0x300>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d101      	bne.n	8004dfe <HAL_GPIO_Init+0x1f2>
 8004dfa:	2304      	movs	r3, #4
 8004dfc:	e008      	b.n	8004e10 <HAL_GPIO_Init+0x204>
 8004dfe:	2307      	movs	r3, #7
 8004e00:	e006      	b.n	8004e10 <HAL_GPIO_Init+0x204>
 8004e02:	2303      	movs	r3, #3
 8004e04:	e004      	b.n	8004e10 <HAL_GPIO_Init+0x204>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e002      	b.n	8004e10 <HAL_GPIO_Init+0x204>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <HAL_GPIO_Init+0x204>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	f002 0203 	and.w	r2, r2, #3
 8004e16:	0092      	lsls	r2, r2, #2
 8004e18:	4093      	lsls	r3, r2
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e20:	4935      	ldr	r1, [pc, #212]	; (8004ef8 <HAL_GPIO_Init+0x2ec>)
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	089b      	lsrs	r3, r3, #2
 8004e26:	3302      	adds	r3, #2
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e2e:	4b38      	ldr	r3, [pc, #224]	; (8004f10 <HAL_GPIO_Init+0x304>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e52:	4a2f      	ldr	r2, [pc, #188]	; (8004f10 <HAL_GPIO_Init+0x304>)
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e58:	4b2d      	ldr	r3, [pc, #180]	; (8004f10 <HAL_GPIO_Init+0x304>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e7c:	4a24      	ldr	r2, [pc, #144]	; (8004f10 <HAL_GPIO_Init+0x304>)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e82:	4b23      	ldr	r3, [pc, #140]	; (8004f10 <HAL_GPIO_Init+0x304>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ea6:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <HAL_GPIO_Init+0x304>)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eac:	4b18      	ldr	r3, [pc, #96]	; (8004f10 <HAL_GPIO_Init+0x304>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ed0:	4a0f      	ldr	r2, [pc, #60]	; (8004f10 <HAL_GPIO_Init+0x304>)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	61fb      	str	r3, [r7, #28]
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	2b0f      	cmp	r3, #15
 8004ee0:	f67f aea2 	bls.w	8004c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	3724      	adds	r7, #36	; 0x24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	40013800 	.word	0x40013800
 8004efc:	40020000 	.word	0x40020000
 8004f00:	40020400 	.word	0x40020400
 8004f04:	40020800 	.word	0x40020800
 8004f08:	40020c00 	.word	0x40020c00
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40013c00 	.word	0x40013c00

08004f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	887b      	ldrh	r3, [r7, #2]
 8004f26:	4013      	ands	r3, r2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
 8004f30:	e001      	b.n	8004f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f32:	2300      	movs	r3, #0
 8004f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	807b      	strh	r3, [r7, #2]
 8004f50:	4613      	mov	r3, r2
 8004f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f54:	787b      	ldrb	r3, [r7, #1]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f5a:	887a      	ldrh	r2, [r7, #2]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f60:	e003      	b.n	8004f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f62:	887b      	ldrh	r3, [r7, #2]
 8004f64:	041a      	lsls	r2, r3, #16
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	619a      	str	r2, [r3, #24]
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e264      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d075      	beq.n	8005082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f96:	4ba3      	ldr	r3, [pc, #652]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d00c      	beq.n	8004fbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fa2:	4ba0      	ldr	r3, [pc, #640]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d112      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fae:	4b9d      	ldr	r3, [pc, #628]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fba:	d10b      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbc:	4b99      	ldr	r3, [pc, #612]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d05b      	beq.n	8005080 <HAL_RCC_OscConfig+0x108>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d157      	bne.n	8005080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e23f      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fdc:	d106      	bne.n	8004fec <HAL_RCC_OscConfig+0x74>
 8004fde:	4b91      	ldr	r3, [pc, #580]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a90      	ldr	r2, [pc, #576]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e01d      	b.n	8005028 <HAL_RCC_OscConfig+0xb0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff4:	d10c      	bne.n	8005010 <HAL_RCC_OscConfig+0x98>
 8004ff6:	4b8b      	ldr	r3, [pc, #556]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a8a      	ldr	r2, [pc, #552]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	4b88      	ldr	r3, [pc, #544]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a87      	ldr	r2, [pc, #540]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8005008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	e00b      	b.n	8005028 <HAL_RCC_OscConfig+0xb0>
 8005010:	4b84      	ldr	r3, [pc, #528]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a83      	ldr	r2, [pc, #524]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8005016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	4b81      	ldr	r3, [pc, #516]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a80      	ldr	r2, [pc, #512]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8005022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d013      	beq.n	8005058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005030:	f7fe fb16 	bl	8003660 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005038:	f7fe fb12 	bl	8003660 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b64      	cmp	r3, #100	; 0x64
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e204      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	4b76      	ldr	r3, [pc, #472]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0xc0>
 8005056:	e014      	b.n	8005082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005058:	f7fe fb02 	bl	8003660 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005060:	f7fe fafe 	bl	8003660 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b64      	cmp	r3, #100	; 0x64
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e1f0      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	4b6c      	ldr	r3, [pc, #432]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0xe8>
 800507e:	e000      	b.n	8005082 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d063      	beq.n	8005156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800508e:	4b65      	ldr	r3, [pc, #404]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00b      	beq.n	80050b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800509a:	4b62      	ldr	r3, [pc, #392]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d11c      	bne.n	80050e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050a6:	4b5f      	ldr	r3, [pc, #380]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d116      	bne.n	80050e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b2:	4b5c      	ldr	r3, [pc, #368]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d005      	beq.n	80050ca <HAL_RCC_OscConfig+0x152>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d001      	beq.n	80050ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e1c4      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ca:	4b56      	ldr	r3, [pc, #344]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	4952      	ldr	r1, [pc, #328]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050de:	e03a      	b.n	8005156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d020      	beq.n	800512a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050e8:	4b4f      	ldr	r3, [pc, #316]	; (8005228 <HAL_RCC_OscConfig+0x2b0>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ee:	f7fe fab7 	bl	8003660 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f6:	f7fe fab3 	bl	8003660 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e1a5      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005108:	4b46      	ldr	r3, [pc, #280]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005114:	4b43      	ldr	r3, [pc, #268]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4940      	ldr	r1, [pc, #256]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 8005124:	4313      	orrs	r3, r2
 8005126:	600b      	str	r3, [r1, #0]
 8005128:	e015      	b.n	8005156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800512a:	4b3f      	ldr	r3, [pc, #252]	; (8005228 <HAL_RCC_OscConfig+0x2b0>)
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fe fa96 	bl	8003660 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005138:	f7fe fa92 	bl	8003660 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e184      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514a:	4b36      	ldr	r3, [pc, #216]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d030      	beq.n	80051c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d016      	beq.n	8005198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800516a:	4b30      	ldr	r3, [pc, #192]	; (800522c <HAL_RCC_OscConfig+0x2b4>)
 800516c:	2201      	movs	r2, #1
 800516e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005170:	f7fe fa76 	bl	8003660 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005178:	f7fe fa72 	bl	8003660 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e164      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518a:	4b26      	ldr	r3, [pc, #152]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 800518c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x200>
 8005196:	e015      	b.n	80051c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005198:	4b24      	ldr	r3, [pc, #144]	; (800522c <HAL_RCC_OscConfig+0x2b4>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800519e:	f7fe fa5f 	bl	8003660 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051a6:	f7fe fa5b 	bl	8003660 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e14d      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b8:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 80051ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f0      	bne.n	80051a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80a0 	beq.w	8005312 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d2:	2300      	movs	r3, #0
 80051d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d6:	4b13      	ldr	r3, [pc, #76]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10f      	bne.n	8005202 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	4a0e      	ldr	r2, [pc, #56]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 80051ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f0:	6413      	str	r3, [r2, #64]	; 0x40
 80051f2:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <HAL_RCC_OscConfig+0x2ac>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051fe:	2301      	movs	r3, #1
 8005200:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005202:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_RCC_OscConfig+0x2b8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d121      	bne.n	8005252 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800520e:	4b08      	ldr	r3, [pc, #32]	; (8005230 <HAL_RCC_OscConfig+0x2b8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a07      	ldr	r2, [pc, #28]	; (8005230 <HAL_RCC_OscConfig+0x2b8>)
 8005214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800521a:	f7fe fa21 	bl	8003660 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005220:	e011      	b.n	8005246 <HAL_RCC_OscConfig+0x2ce>
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800
 8005228:	42470000 	.word	0x42470000
 800522c:	42470e80 	.word	0x42470e80
 8005230:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005234:	f7fe fa14 	bl	8003660 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e106      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005246:	4b85      	ldr	r3, [pc, #532]	; (800545c <HAL_RCC_OscConfig+0x4e4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0f0      	beq.n	8005234 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d106      	bne.n	8005268 <HAL_RCC_OscConfig+0x2f0>
 800525a:	4b81      	ldr	r3, [pc, #516]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525e:	4a80      	ldr	r2, [pc, #512]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	6713      	str	r3, [r2, #112]	; 0x70
 8005266:	e01c      	b.n	80052a2 <HAL_RCC_OscConfig+0x32a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b05      	cmp	r3, #5
 800526e:	d10c      	bne.n	800528a <HAL_RCC_OscConfig+0x312>
 8005270:	4b7b      	ldr	r3, [pc, #492]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005274:	4a7a      	ldr	r2, [pc, #488]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 8005276:	f043 0304 	orr.w	r3, r3, #4
 800527a:	6713      	str	r3, [r2, #112]	; 0x70
 800527c:	4b78      	ldr	r3, [pc, #480]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 800527e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005280:	4a77      	ldr	r2, [pc, #476]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	6713      	str	r3, [r2, #112]	; 0x70
 8005288:	e00b      	b.n	80052a2 <HAL_RCC_OscConfig+0x32a>
 800528a:	4b75      	ldr	r3, [pc, #468]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	4a74      	ldr	r2, [pc, #464]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	6713      	str	r3, [r2, #112]	; 0x70
 8005296:	4b72      	ldr	r3, [pc, #456]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	4a71      	ldr	r2, [pc, #452]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 800529c:	f023 0304 	bic.w	r3, r3, #4
 80052a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d015      	beq.n	80052d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052aa:	f7fe f9d9 	bl	8003660 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b0:	e00a      	b.n	80052c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b2:	f7fe f9d5 	bl	8003660 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e0c5      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c8:	4b65      	ldr	r3, [pc, #404]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 80052ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0ee      	beq.n	80052b2 <HAL_RCC_OscConfig+0x33a>
 80052d4:	e014      	b.n	8005300 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d6:	f7fe f9c3 	bl	8003660 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052dc:	e00a      	b.n	80052f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052de:	f7fe f9bf 	bl	8003660 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e0af      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f4:	4b5a      	ldr	r3, [pc, #360]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1ee      	bne.n	80052de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005300:	7dfb      	ldrb	r3, [r7, #23]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d105      	bne.n	8005312 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005306:	4b56      	ldr	r3, [pc, #344]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	4a55      	ldr	r2, [pc, #340]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 800530c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005310:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 809b 	beq.w	8005452 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800531c:	4b50      	ldr	r3, [pc, #320]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 030c 	and.w	r3, r3, #12
 8005324:	2b08      	cmp	r3, #8
 8005326:	d05c      	beq.n	80053e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d141      	bne.n	80053b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005330:	4b4c      	ldr	r3, [pc, #304]	; (8005464 <HAL_RCC_OscConfig+0x4ec>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005336:	f7fe f993 	bl	8003660 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800533e:	f7fe f98f 	bl	8003660 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e081      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005350:	4b43      	ldr	r3, [pc, #268]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1f0      	bne.n	800533e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	019b      	lsls	r3, r3, #6
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	3b01      	subs	r3, #1
 8005376:	041b      	lsls	r3, r3, #16
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	061b      	lsls	r3, r3, #24
 8005380:	4937      	ldr	r1, [pc, #220]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 8005382:	4313      	orrs	r3, r2
 8005384:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005386:	4b37      	ldr	r3, [pc, #220]	; (8005464 <HAL_RCC_OscConfig+0x4ec>)
 8005388:	2201      	movs	r2, #1
 800538a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538c:	f7fe f968 	bl	8003660 <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005394:	f7fe f964 	bl	8003660 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e056      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a6:	4b2e      	ldr	r3, [pc, #184]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0x41c>
 80053b2:	e04e      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b4:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <HAL_RCC_OscConfig+0x4ec>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ba:	f7fe f951 	bl	8003660 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c2:	f7fe f94d 	bl	8003660 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e03f      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d4:	4b22      	ldr	r3, [pc, #136]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1f0      	bne.n	80053c2 <HAL_RCC_OscConfig+0x44a>
 80053e0:	e037      	b.n	8005452 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e032      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053ee:	4b1c      	ldr	r3, [pc, #112]	; (8005460 <HAL_RCC_OscConfig+0x4e8>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d028      	beq.n	800544e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005406:	429a      	cmp	r2, r3
 8005408:	d121      	bne.n	800544e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005414:	429a      	cmp	r2, r3
 8005416:	d11a      	bne.n	800544e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800541e:	4013      	ands	r3, r2
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005424:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005426:	4293      	cmp	r3, r2
 8005428:	d111      	bne.n	800544e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	3b01      	subs	r3, #1
 8005438:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d107      	bne.n	800544e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d001      	beq.n	8005452 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40007000 	.word	0x40007000
 8005460:	40023800 	.word	0x40023800
 8005464:	42470060 	.word	0x42470060

08005468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e0cc      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800547c:	4b68      	ldr	r3, [pc, #416]	; (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d90c      	bls.n	80054a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548a:	4b65      	ldr	r3, [pc, #404]	; (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005492:	4b63      	ldr	r3, [pc, #396]	; (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0b8      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d020      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054bc:	4b59      	ldr	r3, [pc, #356]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4a58      	ldr	r2, [pc, #352]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054d4:	4b53      	ldr	r3, [pc, #332]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	4a52      	ldr	r2, [pc, #328]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e0:	4b50      	ldr	r3, [pc, #320]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	494d      	ldr	r1, [pc, #308]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d044      	beq.n	8005588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d107      	bne.n	8005516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005506:	4b47      	ldr	r3, [pc, #284]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d119      	bne.n	8005546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e07f      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d003      	beq.n	8005526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005522:	2b03      	cmp	r3, #3
 8005524:	d107      	bne.n	8005536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005526:	4b3f      	ldr	r3, [pc, #252]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e06f      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005536:	4b3b      	ldr	r3, [pc, #236]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e067      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005546:	4b37      	ldr	r3, [pc, #220]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f023 0203 	bic.w	r2, r3, #3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4934      	ldr	r1, [pc, #208]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	4313      	orrs	r3, r2
 8005556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005558:	f7fe f882 	bl	8003660 <HAL_GetTick>
 800555c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555e:	e00a      	b.n	8005576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005560:	f7fe f87e 	bl	8003660 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	; 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e04f      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005576:	4b2b      	ldr	r3, [pc, #172]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 020c 	and.w	r2, r3, #12
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	429a      	cmp	r2, r3
 8005586:	d1eb      	bne.n	8005560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005588:	4b25      	ldr	r3, [pc, #148]	; (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d20c      	bcs.n	80055b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005596:	4b22      	ldr	r3, [pc, #136]	; (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b20      	ldr	r3, [pc, #128]	; (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e032      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055bc:	4b19      	ldr	r3, [pc, #100]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4916      	ldr	r1, [pc, #88]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055da:	4b12      	ldr	r3, [pc, #72]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	490e      	ldr	r1, [pc, #56]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055ee:	f000 f821 	bl	8005634 <HAL_RCC_GetSysClockFreq>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	490a      	ldr	r1, [pc, #40]	; (8005628 <HAL_RCC_ClockConfig+0x1c0>)
 8005600:	5ccb      	ldrb	r3, [r1, r3]
 8005602:	fa22 f303 	lsr.w	r3, r2, r3
 8005606:	4a09      	ldr	r2, [pc, #36]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 8005608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800560a:	4b09      	ldr	r3, [pc, #36]	; (8005630 <HAL_RCC_ClockConfig+0x1c8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7fd ffe2 	bl	80035d8 <HAL_InitTick>

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40023c00 	.word	0x40023c00
 8005624:	40023800 	.word	0x40023800
 8005628:	0800913c 	.word	0x0800913c
 800562c:	20000028 	.word	0x20000028
 8005630:	2000002c 	.word	0x2000002c

08005634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005634:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	607b      	str	r3, [r7, #4]
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	2300      	movs	r3, #0
 8005646:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800564c:	4b67      	ldr	r3, [pc, #412]	; (80057ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f003 030c 	and.w	r3, r3, #12
 8005654:	2b08      	cmp	r3, #8
 8005656:	d00d      	beq.n	8005674 <HAL_RCC_GetSysClockFreq+0x40>
 8005658:	2b08      	cmp	r3, #8
 800565a:	f200 80bd 	bhi.w	80057d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_RCC_GetSysClockFreq+0x34>
 8005662:	2b04      	cmp	r3, #4
 8005664:	d003      	beq.n	800566e <HAL_RCC_GetSysClockFreq+0x3a>
 8005666:	e0b7      	b.n	80057d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005668:	4b61      	ldr	r3, [pc, #388]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800566a:	60bb      	str	r3, [r7, #8]
       break;
 800566c:	e0b7      	b.n	80057de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800566e:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005670:	60bb      	str	r3, [r7, #8]
      break;
 8005672:	e0b4      	b.n	80057de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005674:	4b5d      	ldr	r3, [pc, #372]	; (80057ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800567c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800567e:	4b5b      	ldr	r3, [pc, #364]	; (80057ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d04d      	beq.n	8005726 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800568a:	4b58      	ldr	r3, [pc, #352]	; (80057ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	099b      	lsrs	r3, r3, #6
 8005690:	461a      	mov	r2, r3
 8005692:	f04f 0300 	mov.w	r3, #0
 8005696:	f240 10ff 	movw	r0, #511	; 0x1ff
 800569a:	f04f 0100 	mov.w	r1, #0
 800569e:	ea02 0800 	and.w	r8, r2, r0
 80056a2:	ea03 0901 	and.w	r9, r3, r1
 80056a6:	4640      	mov	r0, r8
 80056a8:	4649      	mov	r1, r9
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	014b      	lsls	r3, r1, #5
 80056b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80056b8:	0142      	lsls	r2, r0, #5
 80056ba:	4610      	mov	r0, r2
 80056bc:	4619      	mov	r1, r3
 80056be:	ebb0 0008 	subs.w	r0, r0, r8
 80056c2:	eb61 0109 	sbc.w	r1, r1, r9
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	018b      	lsls	r3, r1, #6
 80056d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80056d4:	0182      	lsls	r2, r0, #6
 80056d6:	1a12      	subs	r2, r2, r0
 80056d8:	eb63 0301 	sbc.w	r3, r3, r1
 80056dc:	f04f 0000 	mov.w	r0, #0
 80056e0:	f04f 0100 	mov.w	r1, #0
 80056e4:	00d9      	lsls	r1, r3, #3
 80056e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056ea:	00d0      	lsls	r0, r2, #3
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	eb12 0208 	adds.w	r2, r2, r8
 80056f4:	eb43 0309 	adc.w	r3, r3, r9
 80056f8:	f04f 0000 	mov.w	r0, #0
 80056fc:	f04f 0100 	mov.w	r1, #0
 8005700:	0259      	lsls	r1, r3, #9
 8005702:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005706:	0250      	lsls	r0, r2, #9
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4610      	mov	r0, r2
 800570e:	4619      	mov	r1, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	461a      	mov	r2, r3
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	f7fb fbb6 	bl	8000e88 <__aeabi_uldivmod>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4613      	mov	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e04a      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005726:	4b31      	ldr	r3, [pc, #196]	; (80057ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	099b      	lsrs	r3, r3, #6
 800572c:	461a      	mov	r2, r3
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005736:	f04f 0100 	mov.w	r1, #0
 800573a:	ea02 0400 	and.w	r4, r2, r0
 800573e:	ea03 0501 	and.w	r5, r3, r1
 8005742:	4620      	mov	r0, r4
 8005744:	4629      	mov	r1, r5
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	014b      	lsls	r3, r1, #5
 8005750:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005754:	0142      	lsls	r2, r0, #5
 8005756:	4610      	mov	r0, r2
 8005758:	4619      	mov	r1, r3
 800575a:	1b00      	subs	r0, r0, r4
 800575c:	eb61 0105 	sbc.w	r1, r1, r5
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	018b      	lsls	r3, r1, #6
 800576a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800576e:	0182      	lsls	r2, r0, #6
 8005770:	1a12      	subs	r2, r2, r0
 8005772:	eb63 0301 	sbc.w	r3, r3, r1
 8005776:	f04f 0000 	mov.w	r0, #0
 800577a:	f04f 0100 	mov.w	r1, #0
 800577e:	00d9      	lsls	r1, r3, #3
 8005780:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005784:	00d0      	lsls	r0, r2, #3
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	1912      	adds	r2, r2, r4
 800578c:	eb45 0303 	adc.w	r3, r5, r3
 8005790:	f04f 0000 	mov.w	r0, #0
 8005794:	f04f 0100 	mov.w	r1, #0
 8005798:	0299      	lsls	r1, r3, #10
 800579a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800579e:	0290      	lsls	r0, r2, #10
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4610      	mov	r0, r2
 80057a6:	4619      	mov	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	f7fb fb6a 	bl	8000e88 <__aeabi_uldivmod>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4613      	mov	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057bc:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	0c1b      	lsrs	r3, r3, #16
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	3301      	adds	r3, #1
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d4:	60bb      	str	r3, [r7, #8]
      break;
 80057d6:	e002      	b.n	80057de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80057da:	60bb      	str	r3, [r7, #8]
      break;
 80057dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057de:	68bb      	ldr	r3, [r7, #8]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80057ea:	bf00      	nop
 80057ec:	40023800 	.word	0x40023800
 80057f0:	00f42400 	.word	0x00f42400
 80057f4:	007a1200 	.word	0x007a1200

080057f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057fc:	4b03      	ldr	r3, [pc, #12]	; (800580c <HAL_RCC_GetHCLKFreq+0x14>)
 80057fe:	681b      	ldr	r3, [r3, #0]
}
 8005800:	4618      	mov	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	20000028 	.word	0x20000028

08005810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005814:	f7ff fff0 	bl	80057f8 <HAL_RCC_GetHCLKFreq>
 8005818:	4602      	mov	r2, r0
 800581a:	4b05      	ldr	r3, [pc, #20]	; (8005830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	0a9b      	lsrs	r3, r3, #10
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	4903      	ldr	r1, [pc, #12]	; (8005834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005826:	5ccb      	ldrb	r3, [r1, r3]
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800582c:	4618      	mov	r0, r3
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40023800 	.word	0x40023800
 8005834:	0800914c 	.word	0x0800914c

08005838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800583c:	f7ff ffdc 	bl	80057f8 <HAL_RCC_GetHCLKFreq>
 8005840:	4602      	mov	r2, r0
 8005842:	4b05      	ldr	r3, [pc, #20]	; (8005858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	0b5b      	lsrs	r3, r3, #13
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	4903      	ldr	r1, [pc, #12]	; (800585c <HAL_RCC_GetPCLK2Freq+0x24>)
 800584e:	5ccb      	ldrb	r3, [r1, r3]
 8005850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005854:	4618      	mov	r0, r3
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40023800 	.word	0x40023800
 800585c:	0800914c 	.word	0x0800914c

08005860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e07b      	b.n	800596a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	d108      	bne.n	800588c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005882:	d009      	beq.n	8005898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	61da      	str	r2, [r3, #28]
 800588a:	e005      	b.n	8005898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7fd fcc2 	bl	800323c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591c:	ea42 0103 	orr.w	r1, r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	0c1b      	lsrs	r3, r3, #16
 8005936:	f003 0104 	and.w	r1, r3, #4
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	f003 0210 	and.w	r2, r3, #16
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005958:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <HAL_SPI_Transmit_IT+0x20>
 8005990:	2302      	movs	r3, #2
 8005992:	e06f      	b.n	8005a74 <HAL_SPI_Transmit_IT+0x100>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_SPI_Transmit_IT+0x34>
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059ac:	e05d      	b.n	8005a6a <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d002      	beq.n	80059c0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80059ba:	2302      	movs	r3, #2
 80059bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059be:	e054      	b.n	8005a6a <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2203      	movs	r2, #3
 80059c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	88fa      	ldrh	r2, [r7, #6]
 80059d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	88fa      	ldrh	r2, [r7, #6]
 80059de:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4a1f      	ldr	r2, [pc, #124]	; (8005a80 <HAL_SPI_Transmit_IT+0x10c>)
 8005a04:	645a      	str	r2, [r3, #68]	; 0x44
 8005a06:	e002      	b.n	8005a0e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4a1e      	ldr	r2, [pc, #120]	; (8005a84 <HAL_SPI_Transmit_IT+0x110>)
 8005a0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a16:	d10f      	bne.n	8005a38 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005a46:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d008      	beq.n	8005a68 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	e000      	b.n	8005a6a <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8005a68:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	08005d0b 	.word	0x08005d0b
 8005a84:	08005cc5 	.word	0x08005cc5

08005a88 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	099b      	lsrs	r3, r3, #6
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10f      	bne.n	8005acc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	099b      	lsrs	r3, r3, #6
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
    return;
 8005aca:	e0d7      	b.n	8005c7c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	085b      	lsrs	r3, r3, #1
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <HAL_SPI_IRQHandler+0x66>
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	09db      	lsrs	r3, r3, #7
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	4798      	blx	r3
    return;
 8005aec:	e0c6      	b.n	8005c7c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10c      	bne.n	8005b14 <HAL_SPI_IRQHandler+0x8c>
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	099b      	lsrs	r3, r3, #6
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	0a1b      	lsrs	r3, r3, #8
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 80b4 	beq.w	8005c7c <HAL_SPI_IRQHandler+0x1f4>
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 80ad 	beq.w	8005c7c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	099b      	lsrs	r3, r3, #6
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d023      	beq.n	8005b76 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d011      	beq.n	8005b5e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3e:	f043 0204 	orr.w	r2, r3, #4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	e00b      	b.n	8005b76 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b5e:	2300      	movs	r3, #0
 8005b60:	613b      	str	r3, [r7, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	693b      	ldr	r3, [r7, #16]
        return;
 8005b74:	e082      	b.n	8005c7c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d014      	beq.n	8005bac <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	f043 0201 	orr.w	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	0a1b      	lsrs	r3, r3, #8
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00c      	beq.n	8005bd2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbc:	f043 0208 	orr.w	r2, r3, #8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60bb      	str	r3, [r7, #8]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d04f      	beq.n	8005c7a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005be8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <HAL_SPI_IRQHandler+0x17e>
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d034      	beq.n	8005c70 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0203 	bic.w	r2, r2, #3
 8005c14:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d011      	beq.n	8005c42 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c22:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <HAL_SPI_IRQHandler+0x1fc>)
 8005c24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fe fd62 	bl	80046f4 <HAL_DMA_Abort_IT>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d005      	beq.n	8005c42 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d016      	beq.n	8005c78 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c4e:	4a0d      	ldr	r2, [pc, #52]	; (8005c84 <HAL_SPI_IRQHandler+0x1fc>)
 8005c50:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe fd4c 	bl	80046f4 <HAL_DMA_Abort_IT>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00a      	beq.n	8005c78 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005c6e:	e003      	b.n	8005c78 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f809 	bl	8005c88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005c76:	e000      	b.n	8005c7a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005c78:	bf00      	nop
    return;
 8005c7a:	bf00      	nop
  }
}
 8005c7c:	3720      	adds	r7, #32
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	08005c9d 	.word	0x08005c9d

08005c88 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f7ff ffe6 	bl	8005c88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	7812      	ldrb	r2, [r2, #0]
 8005cd8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d102      	bne.n	8005d02 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f8f1 	bl	8005ee4 <SPI_CloseTx_ISR>
  }
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	881a      	ldrh	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	1c9a      	adds	r2, r3, #2
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d102      	bne.n	8005d46 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f8cf 	bl	8005ee4 <SPI_CloseTx_ISR>
  }
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d60:	f7fd fc7e 	bl	8003660 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d70:	f7fd fc76 	bl	8003660 <HAL_GetTick>
 8005d74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d76:	4b39      	ldr	r3, [pc, #228]	; (8005e5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	015b      	lsls	r3, r3, #5
 8005d7c:	0d1b      	lsrs	r3, r3, #20
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d86:	e054      	b.n	8005e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d050      	beq.n	8005e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d90:	f7fd fc66 	bl	8003660 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d902      	bls.n	8005da6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d13d      	bne.n	8005e22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005db4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dbe:	d111      	bne.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc8:	d004      	beq.n	8005dd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd2:	d107      	bne.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dec:	d10f      	bne.n	8005e0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e017      	b.n	8005e52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	bf0c      	ite	eq
 8005e42:	2301      	moveq	r3, #1
 8005e44:	2300      	movne	r3, #0
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d19b      	bne.n	8005d88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3720      	adds	r7, #32
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000028 	.word	0x20000028

08005e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <SPI_EndRxTxTransaction+0x7c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a1b      	ldr	r2, [pc, #108]	; (8005ee0 <SPI_EndRxTxTransaction+0x80>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	0d5b      	lsrs	r3, r3, #21
 8005e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e7c:	fb02 f303 	mul.w	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8a:	d112      	bne.n	8005eb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2200      	movs	r2, #0
 8005e94:	2180      	movs	r1, #128	; 0x80
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f7ff ff5a 	bl	8005d50 <SPI_WaitFlagStateUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d016      	beq.n	8005ed0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea6:	f043 0220 	orr.w	r2, r3, #32
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e00f      	b.n	8005ed2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec8:	2b80      	cmp	r3, #128	; 0x80
 8005eca:	d0f2      	beq.n	8005eb2 <SPI_EndRxTxTransaction+0x52>
 8005ecc:	e000      	b.n	8005ed0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ece:	bf00      	nop
  }

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000028 	.word	0x20000028
 8005ee0:	165e9f81 	.word	0x165e9f81

08005ee4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005eec:	4b2c      	ldr	r3, [pc, #176]	; (8005fa0 <SPI_CloseTx_ISR+0xbc>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a2c      	ldr	r2, [pc, #176]	; (8005fa4 <SPI_CloseTx_ISR+0xc0>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	0a5b      	lsrs	r3, r3, #9
 8005ef8:	2264      	movs	r2, #100	; 0x64
 8005efa:	fb02 f303 	mul.w	r3, r2, r3
 8005efe:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f00:	f7fd fbae 	bl	8003660 <HAL_GetTick>
 8005f04:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d106      	bne.n	8005f1a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f10:	f043 0220 	orr.w	r2, r3, #32
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f18:	e009      	b.n	8005f2e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0eb      	beq.n	8005f06 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f3c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	2164      	movs	r1, #100	; 0x64
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff ff8c 	bl	8005e60 <SPI_EndRxTxTransaction>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d005      	beq.n	8005f5a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff fe7d 	bl	8005c88 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005f8e:	e002      	b.n	8005f96 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7fd f857 	bl	8003044 <HAL_SPI_TxCpltCallback>
}
 8005f96:	bf00      	nop
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000028 	.word	0x20000028
 8005fa4:	057619f1 	.word	0x057619f1

08005fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e041      	b.n	800603e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fd f984 	bl	80032dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	f000 fade 	bl	80065a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b01      	cmp	r3, #1
 800605a:	d001      	beq.n	8006060 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e03c      	b.n	80060da <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1e      	ldr	r2, [pc, #120]	; (80060e8 <HAL_TIM_Base_Start+0xa0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d018      	beq.n	80060a4 <HAL_TIM_Base_Start+0x5c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607a:	d013      	beq.n	80060a4 <HAL_TIM_Base_Start+0x5c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a1a      	ldr	r2, [pc, #104]	; (80060ec <HAL_TIM_Base_Start+0xa4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00e      	beq.n	80060a4 <HAL_TIM_Base_Start+0x5c>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a19      	ldr	r2, [pc, #100]	; (80060f0 <HAL_TIM_Base_Start+0xa8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d009      	beq.n	80060a4 <HAL_TIM_Base_Start+0x5c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a17      	ldr	r2, [pc, #92]	; (80060f4 <HAL_TIM_Base_Start+0xac>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d004      	beq.n	80060a4 <HAL_TIM_Base_Start+0x5c>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a16      	ldr	r2, [pc, #88]	; (80060f8 <HAL_TIM_Base_Start+0xb0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d111      	bne.n	80060c8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b06      	cmp	r3, #6
 80060b4:	d010      	beq.n	80060d8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0201 	orr.w	r2, r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c6:	e007      	b.n	80060d8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40000400 	.word	0x40000400
 80060f0:	40000800 	.word	0x40000800
 80060f4:	40000c00 	.word	0x40000c00
 80060f8:	40014000 	.word	0x40014000

080060fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	d001      	beq.n	8006114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e044      	b.n	800619e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1e      	ldr	r2, [pc, #120]	; (80061ac <HAL_TIM_Base_Start_IT+0xb0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d018      	beq.n	8006168 <HAL_TIM_Base_Start_IT+0x6c>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613e:	d013      	beq.n	8006168 <HAL_TIM_Base_Start_IT+0x6c>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1a      	ldr	r2, [pc, #104]	; (80061b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00e      	beq.n	8006168 <HAL_TIM_Base_Start_IT+0x6c>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a19      	ldr	r2, [pc, #100]	; (80061b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d009      	beq.n	8006168 <HAL_TIM_Base_Start_IT+0x6c>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <HAL_TIM_Base_Start_IT+0x6c>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a16      	ldr	r2, [pc, #88]	; (80061bc <HAL_TIM_Base_Start_IT+0xc0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d111      	bne.n	800618c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b06      	cmp	r3, #6
 8006178:	d010      	beq.n	800619c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 0201 	orr.w	r2, r2, #1
 8006188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618a:	e007      	b.n	800619c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0201 	orr.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40010000 	.word	0x40010000
 80061b0:	40000400 	.word	0x40000400
 80061b4:	40000800 	.word	0x40000800
 80061b8:	40000c00 	.word	0x40000c00
 80061bc:	40014000 	.word	0x40014000

080061c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d122      	bne.n	800621c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d11b      	bne.n	800621c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f06f 0202 	mvn.w	r2, #2
 80061ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f9b2 	bl	800656c <HAL_TIM_IC_CaptureCallback>
 8006208:	e005      	b.n	8006216 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f9a4 	bl	8006558 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f9b5 	bl	8006580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b04      	cmp	r3, #4
 8006228:	d122      	bne.n	8006270 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b04      	cmp	r3, #4
 8006236:	d11b      	bne.n	8006270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0204 	mvn.w	r2, #4
 8006240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f988 	bl	800656c <HAL_TIM_IC_CaptureCallback>
 800625c:	e005      	b.n	800626a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f97a 	bl	8006558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f98b 	bl	8006580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b08      	cmp	r3, #8
 800627c:	d122      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f003 0308 	and.w	r3, r3, #8
 8006288:	2b08      	cmp	r3, #8
 800628a:	d11b      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f06f 0208 	mvn.w	r2, #8
 8006294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2204      	movs	r2, #4
 800629a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f95e 	bl	800656c <HAL_TIM_IC_CaptureCallback>
 80062b0:	e005      	b.n	80062be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f950 	bl	8006558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f961 	bl	8006580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b10      	cmp	r3, #16
 80062d0:	d122      	bne.n	8006318 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d11b      	bne.n	8006318 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f06f 0210 	mvn.w	r2, #16
 80062e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2208      	movs	r2, #8
 80062ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f934 	bl	800656c <HAL_TIM_IC_CaptureCallback>
 8006304:	e005      	b.n	8006312 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f926 	bl	8006558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f937 	bl	8006580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b01      	cmp	r3, #1
 8006324:	d10e      	bne.n	8006344 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b01      	cmp	r3, #1
 8006332:	d107      	bne.n	8006344 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0201 	mvn.w	r2, #1
 800633c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fc fe96 	bl	8003070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634e:	2b80      	cmp	r3, #128	; 0x80
 8006350:	d10e      	bne.n	8006370 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635c:	2b80      	cmp	r3, #128	; 0x80
 800635e:	d107      	bne.n	8006370 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 faae 	bl	80068cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	d10e      	bne.n	800639c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d107      	bne.n	800639c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f8fc 	bl	8006594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b20      	cmp	r3, #32
 80063a8:	d10e      	bne.n	80063c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d107      	bne.n	80063c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0220 	mvn.w	r2, #32
 80063c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fa78 	bl	80068b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_TIM_ConfigClockSource+0x18>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e0b3      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x180>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006406:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800640e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006420:	d03e      	beq.n	80064a0 <HAL_TIM_ConfigClockSource+0xd0>
 8006422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006426:	f200 8087 	bhi.w	8006538 <HAL_TIM_ConfigClockSource+0x168>
 800642a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642e:	f000 8085 	beq.w	800653c <HAL_TIM_ConfigClockSource+0x16c>
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006436:	d87f      	bhi.n	8006538 <HAL_TIM_ConfigClockSource+0x168>
 8006438:	2b70      	cmp	r3, #112	; 0x70
 800643a:	d01a      	beq.n	8006472 <HAL_TIM_ConfigClockSource+0xa2>
 800643c:	2b70      	cmp	r3, #112	; 0x70
 800643e:	d87b      	bhi.n	8006538 <HAL_TIM_ConfigClockSource+0x168>
 8006440:	2b60      	cmp	r3, #96	; 0x60
 8006442:	d050      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x116>
 8006444:	2b60      	cmp	r3, #96	; 0x60
 8006446:	d877      	bhi.n	8006538 <HAL_TIM_ConfigClockSource+0x168>
 8006448:	2b50      	cmp	r3, #80	; 0x50
 800644a:	d03c      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0xf6>
 800644c:	2b50      	cmp	r3, #80	; 0x50
 800644e:	d873      	bhi.n	8006538 <HAL_TIM_ConfigClockSource+0x168>
 8006450:	2b40      	cmp	r3, #64	; 0x40
 8006452:	d058      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0x136>
 8006454:	2b40      	cmp	r3, #64	; 0x40
 8006456:	d86f      	bhi.n	8006538 <HAL_TIM_ConfigClockSource+0x168>
 8006458:	2b30      	cmp	r3, #48	; 0x30
 800645a:	d064      	beq.n	8006526 <HAL_TIM_ConfigClockSource+0x156>
 800645c:	2b30      	cmp	r3, #48	; 0x30
 800645e:	d86b      	bhi.n	8006538 <HAL_TIM_ConfigClockSource+0x168>
 8006460:	2b20      	cmp	r3, #32
 8006462:	d060      	beq.n	8006526 <HAL_TIM_ConfigClockSource+0x156>
 8006464:	2b20      	cmp	r3, #32
 8006466:	d867      	bhi.n	8006538 <HAL_TIM_ConfigClockSource+0x168>
 8006468:	2b00      	cmp	r3, #0
 800646a:	d05c      	beq.n	8006526 <HAL_TIM_ConfigClockSource+0x156>
 800646c:	2b10      	cmp	r3, #16
 800646e:	d05a      	beq.n	8006526 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006470:	e062      	b.n	8006538 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	6899      	ldr	r1, [r3, #8]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f000 f98b 	bl	800679c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006494:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	609a      	str	r2, [r3, #8]
      break;
 800649e:	e04e      	b.n	800653e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	6899      	ldr	r1, [r3, #8]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f000 f974 	bl	800679c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064c2:	609a      	str	r2, [r3, #8]
      break;
 80064c4:	e03b      	b.n	800653e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	6859      	ldr	r1, [r3, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f000 f8e8 	bl	80066a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2150      	movs	r1, #80	; 0x50
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 f941 	bl	8006766 <TIM_ITRx_SetConfig>
      break;
 80064e4:	e02b      	b.n	800653e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	6859      	ldr	r1, [r3, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f000 f907 	bl	8006706 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2160      	movs	r1, #96	; 0x60
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 f931 	bl	8006766 <TIM_ITRx_SetConfig>
      break;
 8006504:	e01b      	b.n	800653e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	6859      	ldr	r1, [r3, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	461a      	mov	r2, r3
 8006514:	f000 f8c8 	bl	80066a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2140      	movs	r1, #64	; 0x40
 800651e:	4618      	mov	r0, r3
 8006520:	f000 f921 	bl	8006766 <TIM_ITRx_SetConfig>
      break;
 8006524:	e00b      	b.n	800653e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4619      	mov	r1, r3
 8006530:	4610      	mov	r0, r2
 8006532:	f000 f918 	bl	8006766 <TIM_ITRx_SetConfig>
        break;
 8006536:	e002      	b.n	800653e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006538:	bf00      	nop
 800653a:	e000      	b.n	800653e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800653c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a34      	ldr	r2, [pc, #208]	; (800668c <TIM_Base_SetConfig+0xe4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00f      	beq.n	80065e0 <TIM_Base_SetConfig+0x38>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c6:	d00b      	beq.n	80065e0 <TIM_Base_SetConfig+0x38>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a31      	ldr	r2, [pc, #196]	; (8006690 <TIM_Base_SetConfig+0xe8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d007      	beq.n	80065e0 <TIM_Base_SetConfig+0x38>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a30      	ldr	r2, [pc, #192]	; (8006694 <TIM_Base_SetConfig+0xec>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_Base_SetConfig+0x38>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a2f      	ldr	r2, [pc, #188]	; (8006698 <TIM_Base_SetConfig+0xf0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d108      	bne.n	80065f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a25      	ldr	r2, [pc, #148]	; (800668c <TIM_Base_SetConfig+0xe4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d01b      	beq.n	8006632 <TIM_Base_SetConfig+0x8a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006600:	d017      	beq.n	8006632 <TIM_Base_SetConfig+0x8a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a22      	ldr	r2, [pc, #136]	; (8006690 <TIM_Base_SetConfig+0xe8>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d013      	beq.n	8006632 <TIM_Base_SetConfig+0x8a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a21      	ldr	r2, [pc, #132]	; (8006694 <TIM_Base_SetConfig+0xec>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d00f      	beq.n	8006632 <TIM_Base_SetConfig+0x8a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a20      	ldr	r2, [pc, #128]	; (8006698 <TIM_Base_SetConfig+0xf0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00b      	beq.n	8006632 <TIM_Base_SetConfig+0x8a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a1f      	ldr	r2, [pc, #124]	; (800669c <TIM_Base_SetConfig+0xf4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d007      	beq.n	8006632 <TIM_Base_SetConfig+0x8a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a1e      	ldr	r2, [pc, #120]	; (80066a0 <TIM_Base_SetConfig+0xf8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d003      	beq.n	8006632 <TIM_Base_SetConfig+0x8a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <TIM_Base_SetConfig+0xfc>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d108      	bne.n	8006644 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	4313      	orrs	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a08      	ldr	r2, [pc, #32]	; (800668c <TIM_Base_SetConfig+0xe4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d103      	bne.n	8006678 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	615a      	str	r2, [r3, #20]
}
 800667e:	bf00      	nop
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	40010000 	.word	0x40010000
 8006690:	40000400 	.word	0x40000400
 8006694:	40000800 	.word	0x40000800
 8006698:	40000c00 	.word	0x40000c00
 800669c:	40014000 	.word	0x40014000
 80066a0:	40014400 	.word	0x40014400
 80066a4:	40014800 	.word	0x40014800

080066a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f023 0201 	bic.w	r2, r3, #1
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f023 030a 	bic.w	r3, r3, #10
 80066e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	621a      	str	r2, [r3, #32]
}
 80066fa:	bf00      	nop
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006706:	b480      	push	{r7}
 8006708:	b087      	sub	sp, #28
 800670a:	af00      	add	r7, sp, #0
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f023 0210 	bic.w	r2, r3, #16
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006730:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	031b      	lsls	r3, r3, #12
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006742:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4313      	orrs	r3, r2
 800674c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	621a      	str	r2, [r3, #32]
}
 800675a:	bf00      	nop
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006766:	b480      	push	{r7}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	f043 0307 	orr.w	r3, r3, #7
 8006788:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	609a      	str	r2, [r3, #8]
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	021a      	lsls	r2, r3, #8
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	431a      	orrs	r2, r3
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	609a      	str	r2, [r3, #8]
}
 80067d0:	bf00      	nop
 80067d2:	371c      	adds	r7, #28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e050      	b.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1c      	ldr	r2, [pc, #112]	; (80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d018      	beq.n	800686a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006840:	d013      	beq.n	800686a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00e      	beq.n	800686a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a16      	ldr	r2, [pc, #88]	; (80068ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d009      	beq.n	800686a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a15      	ldr	r2, [pc, #84]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a13      	ldr	r2, [pc, #76]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d10c      	bne.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	4313      	orrs	r3, r2
 800687a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40010000 	.word	0x40010000
 80068a8:	40000400 	.word	0x40000400
 80068ac:	40000800 	.word	0x40000800
 80068b0:	40000c00 	.word	0x40000c00
 80068b4:	40014000 	.word	0x40014000

080068b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e03f      	b.n	8006972 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fc fd26 	bl	8003358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2224      	movs	r2, #36	; 0x24
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fcbf 	bl	80072a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695a      	ldr	r2, [r3, #20]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2220      	movs	r2, #32
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b08a      	sub	sp, #40	; 0x28
 800697e:	af02      	add	r7, sp, #8
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	603b      	str	r3, [r7, #0]
 8006986:	4613      	mov	r3, r2
 8006988:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b20      	cmp	r3, #32
 8006998:	d17c      	bne.n	8006a94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <HAL_UART_Transmit+0x2c>
 80069a0:	88fb      	ldrh	r3, [r7, #6]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e075      	b.n	8006a96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_UART_Transmit+0x3e>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e06e      	b.n	8006a96 <HAL_UART_Transmit+0x11c>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2221      	movs	r2, #33	; 0x21
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069ce:	f7fc fe47 	bl	8003660 <HAL_GetTick>
 80069d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	88fa      	ldrh	r2, [r7, #6]
 80069d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	88fa      	ldrh	r2, [r7, #6]
 80069de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e8:	d108      	bne.n	80069fc <HAL_UART_Transmit+0x82>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d104      	bne.n	80069fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	61bb      	str	r3, [r7, #24]
 80069fa:	e003      	b.n	8006a04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a0c:	e02a      	b.n	8006a64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	2200      	movs	r2, #0
 8006a16:	2180      	movs	r1, #128	; 0x80
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 fa81 	bl	8006f20 <UART_WaitOnFlagUntilTimeout>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e036      	b.n	8006a96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10b      	bne.n	8006a46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	461a      	mov	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	3302      	adds	r3, #2
 8006a42:	61bb      	str	r3, [r7, #24]
 8006a44:	e007      	b.n	8006a56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	781a      	ldrb	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	3301      	adds	r3, #1
 8006a54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1cf      	bne.n	8006a0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2200      	movs	r2, #0
 8006a76:	2140      	movs	r1, #64	; 0x40
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fa51 	bl	8006f20 <UART_WaitOnFlagUntilTimeout>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e006      	b.n	8006a96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	e000      	b.n	8006a96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a94:	2302      	movs	r3, #2
  }
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3720      	adds	r7, #32
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	d130      	bne.n	8006b1a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <HAL_UART_Transmit_IT+0x26>
 8006abe:	88fb      	ldrh	r3, [r7, #6]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e029      	b.n	8006b1c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <HAL_UART_Transmit_IT+0x38>
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	e022      	b.n	8006b1c <HAL_UART_Transmit_IT+0x7e>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	88fa      	ldrh	r2, [r7, #6]
 8006ae8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	88fa      	ldrh	r2, [r7, #6]
 8006aee:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2221      	movs	r2, #33	; 0x21
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b14:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e000      	b.n	8006b1c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006b1a:	2302      	movs	r3, #2
  }
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	d11d      	bne.n	8006b7e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <HAL_UART_Receive_IT+0x26>
 8006b48:	88fb      	ldrh	r3, [r7, #6]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e016      	b.n	8006b80 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_UART_Receive_IT+0x38>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e00f      	b.n	8006b80 <HAL_UART_Receive_IT+0x58>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006b6e:	88fb      	ldrh	r3, [r7, #6]
 8006b70:	461a      	mov	r2, r3
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fa1d 	bl	8006fb4 <UART_Start_Receive_IT>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	e000      	b.n	8006b80 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006b7e:	2302      	movs	r3, #2
  }
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08a      	sub	sp, #40	; 0x28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10d      	bne.n	8006bda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d008      	beq.n	8006bda <HAL_UART_IRQHandler+0x52>
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fad1 	bl	800717a <UART_Receive_IT>
      return;
 8006bd8:	e17c      	b.n	8006ed4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 80b1 	beq.w	8006d44 <HAL_UART_IRQHandler+0x1bc>
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d105      	bne.n	8006bf8 <HAL_UART_IRQHandler+0x70>
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 80a6 	beq.w	8006d44 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <HAL_UART_IRQHandler+0x90>
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	f043 0201 	orr.w	r2, r3, #1
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <HAL_UART_IRQHandler+0xb0>
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	f043 0202 	orr.w	r2, r3, #2
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <HAL_UART_IRQHandler+0xd0>
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d005      	beq.n	8006c58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	f043 0204 	orr.w	r2, r3, #4
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00f      	beq.n	8006c82 <HAL_UART_IRQHandler+0xfa>
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <HAL_UART_IRQHandler+0xee>
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	f043 0208 	orr.w	r2, r3, #8
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 811f 	beq.w	8006eca <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d007      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x11e>
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fa6a 	bl	800717a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb0:	2b40      	cmp	r3, #64	; 0x40
 8006cb2:	bf0c      	ite	eq
 8006cb4:	2301      	moveq	r3, #1
 8006cb6:	2300      	movne	r3, #0
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d102      	bne.n	8006cce <HAL_UART_IRQHandler+0x146>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d031      	beq.n	8006d32 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f9aa 	bl	8007028 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cde:	2b40      	cmp	r3, #64	; 0x40
 8006ce0:	d123      	bne.n	8006d2a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	695a      	ldr	r2, [r3, #20]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cf0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d013      	beq.n	8006d22 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	4a77      	ldr	r2, [pc, #476]	; (8006edc <HAL_UART_IRQHandler+0x354>)
 8006d00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fd fcf4 	bl	80046f4 <HAL_DMA_Abort_IT>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d016      	beq.n	8006d40 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d20:	e00e      	b.n	8006d40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f8e6 	bl	8006ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d28:	e00a      	b.n	8006d40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f8e2 	bl	8006ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d30:	e006      	b.n	8006d40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f8de 	bl	8006ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d3e:	e0c4      	b.n	8006eca <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d40:	bf00      	nop
    return;
 8006d42:	e0c2      	b.n	8006eca <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	f040 80a2 	bne.w	8006e92 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	f003 0310 	and.w	r3, r3, #16
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 809c 	beq.w	8006e92 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8096 	beq.w	8006e92 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d86:	2b40      	cmp	r3, #64	; 0x40
 8006d88:	d14f      	bne.n	8006e2a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006d94:	8a3b      	ldrh	r3, [r7, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 8099 	beq.w	8006ece <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006da0:	8a3a      	ldrh	r2, [r7, #16]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	f080 8093 	bcs.w	8006ece <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	8a3a      	ldrh	r2, [r7, #16]
 8006dac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db8:	d02b      	beq.n	8006e12 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dc8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	695a      	ldr	r2, [r3, #20]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0201 	bic.w	r2, r2, #1
 8006dd8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695a      	ldr	r2, [r3, #20]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0210 	bic.w	r2, r2, #16
 8006e06:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fd fc01 	bl	8004614 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f870 	bl	8006f08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e28:	e051      	b.n	8006ece <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d047      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006e42:	8a7b      	ldrh	r3, [r7, #18]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d044      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e56:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695a      	ldr	r2, [r3, #20]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0201 	bic.w	r2, r2, #1
 8006e66:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0210 	bic.w	r2, r2, #16
 8006e84:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e86:	8a7b      	ldrh	r3, [r7, #18]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f83c 	bl	8006f08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e90:	e01f      	b.n	8006ed2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d008      	beq.n	8006eae <HAL_UART_IRQHandler+0x326>
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f8ff 	bl	80070aa <UART_Transmit_IT>
    return;
 8006eac:	e012      	b.n	8006ed4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00d      	beq.n	8006ed4 <HAL_UART_IRQHandler+0x34c>
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d008      	beq.n	8006ed4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f941 	bl	800714a <UART_EndTransmit_IT>
    return;
 8006ec8:	e004      	b.n	8006ed4 <HAL_UART_IRQHandler+0x34c>
    return;
 8006eca:	bf00      	nop
 8006ecc:	e002      	b.n	8006ed4 <HAL_UART_IRQHandler+0x34c>
      return;
 8006ece:	bf00      	nop
 8006ed0:	e000      	b.n	8006ed4 <HAL_UART_IRQHandler+0x34c>
      return;
 8006ed2:	bf00      	nop
  }
}
 8006ed4:	3728      	adds	r7, #40	; 0x28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	08007083 	.word	0x08007083

08006ee0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f30:	e02c      	b.n	8006f8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f38:	d028      	beq.n	8006f8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d007      	beq.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f40:	f7fc fb8e 	bl	8003660 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d21d      	bcs.n	8006f8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695a      	ldr	r2, [r3, #20]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0201 	bic.w	r2, r2, #1
 8006f6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e00f      	b.n	8006fac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	4013      	ands	r3, r2
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	bf0c      	ite	eq
 8006f9c:	2301      	moveq	r3, #1
 8006f9e:	2300      	movne	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d0c3      	beq.n	8006f32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	88fa      	ldrh	r2, [r7, #6]
 8006fd2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2222      	movs	r2, #34	; 0x22
 8006fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68da      	ldr	r2, [r3, #12]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ff8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	695a      	ldr	r2, [r3, #20]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f042 0220 	orr.w	r2, r2, #32
 8007018:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800703e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	695a      	ldr	r2, [r3, #20]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0201 	bic.w	r2, r2, #1
 800704e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	2b01      	cmp	r3, #1
 8007056:	d107      	bne.n	8007068 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0210 	bic.w	r2, r2, #16
 8007066:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f7ff ff29 	bl	8006ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070a2:	bf00      	nop
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b21      	cmp	r3, #33	; 0x21
 80070bc:	d13e      	bne.n	800713c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c6:	d114      	bne.n	80070f2 <UART_Transmit_IT+0x48>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d110      	bne.n	80070f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	1c9a      	adds	r2, r3, #2
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	621a      	str	r2, [r3, #32]
 80070f0:	e008      	b.n	8007104 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	1c59      	adds	r1, r3, #1
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	6211      	str	r1, [r2, #32]
 80070fc:	781a      	ldrb	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007108:	b29b      	uxth	r3, r3
 800710a:	3b01      	subs	r3, #1
 800710c:	b29b      	uxth	r3, r3
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	4619      	mov	r1, r3
 8007112:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10f      	bne.n	8007138 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007126:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007136:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	e000      	b.n	800713e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800713c:	2302      	movs	r3, #2
  }
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007160:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2220      	movs	r2, #32
 8007166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7ff feb8 	bl	8006ee0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b22      	cmp	r3, #34	; 0x22
 800718c:	f040 8087 	bne.w	800729e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007198:	d117      	bne.n	80071ca <UART_Receive_IT+0x50>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d113      	bne.n	80071ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071aa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	1c9a      	adds	r2, r3, #2
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28
 80071c8:	e026      	b.n	8007218 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071dc:	d007      	beq.n	80071ee <UART_Receive_IT+0x74>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <UART_Receive_IT+0x82>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	e008      	b.n	800720e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007208:	b2da      	uxtb	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800721c:	b29b      	uxth	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	b29b      	uxth	r3, r3
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4619      	mov	r1, r3
 8007226:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007228:	2b00      	cmp	r3, #0
 800722a:	d136      	bne.n	800729a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0220 	bic.w	r2, r2, #32
 800723a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800724a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695a      	ldr	r2, [r3, #20]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0201 	bic.w	r2, r2, #1
 800725a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2220      	movs	r2, #32
 8007260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007268:	2b01      	cmp	r3, #1
 800726a:	d10e      	bne.n	800728a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0210 	bic.w	r2, r2, #16
 800727a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff fe40 	bl	8006f08 <HAL_UARTEx_RxEventCallback>
 8007288:	e002      	b.n	8007290 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fb fe94 	bl	8002fb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	e002      	b.n	80072a0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	e000      	b.n	80072a0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800729e:	2302      	movs	r3, #2
  }
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	b09f      	sub	sp, #124	; 0x7c
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072be:	68d9      	ldr	r1, [r3, #12]
 80072c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	ea40 0301 	orr.w	r3, r0, r1
 80072c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072cc:	689a      	ldr	r2, [r3, #8]
 80072ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	431a      	orrs	r2, r3
 80072d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	431a      	orrs	r2, r3
 80072da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	4313      	orrs	r3, r2
 80072e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80072e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072ec:	f021 010c 	bic.w	r1, r1, #12
 80072f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072f6:	430b      	orrs	r3, r1
 80072f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007306:	6999      	ldr	r1, [r3, #24]
 8007308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	ea40 0301 	orr.w	r3, r0, r1
 8007310:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	4bc5      	ldr	r3, [pc, #788]	; (800762c <UART_SetConfig+0x384>)
 8007318:	429a      	cmp	r2, r3
 800731a:	d004      	beq.n	8007326 <UART_SetConfig+0x7e>
 800731c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	4bc3      	ldr	r3, [pc, #780]	; (8007630 <UART_SetConfig+0x388>)
 8007322:	429a      	cmp	r2, r3
 8007324:	d103      	bne.n	800732e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007326:	f7fe fa87 	bl	8005838 <HAL_RCC_GetPCLK2Freq>
 800732a:	6778      	str	r0, [r7, #116]	; 0x74
 800732c:	e002      	b.n	8007334 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800732e:	f7fe fa6f 	bl	8005810 <HAL_RCC_GetPCLK1Freq>
 8007332:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800733c:	f040 80b6 	bne.w	80074ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007342:	461c      	mov	r4, r3
 8007344:	f04f 0500 	mov.w	r5, #0
 8007348:	4622      	mov	r2, r4
 800734a:	462b      	mov	r3, r5
 800734c:	1891      	adds	r1, r2, r2
 800734e:	6439      	str	r1, [r7, #64]	; 0x40
 8007350:	415b      	adcs	r3, r3
 8007352:	647b      	str	r3, [r7, #68]	; 0x44
 8007354:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007358:	1912      	adds	r2, r2, r4
 800735a:	eb45 0303 	adc.w	r3, r5, r3
 800735e:	f04f 0000 	mov.w	r0, #0
 8007362:	f04f 0100 	mov.w	r1, #0
 8007366:	00d9      	lsls	r1, r3, #3
 8007368:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800736c:	00d0      	lsls	r0, r2, #3
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	1911      	adds	r1, r2, r4
 8007374:	6639      	str	r1, [r7, #96]	; 0x60
 8007376:	416b      	adcs	r3, r5
 8007378:	667b      	str	r3, [r7, #100]	; 0x64
 800737a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	461a      	mov	r2, r3
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	1891      	adds	r1, r2, r2
 8007386:	63b9      	str	r1, [r7, #56]	; 0x38
 8007388:	415b      	adcs	r3, r3
 800738a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800738c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007390:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007394:	f7f9 fd78 	bl	8000e88 <__aeabi_uldivmod>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4ba5      	ldr	r3, [pc, #660]	; (8007634 <UART_SetConfig+0x38c>)
 800739e:	fba3 2302 	umull	r2, r3, r3, r2
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	011e      	lsls	r6, r3, #4
 80073a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073a8:	461c      	mov	r4, r3
 80073aa:	f04f 0500 	mov.w	r5, #0
 80073ae:	4622      	mov	r2, r4
 80073b0:	462b      	mov	r3, r5
 80073b2:	1891      	adds	r1, r2, r2
 80073b4:	6339      	str	r1, [r7, #48]	; 0x30
 80073b6:	415b      	adcs	r3, r3
 80073b8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80073be:	1912      	adds	r2, r2, r4
 80073c0:	eb45 0303 	adc.w	r3, r5, r3
 80073c4:	f04f 0000 	mov.w	r0, #0
 80073c8:	f04f 0100 	mov.w	r1, #0
 80073cc:	00d9      	lsls	r1, r3, #3
 80073ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073d2:	00d0      	lsls	r0, r2, #3
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	1911      	adds	r1, r2, r4
 80073da:	65b9      	str	r1, [r7, #88]	; 0x58
 80073dc:	416b      	adcs	r3, r5
 80073de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	461a      	mov	r2, r3
 80073e6:	f04f 0300 	mov.w	r3, #0
 80073ea:	1891      	adds	r1, r2, r2
 80073ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80073ee:	415b      	adcs	r3, r3
 80073f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80073fa:	f7f9 fd45 	bl	8000e88 <__aeabi_uldivmod>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	4b8c      	ldr	r3, [pc, #560]	; (8007634 <UART_SetConfig+0x38c>)
 8007404:	fba3 1302 	umull	r1, r3, r3, r2
 8007408:	095b      	lsrs	r3, r3, #5
 800740a:	2164      	movs	r1, #100	; 0x64
 800740c:	fb01 f303 	mul.w	r3, r1, r3
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	3332      	adds	r3, #50	; 0x32
 8007416:	4a87      	ldr	r2, [pc, #540]	; (8007634 <UART_SetConfig+0x38c>)
 8007418:	fba2 2303 	umull	r2, r3, r2, r3
 800741c:	095b      	lsrs	r3, r3, #5
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007424:	441e      	add	r6, r3
 8007426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007428:	4618      	mov	r0, r3
 800742a:	f04f 0100 	mov.w	r1, #0
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	1894      	adds	r4, r2, r2
 8007434:	623c      	str	r4, [r7, #32]
 8007436:	415b      	adcs	r3, r3
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
 800743a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800743e:	1812      	adds	r2, r2, r0
 8007440:	eb41 0303 	adc.w	r3, r1, r3
 8007444:	f04f 0400 	mov.w	r4, #0
 8007448:	f04f 0500 	mov.w	r5, #0
 800744c:	00dd      	lsls	r5, r3, #3
 800744e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007452:	00d4      	lsls	r4, r2, #3
 8007454:	4622      	mov	r2, r4
 8007456:	462b      	mov	r3, r5
 8007458:	1814      	adds	r4, r2, r0
 800745a:	653c      	str	r4, [r7, #80]	; 0x50
 800745c:	414b      	adcs	r3, r1
 800745e:	657b      	str	r3, [r7, #84]	; 0x54
 8007460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	461a      	mov	r2, r3
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	1891      	adds	r1, r2, r2
 800746c:	61b9      	str	r1, [r7, #24]
 800746e:	415b      	adcs	r3, r3
 8007470:	61fb      	str	r3, [r7, #28]
 8007472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007476:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800747a:	f7f9 fd05 	bl	8000e88 <__aeabi_uldivmod>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4b6c      	ldr	r3, [pc, #432]	; (8007634 <UART_SetConfig+0x38c>)
 8007484:	fba3 1302 	umull	r1, r3, r3, r2
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	2164      	movs	r1, #100	; 0x64
 800748c:	fb01 f303 	mul.w	r3, r1, r3
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	3332      	adds	r3, #50	; 0x32
 8007496:	4a67      	ldr	r2, [pc, #412]	; (8007634 <UART_SetConfig+0x38c>)
 8007498:	fba2 2303 	umull	r2, r3, r2, r3
 800749c:	095b      	lsrs	r3, r3, #5
 800749e:	f003 0207 	and.w	r2, r3, #7
 80074a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4432      	add	r2, r6
 80074a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074aa:	e0b9      	b.n	8007620 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074ae:	461c      	mov	r4, r3
 80074b0:	f04f 0500 	mov.w	r5, #0
 80074b4:	4622      	mov	r2, r4
 80074b6:	462b      	mov	r3, r5
 80074b8:	1891      	adds	r1, r2, r2
 80074ba:	6139      	str	r1, [r7, #16]
 80074bc:	415b      	adcs	r3, r3
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80074c4:	1912      	adds	r2, r2, r4
 80074c6:	eb45 0303 	adc.w	r3, r5, r3
 80074ca:	f04f 0000 	mov.w	r0, #0
 80074ce:	f04f 0100 	mov.w	r1, #0
 80074d2:	00d9      	lsls	r1, r3, #3
 80074d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074d8:	00d0      	lsls	r0, r2, #3
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	eb12 0804 	adds.w	r8, r2, r4
 80074e2:	eb43 0905 	adc.w	r9, r3, r5
 80074e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f04f 0100 	mov.w	r1, #0
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	008b      	lsls	r3, r1, #2
 80074fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074fe:	0082      	lsls	r2, r0, #2
 8007500:	4640      	mov	r0, r8
 8007502:	4649      	mov	r1, r9
 8007504:	f7f9 fcc0 	bl	8000e88 <__aeabi_uldivmod>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4b49      	ldr	r3, [pc, #292]	; (8007634 <UART_SetConfig+0x38c>)
 800750e:	fba3 2302 	umull	r2, r3, r3, r2
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	011e      	lsls	r6, r3, #4
 8007516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007518:	4618      	mov	r0, r3
 800751a:	f04f 0100 	mov.w	r1, #0
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	1894      	adds	r4, r2, r2
 8007524:	60bc      	str	r4, [r7, #8]
 8007526:	415b      	adcs	r3, r3
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800752e:	1812      	adds	r2, r2, r0
 8007530:	eb41 0303 	adc.w	r3, r1, r3
 8007534:	f04f 0400 	mov.w	r4, #0
 8007538:	f04f 0500 	mov.w	r5, #0
 800753c:	00dd      	lsls	r5, r3, #3
 800753e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007542:	00d4      	lsls	r4, r2, #3
 8007544:	4622      	mov	r2, r4
 8007546:	462b      	mov	r3, r5
 8007548:	1814      	adds	r4, r2, r0
 800754a:	64bc      	str	r4, [r7, #72]	; 0x48
 800754c:	414b      	adcs	r3, r1
 800754e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	4618      	mov	r0, r3
 8007556:	f04f 0100 	mov.w	r1, #0
 800755a:	f04f 0200 	mov.w	r2, #0
 800755e:	f04f 0300 	mov.w	r3, #0
 8007562:	008b      	lsls	r3, r1, #2
 8007564:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007568:	0082      	lsls	r2, r0, #2
 800756a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800756e:	f7f9 fc8b 	bl	8000e88 <__aeabi_uldivmod>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4b2f      	ldr	r3, [pc, #188]	; (8007634 <UART_SetConfig+0x38c>)
 8007578:	fba3 1302 	umull	r1, r3, r3, r2
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	2164      	movs	r1, #100	; 0x64
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	3332      	adds	r3, #50	; 0x32
 800758a:	4a2a      	ldr	r2, [pc, #168]	; (8007634 <UART_SetConfig+0x38c>)
 800758c:	fba2 2303 	umull	r2, r3, r2, r3
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007596:	441e      	add	r6, r3
 8007598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800759a:	4618      	mov	r0, r3
 800759c:	f04f 0100 	mov.w	r1, #0
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	1894      	adds	r4, r2, r2
 80075a6:	603c      	str	r4, [r7, #0]
 80075a8:	415b      	adcs	r3, r3
 80075aa:	607b      	str	r3, [r7, #4]
 80075ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b0:	1812      	adds	r2, r2, r0
 80075b2:	eb41 0303 	adc.w	r3, r1, r3
 80075b6:	f04f 0400 	mov.w	r4, #0
 80075ba:	f04f 0500 	mov.w	r5, #0
 80075be:	00dd      	lsls	r5, r3, #3
 80075c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075c4:	00d4      	lsls	r4, r2, #3
 80075c6:	4622      	mov	r2, r4
 80075c8:	462b      	mov	r3, r5
 80075ca:	eb12 0a00 	adds.w	sl, r2, r0
 80075ce:	eb43 0b01 	adc.w	fp, r3, r1
 80075d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f04f 0100 	mov.w	r1, #0
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	f04f 0300 	mov.w	r3, #0
 80075e4:	008b      	lsls	r3, r1, #2
 80075e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075ea:	0082      	lsls	r2, r0, #2
 80075ec:	4650      	mov	r0, sl
 80075ee:	4659      	mov	r1, fp
 80075f0:	f7f9 fc4a 	bl	8000e88 <__aeabi_uldivmod>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4b0e      	ldr	r3, [pc, #56]	; (8007634 <UART_SetConfig+0x38c>)
 80075fa:	fba3 1302 	umull	r1, r3, r3, r2
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	2164      	movs	r1, #100	; 0x64
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	3332      	adds	r3, #50	; 0x32
 800760c:	4a09      	ldr	r2, [pc, #36]	; (8007634 <UART_SetConfig+0x38c>)
 800760e:	fba2 2303 	umull	r2, r3, r2, r3
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	f003 020f 	and.w	r2, r3, #15
 8007618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4432      	add	r2, r6
 800761e:	609a      	str	r2, [r3, #8]
}
 8007620:	bf00      	nop
 8007622:	377c      	adds	r7, #124	; 0x7c
 8007624:	46bd      	mov	sp, r7
 8007626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762a:	bf00      	nop
 800762c:	40011000 	.word	0x40011000
 8007630:	40011400 	.word	0x40011400
 8007634:	51eb851f 	.word	0x51eb851f

08007638 <__errno>:
 8007638:	4b01      	ldr	r3, [pc, #4]	; (8007640 <__errno+0x8>)
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	20000034 	.word	0x20000034

08007644 <__libc_init_array>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	4d0d      	ldr	r5, [pc, #52]	; (800767c <__libc_init_array+0x38>)
 8007648:	4c0d      	ldr	r4, [pc, #52]	; (8007680 <__libc_init_array+0x3c>)
 800764a:	1b64      	subs	r4, r4, r5
 800764c:	10a4      	asrs	r4, r4, #2
 800764e:	2600      	movs	r6, #0
 8007650:	42a6      	cmp	r6, r4
 8007652:	d109      	bne.n	8007668 <__libc_init_array+0x24>
 8007654:	4d0b      	ldr	r5, [pc, #44]	; (8007684 <__libc_init_array+0x40>)
 8007656:	4c0c      	ldr	r4, [pc, #48]	; (8007688 <__libc_init_array+0x44>)
 8007658:	f001 fc84 	bl	8008f64 <_init>
 800765c:	1b64      	subs	r4, r4, r5
 800765e:	10a4      	asrs	r4, r4, #2
 8007660:	2600      	movs	r6, #0
 8007662:	42a6      	cmp	r6, r4
 8007664:	d105      	bne.n	8007672 <__libc_init_array+0x2e>
 8007666:	bd70      	pop	{r4, r5, r6, pc}
 8007668:	f855 3b04 	ldr.w	r3, [r5], #4
 800766c:	4798      	blx	r3
 800766e:	3601      	adds	r6, #1
 8007670:	e7ee      	b.n	8007650 <__libc_init_array+0xc>
 8007672:	f855 3b04 	ldr.w	r3, [r5], #4
 8007676:	4798      	blx	r3
 8007678:	3601      	adds	r6, #1
 800767a:	e7f2      	b.n	8007662 <__libc_init_array+0x1e>
 800767c:	08009370 	.word	0x08009370
 8007680:	08009370 	.word	0x08009370
 8007684:	08009370 	.word	0x08009370
 8007688:	08009374 	.word	0x08009374

0800768c <memset>:
 800768c:	4402      	add	r2, r0
 800768e:	4603      	mov	r3, r0
 8007690:	4293      	cmp	r3, r2
 8007692:	d100      	bne.n	8007696 <memset+0xa>
 8007694:	4770      	bx	lr
 8007696:	f803 1b01 	strb.w	r1, [r3], #1
 800769a:	e7f9      	b.n	8007690 <memset+0x4>

0800769c <siprintf>:
 800769c:	b40e      	push	{r1, r2, r3}
 800769e:	b500      	push	{lr}
 80076a0:	b09c      	sub	sp, #112	; 0x70
 80076a2:	ab1d      	add	r3, sp, #116	; 0x74
 80076a4:	9002      	str	r0, [sp, #8]
 80076a6:	9006      	str	r0, [sp, #24]
 80076a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076ac:	4809      	ldr	r0, [pc, #36]	; (80076d4 <siprintf+0x38>)
 80076ae:	9107      	str	r1, [sp, #28]
 80076b0:	9104      	str	r1, [sp, #16]
 80076b2:	4909      	ldr	r1, [pc, #36]	; (80076d8 <siprintf+0x3c>)
 80076b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b8:	9105      	str	r1, [sp, #20]
 80076ba:	6800      	ldr	r0, [r0, #0]
 80076bc:	9301      	str	r3, [sp, #4]
 80076be:	a902      	add	r1, sp, #8
 80076c0:	f000 f868 	bl	8007794 <_svfiprintf_r>
 80076c4:	9b02      	ldr	r3, [sp, #8]
 80076c6:	2200      	movs	r2, #0
 80076c8:	701a      	strb	r2, [r3, #0]
 80076ca:	b01c      	add	sp, #112	; 0x70
 80076cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80076d0:	b003      	add	sp, #12
 80076d2:	4770      	bx	lr
 80076d4:	20000034 	.word	0x20000034
 80076d8:	ffff0208 	.word	0xffff0208

080076dc <__ssputs_r>:
 80076dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e0:	688e      	ldr	r6, [r1, #8]
 80076e2:	429e      	cmp	r6, r3
 80076e4:	4682      	mov	sl, r0
 80076e6:	460c      	mov	r4, r1
 80076e8:	4690      	mov	r8, r2
 80076ea:	461f      	mov	r7, r3
 80076ec:	d838      	bhi.n	8007760 <__ssputs_r+0x84>
 80076ee:	898a      	ldrh	r2, [r1, #12]
 80076f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076f4:	d032      	beq.n	800775c <__ssputs_r+0x80>
 80076f6:	6825      	ldr	r5, [r4, #0]
 80076f8:	6909      	ldr	r1, [r1, #16]
 80076fa:	eba5 0901 	sub.w	r9, r5, r1
 80076fe:	6965      	ldr	r5, [r4, #20]
 8007700:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007704:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007708:	3301      	adds	r3, #1
 800770a:	444b      	add	r3, r9
 800770c:	106d      	asrs	r5, r5, #1
 800770e:	429d      	cmp	r5, r3
 8007710:	bf38      	it	cc
 8007712:	461d      	movcc	r5, r3
 8007714:	0553      	lsls	r3, r2, #21
 8007716:	d531      	bpl.n	800777c <__ssputs_r+0xa0>
 8007718:	4629      	mov	r1, r5
 800771a:	f000 fb47 	bl	8007dac <_malloc_r>
 800771e:	4606      	mov	r6, r0
 8007720:	b950      	cbnz	r0, 8007738 <__ssputs_r+0x5c>
 8007722:	230c      	movs	r3, #12
 8007724:	f8ca 3000 	str.w	r3, [sl]
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800772e:	81a3      	strh	r3, [r4, #12]
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007738:	6921      	ldr	r1, [r4, #16]
 800773a:	464a      	mov	r2, r9
 800773c:	f000 fabe 	bl	8007cbc <memcpy>
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774a:	81a3      	strh	r3, [r4, #12]
 800774c:	6126      	str	r6, [r4, #16]
 800774e:	6165      	str	r5, [r4, #20]
 8007750:	444e      	add	r6, r9
 8007752:	eba5 0509 	sub.w	r5, r5, r9
 8007756:	6026      	str	r6, [r4, #0]
 8007758:	60a5      	str	r5, [r4, #8]
 800775a:	463e      	mov	r6, r7
 800775c:	42be      	cmp	r6, r7
 800775e:	d900      	bls.n	8007762 <__ssputs_r+0x86>
 8007760:	463e      	mov	r6, r7
 8007762:	4632      	mov	r2, r6
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	4641      	mov	r1, r8
 8007768:	f000 fab6 	bl	8007cd8 <memmove>
 800776c:	68a3      	ldr	r3, [r4, #8]
 800776e:	6822      	ldr	r2, [r4, #0]
 8007770:	1b9b      	subs	r3, r3, r6
 8007772:	4432      	add	r2, r6
 8007774:	60a3      	str	r3, [r4, #8]
 8007776:	6022      	str	r2, [r4, #0]
 8007778:	2000      	movs	r0, #0
 800777a:	e7db      	b.n	8007734 <__ssputs_r+0x58>
 800777c:	462a      	mov	r2, r5
 800777e:	f000 fb6f 	bl	8007e60 <_realloc_r>
 8007782:	4606      	mov	r6, r0
 8007784:	2800      	cmp	r0, #0
 8007786:	d1e1      	bne.n	800774c <__ssputs_r+0x70>
 8007788:	6921      	ldr	r1, [r4, #16]
 800778a:	4650      	mov	r0, sl
 800778c:	f000 fabe 	bl	8007d0c <_free_r>
 8007790:	e7c7      	b.n	8007722 <__ssputs_r+0x46>
	...

08007794 <_svfiprintf_r>:
 8007794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007798:	4698      	mov	r8, r3
 800779a:	898b      	ldrh	r3, [r1, #12]
 800779c:	061b      	lsls	r3, r3, #24
 800779e:	b09d      	sub	sp, #116	; 0x74
 80077a0:	4607      	mov	r7, r0
 80077a2:	460d      	mov	r5, r1
 80077a4:	4614      	mov	r4, r2
 80077a6:	d50e      	bpl.n	80077c6 <_svfiprintf_r+0x32>
 80077a8:	690b      	ldr	r3, [r1, #16]
 80077aa:	b963      	cbnz	r3, 80077c6 <_svfiprintf_r+0x32>
 80077ac:	2140      	movs	r1, #64	; 0x40
 80077ae:	f000 fafd 	bl	8007dac <_malloc_r>
 80077b2:	6028      	str	r0, [r5, #0]
 80077b4:	6128      	str	r0, [r5, #16]
 80077b6:	b920      	cbnz	r0, 80077c2 <_svfiprintf_r+0x2e>
 80077b8:	230c      	movs	r3, #12
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295
 80077c0:	e0d1      	b.n	8007966 <_svfiprintf_r+0x1d2>
 80077c2:	2340      	movs	r3, #64	; 0x40
 80077c4:	616b      	str	r3, [r5, #20]
 80077c6:	2300      	movs	r3, #0
 80077c8:	9309      	str	r3, [sp, #36]	; 0x24
 80077ca:	2320      	movs	r3, #32
 80077cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80077d4:	2330      	movs	r3, #48	; 0x30
 80077d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007980 <_svfiprintf_r+0x1ec>
 80077da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077de:	f04f 0901 	mov.w	r9, #1
 80077e2:	4623      	mov	r3, r4
 80077e4:	469a      	mov	sl, r3
 80077e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077ea:	b10a      	cbz	r2, 80077f0 <_svfiprintf_r+0x5c>
 80077ec:	2a25      	cmp	r2, #37	; 0x25
 80077ee:	d1f9      	bne.n	80077e4 <_svfiprintf_r+0x50>
 80077f0:	ebba 0b04 	subs.w	fp, sl, r4
 80077f4:	d00b      	beq.n	800780e <_svfiprintf_r+0x7a>
 80077f6:	465b      	mov	r3, fp
 80077f8:	4622      	mov	r2, r4
 80077fa:	4629      	mov	r1, r5
 80077fc:	4638      	mov	r0, r7
 80077fe:	f7ff ff6d 	bl	80076dc <__ssputs_r>
 8007802:	3001      	adds	r0, #1
 8007804:	f000 80aa 	beq.w	800795c <_svfiprintf_r+0x1c8>
 8007808:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800780a:	445a      	add	r2, fp
 800780c:	9209      	str	r2, [sp, #36]	; 0x24
 800780e:	f89a 3000 	ldrb.w	r3, [sl]
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 80a2 	beq.w	800795c <_svfiprintf_r+0x1c8>
 8007818:	2300      	movs	r3, #0
 800781a:	f04f 32ff 	mov.w	r2, #4294967295
 800781e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007822:	f10a 0a01 	add.w	sl, sl, #1
 8007826:	9304      	str	r3, [sp, #16]
 8007828:	9307      	str	r3, [sp, #28]
 800782a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800782e:	931a      	str	r3, [sp, #104]	; 0x68
 8007830:	4654      	mov	r4, sl
 8007832:	2205      	movs	r2, #5
 8007834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007838:	4851      	ldr	r0, [pc, #324]	; (8007980 <_svfiprintf_r+0x1ec>)
 800783a:	f7f8 fcd9 	bl	80001f0 <memchr>
 800783e:	9a04      	ldr	r2, [sp, #16]
 8007840:	b9d8      	cbnz	r0, 800787a <_svfiprintf_r+0xe6>
 8007842:	06d0      	lsls	r0, r2, #27
 8007844:	bf44      	itt	mi
 8007846:	2320      	movmi	r3, #32
 8007848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800784c:	0711      	lsls	r1, r2, #28
 800784e:	bf44      	itt	mi
 8007850:	232b      	movmi	r3, #43	; 0x2b
 8007852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007856:	f89a 3000 	ldrb.w	r3, [sl]
 800785a:	2b2a      	cmp	r3, #42	; 0x2a
 800785c:	d015      	beq.n	800788a <_svfiprintf_r+0xf6>
 800785e:	9a07      	ldr	r2, [sp, #28]
 8007860:	4654      	mov	r4, sl
 8007862:	2000      	movs	r0, #0
 8007864:	f04f 0c0a 	mov.w	ip, #10
 8007868:	4621      	mov	r1, r4
 800786a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800786e:	3b30      	subs	r3, #48	; 0x30
 8007870:	2b09      	cmp	r3, #9
 8007872:	d94e      	bls.n	8007912 <_svfiprintf_r+0x17e>
 8007874:	b1b0      	cbz	r0, 80078a4 <_svfiprintf_r+0x110>
 8007876:	9207      	str	r2, [sp, #28]
 8007878:	e014      	b.n	80078a4 <_svfiprintf_r+0x110>
 800787a:	eba0 0308 	sub.w	r3, r0, r8
 800787e:	fa09 f303 	lsl.w	r3, r9, r3
 8007882:	4313      	orrs	r3, r2
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	46a2      	mov	sl, r4
 8007888:	e7d2      	b.n	8007830 <_svfiprintf_r+0x9c>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	1d19      	adds	r1, r3, #4
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	9103      	str	r1, [sp, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	bfbb      	ittet	lt
 8007896:	425b      	neglt	r3, r3
 8007898:	f042 0202 	orrlt.w	r2, r2, #2
 800789c:	9307      	strge	r3, [sp, #28]
 800789e:	9307      	strlt	r3, [sp, #28]
 80078a0:	bfb8      	it	lt
 80078a2:	9204      	strlt	r2, [sp, #16]
 80078a4:	7823      	ldrb	r3, [r4, #0]
 80078a6:	2b2e      	cmp	r3, #46	; 0x2e
 80078a8:	d10c      	bne.n	80078c4 <_svfiprintf_r+0x130>
 80078aa:	7863      	ldrb	r3, [r4, #1]
 80078ac:	2b2a      	cmp	r3, #42	; 0x2a
 80078ae:	d135      	bne.n	800791c <_svfiprintf_r+0x188>
 80078b0:	9b03      	ldr	r3, [sp, #12]
 80078b2:	1d1a      	adds	r2, r3, #4
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	9203      	str	r2, [sp, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	bfb8      	it	lt
 80078bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80078c0:	3402      	adds	r4, #2
 80078c2:	9305      	str	r3, [sp, #20]
 80078c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007990 <_svfiprintf_r+0x1fc>
 80078c8:	7821      	ldrb	r1, [r4, #0]
 80078ca:	2203      	movs	r2, #3
 80078cc:	4650      	mov	r0, sl
 80078ce:	f7f8 fc8f 	bl	80001f0 <memchr>
 80078d2:	b140      	cbz	r0, 80078e6 <_svfiprintf_r+0x152>
 80078d4:	2340      	movs	r3, #64	; 0x40
 80078d6:	eba0 000a 	sub.w	r0, r0, sl
 80078da:	fa03 f000 	lsl.w	r0, r3, r0
 80078de:	9b04      	ldr	r3, [sp, #16]
 80078e0:	4303      	orrs	r3, r0
 80078e2:	3401      	adds	r4, #1
 80078e4:	9304      	str	r3, [sp, #16]
 80078e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ea:	4826      	ldr	r0, [pc, #152]	; (8007984 <_svfiprintf_r+0x1f0>)
 80078ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078f0:	2206      	movs	r2, #6
 80078f2:	f7f8 fc7d 	bl	80001f0 <memchr>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d038      	beq.n	800796c <_svfiprintf_r+0x1d8>
 80078fa:	4b23      	ldr	r3, [pc, #140]	; (8007988 <_svfiprintf_r+0x1f4>)
 80078fc:	bb1b      	cbnz	r3, 8007946 <_svfiprintf_r+0x1b2>
 80078fe:	9b03      	ldr	r3, [sp, #12]
 8007900:	3307      	adds	r3, #7
 8007902:	f023 0307 	bic.w	r3, r3, #7
 8007906:	3308      	adds	r3, #8
 8007908:	9303      	str	r3, [sp, #12]
 800790a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790c:	4433      	add	r3, r6
 800790e:	9309      	str	r3, [sp, #36]	; 0x24
 8007910:	e767      	b.n	80077e2 <_svfiprintf_r+0x4e>
 8007912:	fb0c 3202 	mla	r2, ip, r2, r3
 8007916:	460c      	mov	r4, r1
 8007918:	2001      	movs	r0, #1
 800791a:	e7a5      	b.n	8007868 <_svfiprintf_r+0xd4>
 800791c:	2300      	movs	r3, #0
 800791e:	3401      	adds	r4, #1
 8007920:	9305      	str	r3, [sp, #20]
 8007922:	4619      	mov	r1, r3
 8007924:	f04f 0c0a 	mov.w	ip, #10
 8007928:	4620      	mov	r0, r4
 800792a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800792e:	3a30      	subs	r2, #48	; 0x30
 8007930:	2a09      	cmp	r2, #9
 8007932:	d903      	bls.n	800793c <_svfiprintf_r+0x1a8>
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0c5      	beq.n	80078c4 <_svfiprintf_r+0x130>
 8007938:	9105      	str	r1, [sp, #20]
 800793a:	e7c3      	b.n	80078c4 <_svfiprintf_r+0x130>
 800793c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007940:	4604      	mov	r4, r0
 8007942:	2301      	movs	r3, #1
 8007944:	e7f0      	b.n	8007928 <_svfiprintf_r+0x194>
 8007946:	ab03      	add	r3, sp, #12
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	462a      	mov	r2, r5
 800794c:	4b0f      	ldr	r3, [pc, #60]	; (800798c <_svfiprintf_r+0x1f8>)
 800794e:	a904      	add	r1, sp, #16
 8007950:	4638      	mov	r0, r7
 8007952:	f3af 8000 	nop.w
 8007956:	1c42      	adds	r2, r0, #1
 8007958:	4606      	mov	r6, r0
 800795a:	d1d6      	bne.n	800790a <_svfiprintf_r+0x176>
 800795c:	89ab      	ldrh	r3, [r5, #12]
 800795e:	065b      	lsls	r3, r3, #25
 8007960:	f53f af2c 	bmi.w	80077bc <_svfiprintf_r+0x28>
 8007964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007966:	b01d      	add	sp, #116	; 0x74
 8007968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796c:	ab03      	add	r3, sp, #12
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	462a      	mov	r2, r5
 8007972:	4b06      	ldr	r3, [pc, #24]	; (800798c <_svfiprintf_r+0x1f8>)
 8007974:	a904      	add	r1, sp, #16
 8007976:	4638      	mov	r0, r7
 8007978:	f000 f87a 	bl	8007a70 <_printf_i>
 800797c:	e7eb      	b.n	8007956 <_svfiprintf_r+0x1c2>
 800797e:	bf00      	nop
 8007980:	0800915c 	.word	0x0800915c
 8007984:	08009166 	.word	0x08009166
 8007988:	00000000 	.word	0x00000000
 800798c:	080076dd 	.word	0x080076dd
 8007990:	08009162 	.word	0x08009162

08007994 <_printf_common>:
 8007994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007998:	4616      	mov	r6, r2
 800799a:	4699      	mov	r9, r3
 800799c:	688a      	ldr	r2, [r1, #8]
 800799e:	690b      	ldr	r3, [r1, #16]
 80079a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079a4:	4293      	cmp	r3, r2
 80079a6:	bfb8      	it	lt
 80079a8:	4613      	movlt	r3, r2
 80079aa:	6033      	str	r3, [r6, #0]
 80079ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079b0:	4607      	mov	r7, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	b10a      	cbz	r2, 80079ba <_printf_common+0x26>
 80079b6:	3301      	adds	r3, #1
 80079b8:	6033      	str	r3, [r6, #0]
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	0699      	lsls	r1, r3, #26
 80079be:	bf42      	ittt	mi
 80079c0:	6833      	ldrmi	r3, [r6, #0]
 80079c2:	3302      	addmi	r3, #2
 80079c4:	6033      	strmi	r3, [r6, #0]
 80079c6:	6825      	ldr	r5, [r4, #0]
 80079c8:	f015 0506 	ands.w	r5, r5, #6
 80079cc:	d106      	bne.n	80079dc <_printf_common+0x48>
 80079ce:	f104 0a19 	add.w	sl, r4, #25
 80079d2:	68e3      	ldr	r3, [r4, #12]
 80079d4:	6832      	ldr	r2, [r6, #0]
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	42ab      	cmp	r3, r5
 80079da:	dc26      	bgt.n	8007a2a <_printf_common+0x96>
 80079dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079e0:	1e13      	subs	r3, r2, #0
 80079e2:	6822      	ldr	r2, [r4, #0]
 80079e4:	bf18      	it	ne
 80079e6:	2301      	movne	r3, #1
 80079e8:	0692      	lsls	r2, r2, #26
 80079ea:	d42b      	bmi.n	8007a44 <_printf_common+0xb0>
 80079ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079f0:	4649      	mov	r1, r9
 80079f2:	4638      	mov	r0, r7
 80079f4:	47c0      	blx	r8
 80079f6:	3001      	adds	r0, #1
 80079f8:	d01e      	beq.n	8007a38 <_printf_common+0xa4>
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	68e5      	ldr	r5, [r4, #12]
 80079fe:	6832      	ldr	r2, [r6, #0]
 8007a00:	f003 0306 	and.w	r3, r3, #6
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	bf08      	it	eq
 8007a08:	1aad      	subeq	r5, r5, r2
 8007a0a:	68a3      	ldr	r3, [r4, #8]
 8007a0c:	6922      	ldr	r2, [r4, #16]
 8007a0e:	bf0c      	ite	eq
 8007a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a14:	2500      	movne	r5, #0
 8007a16:	4293      	cmp	r3, r2
 8007a18:	bfc4      	itt	gt
 8007a1a:	1a9b      	subgt	r3, r3, r2
 8007a1c:	18ed      	addgt	r5, r5, r3
 8007a1e:	2600      	movs	r6, #0
 8007a20:	341a      	adds	r4, #26
 8007a22:	42b5      	cmp	r5, r6
 8007a24:	d11a      	bne.n	8007a5c <_printf_common+0xc8>
 8007a26:	2000      	movs	r0, #0
 8007a28:	e008      	b.n	8007a3c <_printf_common+0xa8>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4652      	mov	r2, sl
 8007a2e:	4649      	mov	r1, r9
 8007a30:	4638      	mov	r0, r7
 8007a32:	47c0      	blx	r8
 8007a34:	3001      	adds	r0, #1
 8007a36:	d103      	bne.n	8007a40 <_printf_common+0xac>
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a40:	3501      	adds	r5, #1
 8007a42:	e7c6      	b.n	80079d2 <_printf_common+0x3e>
 8007a44:	18e1      	adds	r1, r4, r3
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	2030      	movs	r0, #48	; 0x30
 8007a4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a4e:	4422      	add	r2, r4
 8007a50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a58:	3302      	adds	r3, #2
 8007a5a:	e7c7      	b.n	80079ec <_printf_common+0x58>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4622      	mov	r2, r4
 8007a60:	4649      	mov	r1, r9
 8007a62:	4638      	mov	r0, r7
 8007a64:	47c0      	blx	r8
 8007a66:	3001      	adds	r0, #1
 8007a68:	d0e6      	beq.n	8007a38 <_printf_common+0xa4>
 8007a6a:	3601      	adds	r6, #1
 8007a6c:	e7d9      	b.n	8007a22 <_printf_common+0x8e>
	...

08007a70 <_printf_i>:
 8007a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a74:	460c      	mov	r4, r1
 8007a76:	4691      	mov	r9, r2
 8007a78:	7e27      	ldrb	r7, [r4, #24]
 8007a7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a7c:	2f78      	cmp	r7, #120	; 0x78
 8007a7e:	4680      	mov	r8, r0
 8007a80:	469a      	mov	sl, r3
 8007a82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a86:	d807      	bhi.n	8007a98 <_printf_i+0x28>
 8007a88:	2f62      	cmp	r7, #98	; 0x62
 8007a8a:	d80a      	bhi.n	8007aa2 <_printf_i+0x32>
 8007a8c:	2f00      	cmp	r7, #0
 8007a8e:	f000 80d8 	beq.w	8007c42 <_printf_i+0x1d2>
 8007a92:	2f58      	cmp	r7, #88	; 0x58
 8007a94:	f000 80a3 	beq.w	8007bde <_printf_i+0x16e>
 8007a98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007aa0:	e03a      	b.n	8007b18 <_printf_i+0xa8>
 8007aa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aa6:	2b15      	cmp	r3, #21
 8007aa8:	d8f6      	bhi.n	8007a98 <_printf_i+0x28>
 8007aaa:	a001      	add	r0, pc, #4	; (adr r0, 8007ab0 <_printf_i+0x40>)
 8007aac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ab0:	08007b09 	.word	0x08007b09
 8007ab4:	08007b1d 	.word	0x08007b1d
 8007ab8:	08007a99 	.word	0x08007a99
 8007abc:	08007a99 	.word	0x08007a99
 8007ac0:	08007a99 	.word	0x08007a99
 8007ac4:	08007a99 	.word	0x08007a99
 8007ac8:	08007b1d 	.word	0x08007b1d
 8007acc:	08007a99 	.word	0x08007a99
 8007ad0:	08007a99 	.word	0x08007a99
 8007ad4:	08007a99 	.word	0x08007a99
 8007ad8:	08007a99 	.word	0x08007a99
 8007adc:	08007c29 	.word	0x08007c29
 8007ae0:	08007b4d 	.word	0x08007b4d
 8007ae4:	08007c0b 	.word	0x08007c0b
 8007ae8:	08007a99 	.word	0x08007a99
 8007aec:	08007a99 	.word	0x08007a99
 8007af0:	08007c4b 	.word	0x08007c4b
 8007af4:	08007a99 	.word	0x08007a99
 8007af8:	08007b4d 	.word	0x08007b4d
 8007afc:	08007a99 	.word	0x08007a99
 8007b00:	08007a99 	.word	0x08007a99
 8007b04:	08007c13 	.word	0x08007c13
 8007b08:	680b      	ldr	r3, [r1, #0]
 8007b0a:	1d1a      	adds	r2, r3, #4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	600a      	str	r2, [r1, #0]
 8007b10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e0a3      	b.n	8007c64 <_printf_i+0x1f4>
 8007b1c:	6825      	ldr	r5, [r4, #0]
 8007b1e:	6808      	ldr	r0, [r1, #0]
 8007b20:	062e      	lsls	r6, r5, #24
 8007b22:	f100 0304 	add.w	r3, r0, #4
 8007b26:	d50a      	bpl.n	8007b3e <_printf_i+0xce>
 8007b28:	6805      	ldr	r5, [r0, #0]
 8007b2a:	600b      	str	r3, [r1, #0]
 8007b2c:	2d00      	cmp	r5, #0
 8007b2e:	da03      	bge.n	8007b38 <_printf_i+0xc8>
 8007b30:	232d      	movs	r3, #45	; 0x2d
 8007b32:	426d      	negs	r5, r5
 8007b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b38:	485e      	ldr	r0, [pc, #376]	; (8007cb4 <_printf_i+0x244>)
 8007b3a:	230a      	movs	r3, #10
 8007b3c:	e019      	b.n	8007b72 <_printf_i+0x102>
 8007b3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b42:	6805      	ldr	r5, [r0, #0]
 8007b44:	600b      	str	r3, [r1, #0]
 8007b46:	bf18      	it	ne
 8007b48:	b22d      	sxthne	r5, r5
 8007b4a:	e7ef      	b.n	8007b2c <_printf_i+0xbc>
 8007b4c:	680b      	ldr	r3, [r1, #0]
 8007b4e:	6825      	ldr	r5, [r4, #0]
 8007b50:	1d18      	adds	r0, r3, #4
 8007b52:	6008      	str	r0, [r1, #0]
 8007b54:	0628      	lsls	r0, r5, #24
 8007b56:	d501      	bpl.n	8007b5c <_printf_i+0xec>
 8007b58:	681d      	ldr	r5, [r3, #0]
 8007b5a:	e002      	b.n	8007b62 <_printf_i+0xf2>
 8007b5c:	0669      	lsls	r1, r5, #25
 8007b5e:	d5fb      	bpl.n	8007b58 <_printf_i+0xe8>
 8007b60:	881d      	ldrh	r5, [r3, #0]
 8007b62:	4854      	ldr	r0, [pc, #336]	; (8007cb4 <_printf_i+0x244>)
 8007b64:	2f6f      	cmp	r7, #111	; 0x6f
 8007b66:	bf0c      	ite	eq
 8007b68:	2308      	moveq	r3, #8
 8007b6a:	230a      	movne	r3, #10
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b72:	6866      	ldr	r6, [r4, #4]
 8007b74:	60a6      	str	r6, [r4, #8]
 8007b76:	2e00      	cmp	r6, #0
 8007b78:	bfa2      	ittt	ge
 8007b7a:	6821      	ldrge	r1, [r4, #0]
 8007b7c:	f021 0104 	bicge.w	r1, r1, #4
 8007b80:	6021      	strge	r1, [r4, #0]
 8007b82:	b90d      	cbnz	r5, 8007b88 <_printf_i+0x118>
 8007b84:	2e00      	cmp	r6, #0
 8007b86:	d04d      	beq.n	8007c24 <_printf_i+0x1b4>
 8007b88:	4616      	mov	r6, r2
 8007b8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b8e:	fb03 5711 	mls	r7, r3, r1, r5
 8007b92:	5dc7      	ldrb	r7, [r0, r7]
 8007b94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b98:	462f      	mov	r7, r5
 8007b9a:	42bb      	cmp	r3, r7
 8007b9c:	460d      	mov	r5, r1
 8007b9e:	d9f4      	bls.n	8007b8a <_printf_i+0x11a>
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d10b      	bne.n	8007bbc <_printf_i+0x14c>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	07df      	lsls	r7, r3, #31
 8007ba8:	d508      	bpl.n	8007bbc <_printf_i+0x14c>
 8007baa:	6923      	ldr	r3, [r4, #16]
 8007bac:	6861      	ldr	r1, [r4, #4]
 8007bae:	4299      	cmp	r1, r3
 8007bb0:	bfde      	ittt	le
 8007bb2:	2330      	movle	r3, #48	; 0x30
 8007bb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bbc:	1b92      	subs	r2, r2, r6
 8007bbe:	6122      	str	r2, [r4, #16]
 8007bc0:	f8cd a000 	str.w	sl, [sp]
 8007bc4:	464b      	mov	r3, r9
 8007bc6:	aa03      	add	r2, sp, #12
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4640      	mov	r0, r8
 8007bcc:	f7ff fee2 	bl	8007994 <_printf_common>
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d14c      	bne.n	8007c6e <_printf_i+0x1fe>
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	b004      	add	sp, #16
 8007bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bde:	4835      	ldr	r0, [pc, #212]	; (8007cb4 <_printf_i+0x244>)
 8007be0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	680e      	ldr	r6, [r1, #0]
 8007be8:	061f      	lsls	r7, r3, #24
 8007bea:	f856 5b04 	ldr.w	r5, [r6], #4
 8007bee:	600e      	str	r6, [r1, #0]
 8007bf0:	d514      	bpl.n	8007c1c <_printf_i+0x1ac>
 8007bf2:	07d9      	lsls	r1, r3, #31
 8007bf4:	bf44      	itt	mi
 8007bf6:	f043 0320 	orrmi.w	r3, r3, #32
 8007bfa:	6023      	strmi	r3, [r4, #0]
 8007bfc:	b91d      	cbnz	r5, 8007c06 <_printf_i+0x196>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	f023 0320 	bic.w	r3, r3, #32
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	2310      	movs	r3, #16
 8007c08:	e7b0      	b.n	8007b6c <_printf_i+0xfc>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	f043 0320 	orr.w	r3, r3, #32
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	2378      	movs	r3, #120	; 0x78
 8007c14:	4828      	ldr	r0, [pc, #160]	; (8007cb8 <_printf_i+0x248>)
 8007c16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c1a:	e7e3      	b.n	8007be4 <_printf_i+0x174>
 8007c1c:	065e      	lsls	r6, r3, #25
 8007c1e:	bf48      	it	mi
 8007c20:	b2ad      	uxthmi	r5, r5
 8007c22:	e7e6      	b.n	8007bf2 <_printf_i+0x182>
 8007c24:	4616      	mov	r6, r2
 8007c26:	e7bb      	b.n	8007ba0 <_printf_i+0x130>
 8007c28:	680b      	ldr	r3, [r1, #0]
 8007c2a:	6826      	ldr	r6, [r4, #0]
 8007c2c:	6960      	ldr	r0, [r4, #20]
 8007c2e:	1d1d      	adds	r5, r3, #4
 8007c30:	600d      	str	r5, [r1, #0]
 8007c32:	0635      	lsls	r5, r6, #24
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	d501      	bpl.n	8007c3c <_printf_i+0x1cc>
 8007c38:	6018      	str	r0, [r3, #0]
 8007c3a:	e002      	b.n	8007c42 <_printf_i+0x1d2>
 8007c3c:	0671      	lsls	r1, r6, #25
 8007c3e:	d5fb      	bpl.n	8007c38 <_printf_i+0x1c8>
 8007c40:	8018      	strh	r0, [r3, #0]
 8007c42:	2300      	movs	r3, #0
 8007c44:	6123      	str	r3, [r4, #16]
 8007c46:	4616      	mov	r6, r2
 8007c48:	e7ba      	b.n	8007bc0 <_printf_i+0x150>
 8007c4a:	680b      	ldr	r3, [r1, #0]
 8007c4c:	1d1a      	adds	r2, r3, #4
 8007c4e:	600a      	str	r2, [r1, #0]
 8007c50:	681e      	ldr	r6, [r3, #0]
 8007c52:	6862      	ldr	r2, [r4, #4]
 8007c54:	2100      	movs	r1, #0
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7f8 faca 	bl	80001f0 <memchr>
 8007c5c:	b108      	cbz	r0, 8007c62 <_printf_i+0x1f2>
 8007c5e:	1b80      	subs	r0, r0, r6
 8007c60:	6060      	str	r0, [r4, #4]
 8007c62:	6863      	ldr	r3, [r4, #4]
 8007c64:	6123      	str	r3, [r4, #16]
 8007c66:	2300      	movs	r3, #0
 8007c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c6c:	e7a8      	b.n	8007bc0 <_printf_i+0x150>
 8007c6e:	6923      	ldr	r3, [r4, #16]
 8007c70:	4632      	mov	r2, r6
 8007c72:	4649      	mov	r1, r9
 8007c74:	4640      	mov	r0, r8
 8007c76:	47d0      	blx	sl
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d0ab      	beq.n	8007bd4 <_printf_i+0x164>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	079b      	lsls	r3, r3, #30
 8007c80:	d413      	bmi.n	8007caa <_printf_i+0x23a>
 8007c82:	68e0      	ldr	r0, [r4, #12]
 8007c84:	9b03      	ldr	r3, [sp, #12]
 8007c86:	4298      	cmp	r0, r3
 8007c88:	bfb8      	it	lt
 8007c8a:	4618      	movlt	r0, r3
 8007c8c:	e7a4      	b.n	8007bd8 <_printf_i+0x168>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	4632      	mov	r2, r6
 8007c92:	4649      	mov	r1, r9
 8007c94:	4640      	mov	r0, r8
 8007c96:	47d0      	blx	sl
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d09b      	beq.n	8007bd4 <_printf_i+0x164>
 8007c9c:	3501      	adds	r5, #1
 8007c9e:	68e3      	ldr	r3, [r4, #12]
 8007ca0:	9903      	ldr	r1, [sp, #12]
 8007ca2:	1a5b      	subs	r3, r3, r1
 8007ca4:	42ab      	cmp	r3, r5
 8007ca6:	dcf2      	bgt.n	8007c8e <_printf_i+0x21e>
 8007ca8:	e7eb      	b.n	8007c82 <_printf_i+0x212>
 8007caa:	2500      	movs	r5, #0
 8007cac:	f104 0619 	add.w	r6, r4, #25
 8007cb0:	e7f5      	b.n	8007c9e <_printf_i+0x22e>
 8007cb2:	bf00      	nop
 8007cb4:	0800916d 	.word	0x0800916d
 8007cb8:	0800917e 	.word	0x0800917e

08007cbc <memcpy>:
 8007cbc:	440a      	add	r2, r1
 8007cbe:	4291      	cmp	r1, r2
 8007cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cc4:	d100      	bne.n	8007cc8 <memcpy+0xc>
 8007cc6:	4770      	bx	lr
 8007cc8:	b510      	push	{r4, lr}
 8007cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cd2:	4291      	cmp	r1, r2
 8007cd4:	d1f9      	bne.n	8007cca <memcpy+0xe>
 8007cd6:	bd10      	pop	{r4, pc}

08007cd8 <memmove>:
 8007cd8:	4288      	cmp	r0, r1
 8007cda:	b510      	push	{r4, lr}
 8007cdc:	eb01 0402 	add.w	r4, r1, r2
 8007ce0:	d902      	bls.n	8007ce8 <memmove+0x10>
 8007ce2:	4284      	cmp	r4, r0
 8007ce4:	4623      	mov	r3, r4
 8007ce6:	d807      	bhi.n	8007cf8 <memmove+0x20>
 8007ce8:	1e43      	subs	r3, r0, #1
 8007cea:	42a1      	cmp	r1, r4
 8007cec:	d008      	beq.n	8007d00 <memmove+0x28>
 8007cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cf6:	e7f8      	b.n	8007cea <memmove+0x12>
 8007cf8:	4402      	add	r2, r0
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	428a      	cmp	r2, r1
 8007cfe:	d100      	bne.n	8007d02 <memmove+0x2a>
 8007d00:	bd10      	pop	{r4, pc}
 8007d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d0a:	e7f7      	b.n	8007cfc <memmove+0x24>

08007d0c <_free_r>:
 8007d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d0e:	2900      	cmp	r1, #0
 8007d10:	d048      	beq.n	8007da4 <_free_r+0x98>
 8007d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d16:	9001      	str	r0, [sp, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d1e:	bfb8      	it	lt
 8007d20:	18e4      	addlt	r4, r4, r3
 8007d22:	f000 f8d3 	bl	8007ecc <__malloc_lock>
 8007d26:	4a20      	ldr	r2, [pc, #128]	; (8007da8 <_free_r+0x9c>)
 8007d28:	9801      	ldr	r0, [sp, #4]
 8007d2a:	6813      	ldr	r3, [r2, #0]
 8007d2c:	4615      	mov	r5, r2
 8007d2e:	b933      	cbnz	r3, 8007d3e <_free_r+0x32>
 8007d30:	6063      	str	r3, [r4, #4]
 8007d32:	6014      	str	r4, [r2, #0]
 8007d34:	b003      	add	sp, #12
 8007d36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d3a:	f000 b8cd 	b.w	8007ed8 <__malloc_unlock>
 8007d3e:	42a3      	cmp	r3, r4
 8007d40:	d90b      	bls.n	8007d5a <_free_r+0x4e>
 8007d42:	6821      	ldr	r1, [r4, #0]
 8007d44:	1862      	adds	r2, r4, r1
 8007d46:	4293      	cmp	r3, r2
 8007d48:	bf04      	itt	eq
 8007d4a:	681a      	ldreq	r2, [r3, #0]
 8007d4c:	685b      	ldreq	r3, [r3, #4]
 8007d4e:	6063      	str	r3, [r4, #4]
 8007d50:	bf04      	itt	eq
 8007d52:	1852      	addeq	r2, r2, r1
 8007d54:	6022      	streq	r2, [r4, #0]
 8007d56:	602c      	str	r4, [r5, #0]
 8007d58:	e7ec      	b.n	8007d34 <_free_r+0x28>
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	b10b      	cbz	r3, 8007d64 <_free_r+0x58>
 8007d60:	42a3      	cmp	r3, r4
 8007d62:	d9fa      	bls.n	8007d5a <_free_r+0x4e>
 8007d64:	6811      	ldr	r1, [r2, #0]
 8007d66:	1855      	adds	r5, r2, r1
 8007d68:	42a5      	cmp	r5, r4
 8007d6a:	d10b      	bne.n	8007d84 <_free_r+0x78>
 8007d6c:	6824      	ldr	r4, [r4, #0]
 8007d6e:	4421      	add	r1, r4
 8007d70:	1854      	adds	r4, r2, r1
 8007d72:	42a3      	cmp	r3, r4
 8007d74:	6011      	str	r1, [r2, #0]
 8007d76:	d1dd      	bne.n	8007d34 <_free_r+0x28>
 8007d78:	681c      	ldr	r4, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	6053      	str	r3, [r2, #4]
 8007d7e:	4421      	add	r1, r4
 8007d80:	6011      	str	r1, [r2, #0]
 8007d82:	e7d7      	b.n	8007d34 <_free_r+0x28>
 8007d84:	d902      	bls.n	8007d8c <_free_r+0x80>
 8007d86:	230c      	movs	r3, #12
 8007d88:	6003      	str	r3, [r0, #0]
 8007d8a:	e7d3      	b.n	8007d34 <_free_r+0x28>
 8007d8c:	6825      	ldr	r5, [r4, #0]
 8007d8e:	1961      	adds	r1, r4, r5
 8007d90:	428b      	cmp	r3, r1
 8007d92:	bf04      	itt	eq
 8007d94:	6819      	ldreq	r1, [r3, #0]
 8007d96:	685b      	ldreq	r3, [r3, #4]
 8007d98:	6063      	str	r3, [r4, #4]
 8007d9a:	bf04      	itt	eq
 8007d9c:	1949      	addeq	r1, r1, r5
 8007d9e:	6021      	streq	r1, [r4, #0]
 8007da0:	6054      	str	r4, [r2, #4]
 8007da2:	e7c7      	b.n	8007d34 <_free_r+0x28>
 8007da4:	b003      	add	sp, #12
 8007da6:	bd30      	pop	{r4, r5, pc}
 8007da8:	20000138 	.word	0x20000138

08007dac <_malloc_r>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	1ccd      	adds	r5, r1, #3
 8007db0:	f025 0503 	bic.w	r5, r5, #3
 8007db4:	3508      	adds	r5, #8
 8007db6:	2d0c      	cmp	r5, #12
 8007db8:	bf38      	it	cc
 8007dba:	250c      	movcc	r5, #12
 8007dbc:	2d00      	cmp	r5, #0
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	db01      	blt.n	8007dc6 <_malloc_r+0x1a>
 8007dc2:	42a9      	cmp	r1, r5
 8007dc4:	d903      	bls.n	8007dce <_malloc_r+0x22>
 8007dc6:	230c      	movs	r3, #12
 8007dc8:	6033      	str	r3, [r6, #0]
 8007dca:	2000      	movs	r0, #0
 8007dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dce:	f000 f87d 	bl	8007ecc <__malloc_lock>
 8007dd2:	4921      	ldr	r1, [pc, #132]	; (8007e58 <_malloc_r+0xac>)
 8007dd4:	680a      	ldr	r2, [r1, #0]
 8007dd6:	4614      	mov	r4, r2
 8007dd8:	b99c      	cbnz	r4, 8007e02 <_malloc_r+0x56>
 8007dda:	4f20      	ldr	r7, [pc, #128]	; (8007e5c <_malloc_r+0xb0>)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	b923      	cbnz	r3, 8007dea <_malloc_r+0x3e>
 8007de0:	4621      	mov	r1, r4
 8007de2:	4630      	mov	r0, r6
 8007de4:	f000 f862 	bl	8007eac <_sbrk_r>
 8007de8:	6038      	str	r0, [r7, #0]
 8007dea:	4629      	mov	r1, r5
 8007dec:	4630      	mov	r0, r6
 8007dee:	f000 f85d 	bl	8007eac <_sbrk_r>
 8007df2:	1c43      	adds	r3, r0, #1
 8007df4:	d123      	bne.n	8007e3e <_malloc_r+0x92>
 8007df6:	230c      	movs	r3, #12
 8007df8:	6033      	str	r3, [r6, #0]
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f000 f86c 	bl	8007ed8 <__malloc_unlock>
 8007e00:	e7e3      	b.n	8007dca <_malloc_r+0x1e>
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	1b5b      	subs	r3, r3, r5
 8007e06:	d417      	bmi.n	8007e38 <_malloc_r+0x8c>
 8007e08:	2b0b      	cmp	r3, #11
 8007e0a:	d903      	bls.n	8007e14 <_malloc_r+0x68>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	441c      	add	r4, r3
 8007e10:	6025      	str	r5, [r4, #0]
 8007e12:	e004      	b.n	8007e1e <_malloc_r+0x72>
 8007e14:	6863      	ldr	r3, [r4, #4]
 8007e16:	42a2      	cmp	r2, r4
 8007e18:	bf0c      	ite	eq
 8007e1a:	600b      	streq	r3, [r1, #0]
 8007e1c:	6053      	strne	r3, [r2, #4]
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f000 f85a 	bl	8007ed8 <__malloc_unlock>
 8007e24:	f104 000b 	add.w	r0, r4, #11
 8007e28:	1d23      	adds	r3, r4, #4
 8007e2a:	f020 0007 	bic.w	r0, r0, #7
 8007e2e:	1ac2      	subs	r2, r0, r3
 8007e30:	d0cc      	beq.n	8007dcc <_malloc_r+0x20>
 8007e32:	1a1b      	subs	r3, r3, r0
 8007e34:	50a3      	str	r3, [r4, r2]
 8007e36:	e7c9      	b.n	8007dcc <_malloc_r+0x20>
 8007e38:	4622      	mov	r2, r4
 8007e3a:	6864      	ldr	r4, [r4, #4]
 8007e3c:	e7cc      	b.n	8007dd8 <_malloc_r+0x2c>
 8007e3e:	1cc4      	adds	r4, r0, #3
 8007e40:	f024 0403 	bic.w	r4, r4, #3
 8007e44:	42a0      	cmp	r0, r4
 8007e46:	d0e3      	beq.n	8007e10 <_malloc_r+0x64>
 8007e48:	1a21      	subs	r1, r4, r0
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f000 f82e 	bl	8007eac <_sbrk_r>
 8007e50:	3001      	adds	r0, #1
 8007e52:	d1dd      	bne.n	8007e10 <_malloc_r+0x64>
 8007e54:	e7cf      	b.n	8007df6 <_malloc_r+0x4a>
 8007e56:	bf00      	nop
 8007e58:	20000138 	.word	0x20000138
 8007e5c:	2000013c 	.word	0x2000013c

08007e60 <_realloc_r>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	4607      	mov	r7, r0
 8007e64:	4614      	mov	r4, r2
 8007e66:	460e      	mov	r6, r1
 8007e68:	b921      	cbnz	r1, 8007e74 <_realloc_r+0x14>
 8007e6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e6e:	4611      	mov	r1, r2
 8007e70:	f7ff bf9c 	b.w	8007dac <_malloc_r>
 8007e74:	b922      	cbnz	r2, 8007e80 <_realloc_r+0x20>
 8007e76:	f7ff ff49 	bl	8007d0c <_free_r>
 8007e7a:	4625      	mov	r5, r4
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e80:	f000 f830 	bl	8007ee4 <_malloc_usable_size_r>
 8007e84:	42a0      	cmp	r0, r4
 8007e86:	d20f      	bcs.n	8007ea8 <_realloc_r+0x48>
 8007e88:	4621      	mov	r1, r4
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	f7ff ff8e 	bl	8007dac <_malloc_r>
 8007e90:	4605      	mov	r5, r0
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d0f2      	beq.n	8007e7c <_realloc_r+0x1c>
 8007e96:	4631      	mov	r1, r6
 8007e98:	4622      	mov	r2, r4
 8007e9a:	f7ff ff0f 	bl	8007cbc <memcpy>
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f7ff ff33 	bl	8007d0c <_free_r>
 8007ea6:	e7e9      	b.n	8007e7c <_realloc_r+0x1c>
 8007ea8:	4635      	mov	r5, r6
 8007eaa:	e7e7      	b.n	8007e7c <_realloc_r+0x1c>

08007eac <_sbrk_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4d06      	ldr	r5, [pc, #24]	; (8007ec8 <_sbrk_r+0x1c>)
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	4608      	mov	r0, r1
 8007eb6:	602b      	str	r3, [r5, #0]
 8007eb8:	f7fb fafa 	bl	80034b0 <_sbrk>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d102      	bne.n	8007ec6 <_sbrk_r+0x1a>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b103      	cbz	r3, 8007ec6 <_sbrk_r+0x1a>
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	20000318 	.word	0x20000318

08007ecc <__malloc_lock>:
 8007ecc:	4801      	ldr	r0, [pc, #4]	; (8007ed4 <__malloc_lock+0x8>)
 8007ece:	f000 b811 	b.w	8007ef4 <__retarget_lock_acquire_recursive>
 8007ed2:	bf00      	nop
 8007ed4:	20000320 	.word	0x20000320

08007ed8 <__malloc_unlock>:
 8007ed8:	4801      	ldr	r0, [pc, #4]	; (8007ee0 <__malloc_unlock+0x8>)
 8007eda:	f000 b80c 	b.w	8007ef6 <__retarget_lock_release_recursive>
 8007ede:	bf00      	nop
 8007ee0:	20000320 	.word	0x20000320

08007ee4 <_malloc_usable_size_r>:
 8007ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ee8:	1f18      	subs	r0, r3, #4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	bfbc      	itt	lt
 8007eee:	580b      	ldrlt	r3, [r1, r0]
 8007ef0:	18c0      	addlt	r0, r0, r3
 8007ef2:	4770      	bx	lr

08007ef4 <__retarget_lock_acquire_recursive>:
 8007ef4:	4770      	bx	lr

08007ef6 <__retarget_lock_release_recursive>:
 8007ef6:	4770      	bx	lr

08007ef8 <sin>:
 8007ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007efa:	ec53 2b10 	vmov	r2, r3, d0
 8007efe:	4826      	ldr	r0, [pc, #152]	; (8007f98 <sin+0xa0>)
 8007f00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f04:	4281      	cmp	r1, r0
 8007f06:	dc07      	bgt.n	8007f18 <sin+0x20>
 8007f08:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007f90 <sin+0x98>
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	f000 fe5b 	bl	8008bc8 <__kernel_sin>
 8007f12:	ec51 0b10 	vmov	r0, r1, d0
 8007f16:	e007      	b.n	8007f28 <sin+0x30>
 8007f18:	4820      	ldr	r0, [pc, #128]	; (8007f9c <sin+0xa4>)
 8007f1a:	4281      	cmp	r1, r0
 8007f1c:	dd09      	ble.n	8007f32 <sin+0x3a>
 8007f1e:	ee10 0a10 	vmov	r0, s0
 8007f22:	4619      	mov	r1, r3
 8007f24:	f7f8 f9b8 	bl	8000298 <__aeabi_dsub>
 8007f28:	ec41 0b10 	vmov	d0, r0, r1
 8007f2c:	b005      	add	sp, #20
 8007f2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f32:	4668      	mov	r0, sp
 8007f34:	f000 f834 	bl	8007fa0 <__ieee754_rem_pio2>
 8007f38:	f000 0003 	and.w	r0, r0, #3
 8007f3c:	2801      	cmp	r0, #1
 8007f3e:	d008      	beq.n	8007f52 <sin+0x5a>
 8007f40:	2802      	cmp	r0, #2
 8007f42:	d00d      	beq.n	8007f60 <sin+0x68>
 8007f44:	b9d0      	cbnz	r0, 8007f7c <sin+0x84>
 8007f46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f4a:	ed9d 0b00 	vldr	d0, [sp]
 8007f4e:	2001      	movs	r0, #1
 8007f50:	e7dd      	b.n	8007f0e <sin+0x16>
 8007f52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f56:	ed9d 0b00 	vldr	d0, [sp]
 8007f5a:	f000 fa2d 	bl	80083b8 <__kernel_cos>
 8007f5e:	e7d8      	b.n	8007f12 <sin+0x1a>
 8007f60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f64:	ed9d 0b00 	vldr	d0, [sp]
 8007f68:	2001      	movs	r0, #1
 8007f6a:	f000 fe2d 	bl	8008bc8 <__kernel_sin>
 8007f6e:	ec53 2b10 	vmov	r2, r3, d0
 8007f72:	ee10 0a10 	vmov	r0, s0
 8007f76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007f7a:	e7d5      	b.n	8007f28 <sin+0x30>
 8007f7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f80:	ed9d 0b00 	vldr	d0, [sp]
 8007f84:	f000 fa18 	bl	80083b8 <__kernel_cos>
 8007f88:	e7f1      	b.n	8007f6e <sin+0x76>
 8007f8a:	bf00      	nop
 8007f8c:	f3af 8000 	nop.w
	...
 8007f98:	3fe921fb 	.word	0x3fe921fb
 8007f9c:	7fefffff 	.word	0x7fefffff

08007fa0 <__ieee754_rem_pio2>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	ed2d 8b02 	vpush	{d8}
 8007fa8:	ec55 4b10 	vmov	r4, r5, d0
 8007fac:	4bca      	ldr	r3, [pc, #808]	; (80082d8 <__ieee754_rem_pio2+0x338>)
 8007fae:	b08b      	sub	sp, #44	; 0x2c
 8007fb0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007fb4:	4598      	cmp	r8, r3
 8007fb6:	4682      	mov	sl, r0
 8007fb8:	9502      	str	r5, [sp, #8]
 8007fba:	dc08      	bgt.n	8007fce <__ieee754_rem_pio2+0x2e>
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	ed80 0b00 	vstr	d0, [r0]
 8007fc4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007fc8:	f04f 0b00 	mov.w	fp, #0
 8007fcc:	e028      	b.n	8008020 <__ieee754_rem_pio2+0x80>
 8007fce:	4bc3      	ldr	r3, [pc, #780]	; (80082dc <__ieee754_rem_pio2+0x33c>)
 8007fd0:	4598      	cmp	r8, r3
 8007fd2:	dc78      	bgt.n	80080c6 <__ieee754_rem_pio2+0x126>
 8007fd4:	9b02      	ldr	r3, [sp, #8]
 8007fd6:	4ec2      	ldr	r6, [pc, #776]	; (80082e0 <__ieee754_rem_pio2+0x340>)
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	ee10 0a10 	vmov	r0, s0
 8007fde:	a3b0      	add	r3, pc, #704	; (adr r3, 80082a0 <__ieee754_rem_pio2+0x300>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	dd39      	ble.n	800805c <__ieee754_rem_pio2+0xbc>
 8007fe8:	f7f8 f956 	bl	8000298 <__aeabi_dsub>
 8007fec:	45b0      	cmp	r8, r6
 8007fee:	4604      	mov	r4, r0
 8007ff0:	460d      	mov	r5, r1
 8007ff2:	d01b      	beq.n	800802c <__ieee754_rem_pio2+0x8c>
 8007ff4:	a3ac      	add	r3, pc, #688	; (adr r3, 80082a8 <__ieee754_rem_pio2+0x308>)
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	f7f8 f94d 	bl	8000298 <__aeabi_dsub>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	e9ca 2300 	strd	r2, r3, [sl]
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 f945 	bl	8000298 <__aeabi_dsub>
 800800e:	a3a6      	add	r3, pc, #664	; (adr r3, 80082a8 <__ieee754_rem_pio2+0x308>)
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f7f8 f940 	bl	8000298 <__aeabi_dsub>
 8008018:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800801c:	f04f 0b01 	mov.w	fp, #1
 8008020:	4658      	mov	r0, fp
 8008022:	b00b      	add	sp, #44	; 0x2c
 8008024:	ecbd 8b02 	vpop	{d8}
 8008028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802c:	a3a0      	add	r3, pc, #640	; (adr r3, 80082b0 <__ieee754_rem_pio2+0x310>)
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	f7f8 f931 	bl	8000298 <__aeabi_dsub>
 8008036:	a3a0      	add	r3, pc, #640	; (adr r3, 80082b8 <__ieee754_rem_pio2+0x318>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	4604      	mov	r4, r0
 800803e:	460d      	mov	r5, r1
 8008040:	f7f8 f92a 	bl	8000298 <__aeabi_dsub>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	e9ca 2300 	strd	r2, r3, [sl]
 800804c:	4620      	mov	r0, r4
 800804e:	4629      	mov	r1, r5
 8008050:	f7f8 f922 	bl	8000298 <__aeabi_dsub>
 8008054:	a398      	add	r3, pc, #608	; (adr r3, 80082b8 <__ieee754_rem_pio2+0x318>)
 8008056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805a:	e7db      	b.n	8008014 <__ieee754_rem_pio2+0x74>
 800805c:	f7f8 f91e 	bl	800029c <__adddf3>
 8008060:	45b0      	cmp	r8, r6
 8008062:	4604      	mov	r4, r0
 8008064:	460d      	mov	r5, r1
 8008066:	d016      	beq.n	8008096 <__ieee754_rem_pio2+0xf6>
 8008068:	a38f      	add	r3, pc, #572	; (adr r3, 80082a8 <__ieee754_rem_pio2+0x308>)
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	f7f8 f915 	bl	800029c <__adddf3>
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	e9ca 2300 	strd	r2, r3, [sl]
 800807a:	4620      	mov	r0, r4
 800807c:	4629      	mov	r1, r5
 800807e:	f7f8 f90b 	bl	8000298 <__aeabi_dsub>
 8008082:	a389      	add	r3, pc, #548	; (adr r3, 80082a8 <__ieee754_rem_pio2+0x308>)
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	f7f8 f908 	bl	800029c <__adddf3>
 800808c:	f04f 3bff 	mov.w	fp, #4294967295
 8008090:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008094:	e7c4      	b.n	8008020 <__ieee754_rem_pio2+0x80>
 8008096:	a386      	add	r3, pc, #536	; (adr r3, 80082b0 <__ieee754_rem_pio2+0x310>)
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	f7f8 f8fe 	bl	800029c <__adddf3>
 80080a0:	a385      	add	r3, pc, #532	; (adr r3, 80082b8 <__ieee754_rem_pio2+0x318>)
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	4604      	mov	r4, r0
 80080a8:	460d      	mov	r5, r1
 80080aa:	f7f8 f8f7 	bl	800029c <__adddf3>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	e9ca 2300 	strd	r2, r3, [sl]
 80080b6:	4620      	mov	r0, r4
 80080b8:	4629      	mov	r1, r5
 80080ba:	f7f8 f8ed 	bl	8000298 <__aeabi_dsub>
 80080be:	a37e      	add	r3, pc, #504	; (adr r3, 80082b8 <__ieee754_rem_pio2+0x318>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	e7e0      	b.n	8008088 <__ieee754_rem_pio2+0xe8>
 80080c6:	4b87      	ldr	r3, [pc, #540]	; (80082e4 <__ieee754_rem_pio2+0x344>)
 80080c8:	4598      	cmp	r8, r3
 80080ca:	f300 80d9 	bgt.w	8008280 <__ieee754_rem_pio2+0x2e0>
 80080ce:	f000 fe39 	bl	8008d44 <fabs>
 80080d2:	ec55 4b10 	vmov	r4, r5, d0
 80080d6:	ee10 0a10 	vmov	r0, s0
 80080da:	a379      	add	r3, pc, #484	; (adr r3, 80082c0 <__ieee754_rem_pio2+0x320>)
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	4629      	mov	r1, r5
 80080e2:	f7f8 fa91 	bl	8000608 <__aeabi_dmul>
 80080e6:	4b80      	ldr	r3, [pc, #512]	; (80082e8 <__ieee754_rem_pio2+0x348>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	f7f8 f8d7 	bl	800029c <__adddf3>
 80080ee:	f7f8 fd25 	bl	8000b3c <__aeabi_d2iz>
 80080f2:	4683      	mov	fp, r0
 80080f4:	f7f8 fa1e 	bl	8000534 <__aeabi_i2d>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	ec43 2b18 	vmov	d8, r2, r3
 8008100:	a367      	add	r3, pc, #412	; (adr r3, 80082a0 <__ieee754_rem_pio2+0x300>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f7f8 fa7f 	bl	8000608 <__aeabi_dmul>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4620      	mov	r0, r4
 8008110:	4629      	mov	r1, r5
 8008112:	f7f8 f8c1 	bl	8000298 <__aeabi_dsub>
 8008116:	a364      	add	r3, pc, #400	; (adr r3, 80082a8 <__ieee754_rem_pio2+0x308>)
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	4606      	mov	r6, r0
 800811e:	460f      	mov	r7, r1
 8008120:	ec51 0b18 	vmov	r0, r1, d8
 8008124:	f7f8 fa70 	bl	8000608 <__aeabi_dmul>
 8008128:	f1bb 0f1f 	cmp.w	fp, #31
 800812c:	4604      	mov	r4, r0
 800812e:	460d      	mov	r5, r1
 8008130:	dc0d      	bgt.n	800814e <__ieee754_rem_pio2+0x1ae>
 8008132:	4b6e      	ldr	r3, [pc, #440]	; (80082ec <__ieee754_rem_pio2+0x34c>)
 8008134:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813c:	4543      	cmp	r3, r8
 800813e:	d006      	beq.n	800814e <__ieee754_rem_pio2+0x1ae>
 8008140:	4622      	mov	r2, r4
 8008142:	462b      	mov	r3, r5
 8008144:	4630      	mov	r0, r6
 8008146:	4639      	mov	r1, r7
 8008148:	f7f8 f8a6 	bl	8000298 <__aeabi_dsub>
 800814c:	e00f      	b.n	800816e <__ieee754_rem_pio2+0x1ce>
 800814e:	462b      	mov	r3, r5
 8008150:	4622      	mov	r2, r4
 8008152:	4630      	mov	r0, r6
 8008154:	4639      	mov	r1, r7
 8008156:	f7f8 f89f 	bl	8000298 <__aeabi_dsub>
 800815a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800815e:	9303      	str	r3, [sp, #12]
 8008160:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008164:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008168:	f1b8 0f10 	cmp.w	r8, #16
 800816c:	dc02      	bgt.n	8008174 <__ieee754_rem_pio2+0x1d4>
 800816e:	e9ca 0100 	strd	r0, r1, [sl]
 8008172:	e039      	b.n	80081e8 <__ieee754_rem_pio2+0x248>
 8008174:	a34e      	add	r3, pc, #312	; (adr r3, 80082b0 <__ieee754_rem_pio2+0x310>)
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	ec51 0b18 	vmov	r0, r1, d8
 800817e:	f7f8 fa43 	bl	8000608 <__aeabi_dmul>
 8008182:	4604      	mov	r4, r0
 8008184:	460d      	mov	r5, r1
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4630      	mov	r0, r6
 800818c:	4639      	mov	r1, r7
 800818e:	f7f8 f883 	bl	8000298 <__aeabi_dsub>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4680      	mov	r8, r0
 8008198:	4689      	mov	r9, r1
 800819a:	4630      	mov	r0, r6
 800819c:	4639      	mov	r1, r7
 800819e:	f7f8 f87b 	bl	8000298 <__aeabi_dsub>
 80081a2:	4622      	mov	r2, r4
 80081a4:	462b      	mov	r3, r5
 80081a6:	f7f8 f877 	bl	8000298 <__aeabi_dsub>
 80081aa:	a343      	add	r3, pc, #268	; (adr r3, 80082b8 <__ieee754_rem_pio2+0x318>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	4604      	mov	r4, r0
 80081b2:	460d      	mov	r5, r1
 80081b4:	ec51 0b18 	vmov	r0, r1, d8
 80081b8:	f7f8 fa26 	bl	8000608 <__aeabi_dmul>
 80081bc:	4622      	mov	r2, r4
 80081be:	462b      	mov	r3, r5
 80081c0:	f7f8 f86a 	bl	8000298 <__aeabi_dsub>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	4604      	mov	r4, r0
 80081ca:	460d      	mov	r5, r1
 80081cc:	4640      	mov	r0, r8
 80081ce:	4649      	mov	r1, r9
 80081d0:	f7f8 f862 	bl	8000298 <__aeabi_dsub>
 80081d4:	9a03      	ldr	r2, [sp, #12]
 80081d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b31      	cmp	r3, #49	; 0x31
 80081de:	dc24      	bgt.n	800822a <__ieee754_rem_pio2+0x28a>
 80081e0:	e9ca 0100 	strd	r0, r1, [sl]
 80081e4:	4646      	mov	r6, r8
 80081e6:	464f      	mov	r7, r9
 80081e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80081ec:	4630      	mov	r0, r6
 80081ee:	4642      	mov	r2, r8
 80081f0:	464b      	mov	r3, r9
 80081f2:	4639      	mov	r1, r7
 80081f4:	f7f8 f850 	bl	8000298 <__aeabi_dsub>
 80081f8:	462b      	mov	r3, r5
 80081fa:	4622      	mov	r2, r4
 80081fc:	f7f8 f84c 	bl	8000298 <__aeabi_dsub>
 8008200:	9b02      	ldr	r3, [sp, #8]
 8008202:	2b00      	cmp	r3, #0
 8008204:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008208:	f6bf af0a 	bge.w	8008020 <__ieee754_rem_pio2+0x80>
 800820c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008210:	f8ca 3004 	str.w	r3, [sl, #4]
 8008214:	f8ca 8000 	str.w	r8, [sl]
 8008218:	f8ca 0008 	str.w	r0, [sl, #8]
 800821c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008220:	f8ca 300c 	str.w	r3, [sl, #12]
 8008224:	f1cb 0b00 	rsb	fp, fp, #0
 8008228:	e6fa      	b.n	8008020 <__ieee754_rem_pio2+0x80>
 800822a:	a327      	add	r3, pc, #156	; (adr r3, 80082c8 <__ieee754_rem_pio2+0x328>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	ec51 0b18 	vmov	r0, r1, d8
 8008234:	f7f8 f9e8 	bl	8000608 <__aeabi_dmul>
 8008238:	4604      	mov	r4, r0
 800823a:	460d      	mov	r5, r1
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4640      	mov	r0, r8
 8008242:	4649      	mov	r1, r9
 8008244:	f7f8 f828 	bl	8000298 <__aeabi_dsub>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4606      	mov	r6, r0
 800824e:	460f      	mov	r7, r1
 8008250:	4640      	mov	r0, r8
 8008252:	4649      	mov	r1, r9
 8008254:	f7f8 f820 	bl	8000298 <__aeabi_dsub>
 8008258:	4622      	mov	r2, r4
 800825a:	462b      	mov	r3, r5
 800825c:	f7f8 f81c 	bl	8000298 <__aeabi_dsub>
 8008260:	a31b      	add	r3, pc, #108	; (adr r3, 80082d0 <__ieee754_rem_pio2+0x330>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	4604      	mov	r4, r0
 8008268:	460d      	mov	r5, r1
 800826a:	ec51 0b18 	vmov	r0, r1, d8
 800826e:	f7f8 f9cb 	bl	8000608 <__aeabi_dmul>
 8008272:	4622      	mov	r2, r4
 8008274:	462b      	mov	r3, r5
 8008276:	f7f8 f80f 	bl	8000298 <__aeabi_dsub>
 800827a:	4604      	mov	r4, r0
 800827c:	460d      	mov	r5, r1
 800827e:	e75f      	b.n	8008140 <__ieee754_rem_pio2+0x1a0>
 8008280:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <__ieee754_rem_pio2+0x350>)
 8008282:	4598      	cmp	r8, r3
 8008284:	dd36      	ble.n	80082f4 <__ieee754_rem_pio2+0x354>
 8008286:	ee10 2a10 	vmov	r2, s0
 800828a:	462b      	mov	r3, r5
 800828c:	4620      	mov	r0, r4
 800828e:	4629      	mov	r1, r5
 8008290:	f7f8 f802 	bl	8000298 <__aeabi_dsub>
 8008294:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008298:	e9ca 0100 	strd	r0, r1, [sl]
 800829c:	e694      	b.n	8007fc8 <__ieee754_rem_pio2+0x28>
 800829e:	bf00      	nop
 80082a0:	54400000 	.word	0x54400000
 80082a4:	3ff921fb 	.word	0x3ff921fb
 80082a8:	1a626331 	.word	0x1a626331
 80082ac:	3dd0b461 	.word	0x3dd0b461
 80082b0:	1a600000 	.word	0x1a600000
 80082b4:	3dd0b461 	.word	0x3dd0b461
 80082b8:	2e037073 	.word	0x2e037073
 80082bc:	3ba3198a 	.word	0x3ba3198a
 80082c0:	6dc9c883 	.word	0x6dc9c883
 80082c4:	3fe45f30 	.word	0x3fe45f30
 80082c8:	2e000000 	.word	0x2e000000
 80082cc:	3ba3198a 	.word	0x3ba3198a
 80082d0:	252049c1 	.word	0x252049c1
 80082d4:	397b839a 	.word	0x397b839a
 80082d8:	3fe921fb 	.word	0x3fe921fb
 80082dc:	4002d97b 	.word	0x4002d97b
 80082e0:	3ff921fb 	.word	0x3ff921fb
 80082e4:	413921fb 	.word	0x413921fb
 80082e8:	3fe00000 	.word	0x3fe00000
 80082ec:	08009190 	.word	0x08009190
 80082f0:	7fefffff 	.word	0x7fefffff
 80082f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80082f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80082fc:	ee10 0a10 	vmov	r0, s0
 8008300:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008304:	ee10 6a10 	vmov	r6, s0
 8008308:	460f      	mov	r7, r1
 800830a:	f7f8 fc17 	bl	8000b3c <__aeabi_d2iz>
 800830e:	f7f8 f911 	bl	8000534 <__aeabi_i2d>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4630      	mov	r0, r6
 8008318:	4639      	mov	r1, r7
 800831a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800831e:	f7f7 ffbb 	bl	8000298 <__aeabi_dsub>
 8008322:	4b22      	ldr	r3, [pc, #136]	; (80083ac <__ieee754_rem_pio2+0x40c>)
 8008324:	2200      	movs	r2, #0
 8008326:	f7f8 f96f 	bl	8000608 <__aeabi_dmul>
 800832a:	460f      	mov	r7, r1
 800832c:	4606      	mov	r6, r0
 800832e:	f7f8 fc05 	bl	8000b3c <__aeabi_d2iz>
 8008332:	f7f8 f8ff 	bl	8000534 <__aeabi_i2d>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	4630      	mov	r0, r6
 800833c:	4639      	mov	r1, r7
 800833e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008342:	f7f7 ffa9 	bl	8000298 <__aeabi_dsub>
 8008346:	4b19      	ldr	r3, [pc, #100]	; (80083ac <__ieee754_rem_pio2+0x40c>)
 8008348:	2200      	movs	r2, #0
 800834a:	f7f8 f95d 	bl	8000608 <__aeabi_dmul>
 800834e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008352:	ad04      	add	r5, sp, #16
 8008354:	f04f 0803 	mov.w	r8, #3
 8008358:	46a9      	mov	r9, r5
 800835a:	2600      	movs	r6, #0
 800835c:	2700      	movs	r7, #0
 800835e:	4632      	mov	r2, r6
 8008360:	463b      	mov	r3, r7
 8008362:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008366:	46c3      	mov	fp, r8
 8008368:	3d08      	subs	r5, #8
 800836a:	f108 38ff 	add.w	r8, r8, #4294967295
 800836e:	f7f8 fbb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008372:	2800      	cmp	r0, #0
 8008374:	d1f3      	bne.n	800835e <__ieee754_rem_pio2+0x3be>
 8008376:	4b0e      	ldr	r3, [pc, #56]	; (80083b0 <__ieee754_rem_pio2+0x410>)
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	2302      	movs	r3, #2
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	4622      	mov	r2, r4
 8008380:	465b      	mov	r3, fp
 8008382:	4651      	mov	r1, sl
 8008384:	4648      	mov	r0, r9
 8008386:	f000 f8df 	bl	8008548 <__kernel_rem_pio2>
 800838a:	9b02      	ldr	r3, [sp, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	4683      	mov	fp, r0
 8008390:	f6bf ae46 	bge.w	8008020 <__ieee754_rem_pio2+0x80>
 8008394:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008398:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800839c:	f8ca 3004 	str.w	r3, [sl, #4]
 80083a0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80083a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80083a8:	e73a      	b.n	8008220 <__ieee754_rem_pio2+0x280>
 80083aa:	bf00      	nop
 80083ac:	41700000 	.word	0x41700000
 80083b0:	08009210 	.word	0x08009210
 80083b4:	00000000 	.word	0x00000000

080083b8 <__kernel_cos>:
 80083b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	ec57 6b10 	vmov	r6, r7, d0
 80083c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80083c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80083c8:	ed8d 1b00 	vstr	d1, [sp]
 80083cc:	da07      	bge.n	80083de <__kernel_cos+0x26>
 80083ce:	ee10 0a10 	vmov	r0, s0
 80083d2:	4639      	mov	r1, r7
 80083d4:	f7f8 fbb2 	bl	8000b3c <__aeabi_d2iz>
 80083d8:	2800      	cmp	r0, #0
 80083da:	f000 8088 	beq.w	80084ee <__kernel_cos+0x136>
 80083de:	4632      	mov	r2, r6
 80083e0:	463b      	mov	r3, r7
 80083e2:	4630      	mov	r0, r6
 80083e4:	4639      	mov	r1, r7
 80083e6:	f7f8 f90f 	bl	8000608 <__aeabi_dmul>
 80083ea:	4b51      	ldr	r3, [pc, #324]	; (8008530 <__kernel_cos+0x178>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	4604      	mov	r4, r0
 80083f0:	460d      	mov	r5, r1
 80083f2:	f7f8 f909 	bl	8000608 <__aeabi_dmul>
 80083f6:	a340      	add	r3, pc, #256	; (adr r3, 80084f8 <__kernel_cos+0x140>)
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	4682      	mov	sl, r0
 80083fe:	468b      	mov	fp, r1
 8008400:	4620      	mov	r0, r4
 8008402:	4629      	mov	r1, r5
 8008404:	f7f8 f900 	bl	8000608 <__aeabi_dmul>
 8008408:	a33d      	add	r3, pc, #244	; (adr r3, 8008500 <__kernel_cos+0x148>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	f7f7 ff45 	bl	800029c <__adddf3>
 8008412:	4622      	mov	r2, r4
 8008414:	462b      	mov	r3, r5
 8008416:	f7f8 f8f7 	bl	8000608 <__aeabi_dmul>
 800841a:	a33b      	add	r3, pc, #236	; (adr r3, 8008508 <__kernel_cos+0x150>)
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	f7f7 ff3a 	bl	8000298 <__aeabi_dsub>
 8008424:	4622      	mov	r2, r4
 8008426:	462b      	mov	r3, r5
 8008428:	f7f8 f8ee 	bl	8000608 <__aeabi_dmul>
 800842c:	a338      	add	r3, pc, #224	; (adr r3, 8008510 <__kernel_cos+0x158>)
 800842e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008432:	f7f7 ff33 	bl	800029c <__adddf3>
 8008436:	4622      	mov	r2, r4
 8008438:	462b      	mov	r3, r5
 800843a:	f7f8 f8e5 	bl	8000608 <__aeabi_dmul>
 800843e:	a336      	add	r3, pc, #216	; (adr r3, 8008518 <__kernel_cos+0x160>)
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	f7f7 ff28 	bl	8000298 <__aeabi_dsub>
 8008448:	4622      	mov	r2, r4
 800844a:	462b      	mov	r3, r5
 800844c:	f7f8 f8dc 	bl	8000608 <__aeabi_dmul>
 8008450:	a333      	add	r3, pc, #204	; (adr r3, 8008520 <__kernel_cos+0x168>)
 8008452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008456:	f7f7 ff21 	bl	800029c <__adddf3>
 800845a:	4622      	mov	r2, r4
 800845c:	462b      	mov	r3, r5
 800845e:	f7f8 f8d3 	bl	8000608 <__aeabi_dmul>
 8008462:	4622      	mov	r2, r4
 8008464:	462b      	mov	r3, r5
 8008466:	f7f8 f8cf 	bl	8000608 <__aeabi_dmul>
 800846a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800846e:	4604      	mov	r4, r0
 8008470:	460d      	mov	r5, r1
 8008472:	4630      	mov	r0, r6
 8008474:	4639      	mov	r1, r7
 8008476:	f7f8 f8c7 	bl	8000608 <__aeabi_dmul>
 800847a:	460b      	mov	r3, r1
 800847c:	4602      	mov	r2, r0
 800847e:	4629      	mov	r1, r5
 8008480:	4620      	mov	r0, r4
 8008482:	f7f7 ff09 	bl	8000298 <__aeabi_dsub>
 8008486:	4b2b      	ldr	r3, [pc, #172]	; (8008534 <__kernel_cos+0x17c>)
 8008488:	4598      	cmp	r8, r3
 800848a:	4606      	mov	r6, r0
 800848c:	460f      	mov	r7, r1
 800848e:	dc10      	bgt.n	80084b2 <__kernel_cos+0xfa>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4650      	mov	r0, sl
 8008496:	4659      	mov	r1, fp
 8008498:	f7f7 fefe 	bl	8000298 <__aeabi_dsub>
 800849c:	460b      	mov	r3, r1
 800849e:	4926      	ldr	r1, [pc, #152]	; (8008538 <__kernel_cos+0x180>)
 80084a0:	4602      	mov	r2, r0
 80084a2:	2000      	movs	r0, #0
 80084a4:	f7f7 fef8 	bl	8000298 <__aeabi_dsub>
 80084a8:	ec41 0b10 	vmov	d0, r0, r1
 80084ac:	b003      	add	sp, #12
 80084ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b2:	4b22      	ldr	r3, [pc, #136]	; (800853c <__kernel_cos+0x184>)
 80084b4:	4920      	ldr	r1, [pc, #128]	; (8008538 <__kernel_cos+0x180>)
 80084b6:	4598      	cmp	r8, r3
 80084b8:	bfcc      	ite	gt
 80084ba:	4d21      	ldrgt	r5, [pc, #132]	; (8008540 <__kernel_cos+0x188>)
 80084bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80084c0:	2400      	movs	r4, #0
 80084c2:	4622      	mov	r2, r4
 80084c4:	462b      	mov	r3, r5
 80084c6:	2000      	movs	r0, #0
 80084c8:	f7f7 fee6 	bl	8000298 <__aeabi_dsub>
 80084cc:	4622      	mov	r2, r4
 80084ce:	4680      	mov	r8, r0
 80084d0:	4689      	mov	r9, r1
 80084d2:	462b      	mov	r3, r5
 80084d4:	4650      	mov	r0, sl
 80084d6:	4659      	mov	r1, fp
 80084d8:	f7f7 fede 	bl	8000298 <__aeabi_dsub>
 80084dc:	4632      	mov	r2, r6
 80084de:	463b      	mov	r3, r7
 80084e0:	f7f7 feda 	bl	8000298 <__aeabi_dsub>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4640      	mov	r0, r8
 80084ea:	4649      	mov	r1, r9
 80084ec:	e7da      	b.n	80084a4 <__kernel_cos+0xec>
 80084ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008528 <__kernel_cos+0x170>
 80084f2:	e7db      	b.n	80084ac <__kernel_cos+0xf4>
 80084f4:	f3af 8000 	nop.w
 80084f8:	be8838d4 	.word	0xbe8838d4
 80084fc:	bda8fae9 	.word	0xbda8fae9
 8008500:	bdb4b1c4 	.word	0xbdb4b1c4
 8008504:	3e21ee9e 	.word	0x3e21ee9e
 8008508:	809c52ad 	.word	0x809c52ad
 800850c:	3e927e4f 	.word	0x3e927e4f
 8008510:	19cb1590 	.word	0x19cb1590
 8008514:	3efa01a0 	.word	0x3efa01a0
 8008518:	16c15177 	.word	0x16c15177
 800851c:	3f56c16c 	.word	0x3f56c16c
 8008520:	5555554c 	.word	0x5555554c
 8008524:	3fa55555 	.word	0x3fa55555
 8008528:	00000000 	.word	0x00000000
 800852c:	3ff00000 	.word	0x3ff00000
 8008530:	3fe00000 	.word	0x3fe00000
 8008534:	3fd33332 	.word	0x3fd33332
 8008538:	3ff00000 	.word	0x3ff00000
 800853c:	3fe90000 	.word	0x3fe90000
 8008540:	3fd20000 	.word	0x3fd20000
 8008544:	00000000 	.word	0x00000000

08008548 <__kernel_rem_pio2>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	ed2d 8b02 	vpush	{d8}
 8008550:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008554:	f112 0f14 	cmn.w	r2, #20
 8008558:	9308      	str	r3, [sp, #32]
 800855a:	9101      	str	r1, [sp, #4]
 800855c:	4bc6      	ldr	r3, [pc, #792]	; (8008878 <__kernel_rem_pio2+0x330>)
 800855e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008560:	9009      	str	r0, [sp, #36]	; 0x24
 8008562:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	9b08      	ldr	r3, [sp, #32]
 800856a:	f103 33ff 	add.w	r3, r3, #4294967295
 800856e:	bfa8      	it	ge
 8008570:	1ed4      	subge	r4, r2, #3
 8008572:	9306      	str	r3, [sp, #24]
 8008574:	bfb2      	itee	lt
 8008576:	2400      	movlt	r4, #0
 8008578:	2318      	movge	r3, #24
 800857a:	fb94 f4f3 	sdivge	r4, r4, r3
 800857e:	f06f 0317 	mvn.w	r3, #23
 8008582:	fb04 3303 	mla	r3, r4, r3, r3
 8008586:	eb03 0a02 	add.w	sl, r3, r2
 800858a:	9b04      	ldr	r3, [sp, #16]
 800858c:	9a06      	ldr	r2, [sp, #24]
 800858e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008868 <__kernel_rem_pio2+0x320>
 8008592:	eb03 0802 	add.w	r8, r3, r2
 8008596:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008598:	1aa7      	subs	r7, r4, r2
 800859a:	ae20      	add	r6, sp, #128	; 0x80
 800859c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80085a0:	2500      	movs	r5, #0
 80085a2:	4545      	cmp	r5, r8
 80085a4:	dd18      	ble.n	80085d8 <__kernel_rem_pio2+0x90>
 80085a6:	9b08      	ldr	r3, [sp, #32]
 80085a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80085ac:	aa20      	add	r2, sp, #128	; 0x80
 80085ae:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8008868 <__kernel_rem_pio2+0x320>
 80085b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80085b6:	f1c3 0301 	rsb	r3, r3, #1
 80085ba:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80085be:	9307      	str	r3, [sp, #28]
 80085c0:	9b07      	ldr	r3, [sp, #28]
 80085c2:	9a04      	ldr	r2, [sp, #16]
 80085c4:	4443      	add	r3, r8
 80085c6:	429a      	cmp	r2, r3
 80085c8:	db2f      	blt.n	800862a <__kernel_rem_pio2+0xe2>
 80085ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80085ce:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80085d2:	462f      	mov	r7, r5
 80085d4:	2600      	movs	r6, #0
 80085d6:	e01b      	b.n	8008610 <__kernel_rem_pio2+0xc8>
 80085d8:	42ef      	cmn	r7, r5
 80085da:	d407      	bmi.n	80085ec <__kernel_rem_pio2+0xa4>
 80085dc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80085e0:	f7f7 ffa8 	bl	8000534 <__aeabi_i2d>
 80085e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80085e8:	3501      	adds	r5, #1
 80085ea:	e7da      	b.n	80085a2 <__kernel_rem_pio2+0x5a>
 80085ec:	ec51 0b18 	vmov	r0, r1, d8
 80085f0:	e7f8      	b.n	80085e4 <__kernel_rem_pio2+0x9c>
 80085f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80085fa:	f7f8 f805 	bl	8000608 <__aeabi_dmul>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008606:	f7f7 fe49 	bl	800029c <__adddf3>
 800860a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800860e:	3601      	adds	r6, #1
 8008610:	9b06      	ldr	r3, [sp, #24]
 8008612:	429e      	cmp	r6, r3
 8008614:	f1a7 0708 	sub.w	r7, r7, #8
 8008618:	ddeb      	ble.n	80085f2 <__kernel_rem_pio2+0xaa>
 800861a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800861e:	3508      	adds	r5, #8
 8008620:	ecab 7b02 	vstmia	fp!, {d7}
 8008624:	f108 0801 	add.w	r8, r8, #1
 8008628:	e7ca      	b.n	80085c0 <__kernel_rem_pio2+0x78>
 800862a:	9b04      	ldr	r3, [sp, #16]
 800862c:	aa0c      	add	r2, sp, #48	; 0x30
 800862e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008632:	930b      	str	r3, [sp, #44]	; 0x2c
 8008634:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008636:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800863a:	9c04      	ldr	r4, [sp, #16]
 800863c:	930a      	str	r3, [sp, #40]	; 0x28
 800863e:	ab98      	add	r3, sp, #608	; 0x260
 8008640:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008644:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008648:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800864c:	f8cd b008 	str.w	fp, [sp, #8]
 8008650:	4625      	mov	r5, r4
 8008652:	2d00      	cmp	r5, #0
 8008654:	dc78      	bgt.n	8008748 <__kernel_rem_pio2+0x200>
 8008656:	ec47 6b10 	vmov	d0, r6, r7
 800865a:	4650      	mov	r0, sl
 800865c:	f000 fbfc 	bl	8008e58 <scalbn>
 8008660:	ec57 6b10 	vmov	r6, r7, d0
 8008664:	2200      	movs	r2, #0
 8008666:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800866a:	ee10 0a10 	vmov	r0, s0
 800866e:	4639      	mov	r1, r7
 8008670:	f7f7 ffca 	bl	8000608 <__aeabi_dmul>
 8008674:	ec41 0b10 	vmov	d0, r0, r1
 8008678:	f000 fb6e 	bl	8008d58 <floor>
 800867c:	4b7f      	ldr	r3, [pc, #508]	; (800887c <__kernel_rem_pio2+0x334>)
 800867e:	ec51 0b10 	vmov	r0, r1, d0
 8008682:	2200      	movs	r2, #0
 8008684:	f7f7 ffc0 	bl	8000608 <__aeabi_dmul>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	4630      	mov	r0, r6
 800868e:	4639      	mov	r1, r7
 8008690:	f7f7 fe02 	bl	8000298 <__aeabi_dsub>
 8008694:	460f      	mov	r7, r1
 8008696:	4606      	mov	r6, r0
 8008698:	f7f8 fa50 	bl	8000b3c <__aeabi_d2iz>
 800869c:	9007      	str	r0, [sp, #28]
 800869e:	f7f7 ff49 	bl	8000534 <__aeabi_i2d>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4630      	mov	r0, r6
 80086a8:	4639      	mov	r1, r7
 80086aa:	f7f7 fdf5 	bl	8000298 <__aeabi_dsub>
 80086ae:	f1ba 0f00 	cmp.w	sl, #0
 80086b2:	4606      	mov	r6, r0
 80086b4:	460f      	mov	r7, r1
 80086b6:	dd70      	ble.n	800879a <__kernel_rem_pio2+0x252>
 80086b8:	1e62      	subs	r2, r4, #1
 80086ba:	ab0c      	add	r3, sp, #48	; 0x30
 80086bc:	9d07      	ldr	r5, [sp, #28]
 80086be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80086c2:	f1ca 0118 	rsb	r1, sl, #24
 80086c6:	fa40 f301 	asr.w	r3, r0, r1
 80086ca:	441d      	add	r5, r3
 80086cc:	408b      	lsls	r3, r1
 80086ce:	1ac0      	subs	r0, r0, r3
 80086d0:	ab0c      	add	r3, sp, #48	; 0x30
 80086d2:	9507      	str	r5, [sp, #28]
 80086d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80086d8:	f1ca 0317 	rsb	r3, sl, #23
 80086dc:	fa40 f303 	asr.w	r3, r0, r3
 80086e0:	9302      	str	r3, [sp, #8]
 80086e2:	9b02      	ldr	r3, [sp, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	dd66      	ble.n	80087b6 <__kernel_rem_pio2+0x26e>
 80086e8:	9b07      	ldr	r3, [sp, #28]
 80086ea:	2200      	movs	r2, #0
 80086ec:	3301      	adds	r3, #1
 80086ee:	9307      	str	r3, [sp, #28]
 80086f0:	4615      	mov	r5, r2
 80086f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80086f6:	4294      	cmp	r4, r2
 80086f8:	f300 8099 	bgt.w	800882e <__kernel_rem_pio2+0x2e6>
 80086fc:	f1ba 0f00 	cmp.w	sl, #0
 8008700:	dd07      	ble.n	8008712 <__kernel_rem_pio2+0x1ca>
 8008702:	f1ba 0f01 	cmp.w	sl, #1
 8008706:	f000 80a5 	beq.w	8008854 <__kernel_rem_pio2+0x30c>
 800870a:	f1ba 0f02 	cmp.w	sl, #2
 800870e:	f000 80c1 	beq.w	8008894 <__kernel_rem_pio2+0x34c>
 8008712:	9b02      	ldr	r3, [sp, #8]
 8008714:	2b02      	cmp	r3, #2
 8008716:	d14e      	bne.n	80087b6 <__kernel_rem_pio2+0x26e>
 8008718:	4632      	mov	r2, r6
 800871a:	463b      	mov	r3, r7
 800871c:	4958      	ldr	r1, [pc, #352]	; (8008880 <__kernel_rem_pio2+0x338>)
 800871e:	2000      	movs	r0, #0
 8008720:	f7f7 fdba 	bl	8000298 <__aeabi_dsub>
 8008724:	4606      	mov	r6, r0
 8008726:	460f      	mov	r7, r1
 8008728:	2d00      	cmp	r5, #0
 800872a:	d044      	beq.n	80087b6 <__kernel_rem_pio2+0x26e>
 800872c:	4650      	mov	r0, sl
 800872e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008870 <__kernel_rem_pio2+0x328>
 8008732:	f000 fb91 	bl	8008e58 <scalbn>
 8008736:	4630      	mov	r0, r6
 8008738:	4639      	mov	r1, r7
 800873a:	ec53 2b10 	vmov	r2, r3, d0
 800873e:	f7f7 fdab 	bl	8000298 <__aeabi_dsub>
 8008742:	4606      	mov	r6, r0
 8008744:	460f      	mov	r7, r1
 8008746:	e036      	b.n	80087b6 <__kernel_rem_pio2+0x26e>
 8008748:	4b4e      	ldr	r3, [pc, #312]	; (8008884 <__kernel_rem_pio2+0x33c>)
 800874a:	2200      	movs	r2, #0
 800874c:	4630      	mov	r0, r6
 800874e:	4639      	mov	r1, r7
 8008750:	f7f7 ff5a 	bl	8000608 <__aeabi_dmul>
 8008754:	f7f8 f9f2 	bl	8000b3c <__aeabi_d2iz>
 8008758:	f7f7 feec 	bl	8000534 <__aeabi_i2d>
 800875c:	4b4a      	ldr	r3, [pc, #296]	; (8008888 <__kernel_rem_pio2+0x340>)
 800875e:	2200      	movs	r2, #0
 8008760:	4680      	mov	r8, r0
 8008762:	4689      	mov	r9, r1
 8008764:	f7f7 ff50 	bl	8000608 <__aeabi_dmul>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4630      	mov	r0, r6
 800876e:	4639      	mov	r1, r7
 8008770:	f7f7 fd92 	bl	8000298 <__aeabi_dsub>
 8008774:	f7f8 f9e2 	bl	8000b3c <__aeabi_d2iz>
 8008778:	9b02      	ldr	r3, [sp, #8]
 800877a:	f843 0b04 	str.w	r0, [r3], #4
 800877e:	3d01      	subs	r5, #1
 8008780:	9302      	str	r3, [sp, #8]
 8008782:	ab70      	add	r3, sp, #448	; 0x1c0
 8008784:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	4640      	mov	r0, r8
 800878e:	4649      	mov	r1, r9
 8008790:	f7f7 fd84 	bl	800029c <__adddf3>
 8008794:	4606      	mov	r6, r0
 8008796:	460f      	mov	r7, r1
 8008798:	e75b      	b.n	8008652 <__kernel_rem_pio2+0x10a>
 800879a:	d105      	bne.n	80087a8 <__kernel_rem_pio2+0x260>
 800879c:	1e63      	subs	r3, r4, #1
 800879e:	aa0c      	add	r2, sp, #48	; 0x30
 80087a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80087a4:	15c3      	asrs	r3, r0, #23
 80087a6:	e79b      	b.n	80086e0 <__kernel_rem_pio2+0x198>
 80087a8:	4b38      	ldr	r3, [pc, #224]	; (800888c <__kernel_rem_pio2+0x344>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	f7f8 f9b2 	bl	8000b14 <__aeabi_dcmpge>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d139      	bne.n	8008828 <__kernel_rem_pio2+0x2e0>
 80087b4:	9002      	str	r0, [sp, #8]
 80087b6:	2200      	movs	r2, #0
 80087b8:	2300      	movs	r3, #0
 80087ba:	4630      	mov	r0, r6
 80087bc:	4639      	mov	r1, r7
 80087be:	f7f8 f98b 	bl	8000ad8 <__aeabi_dcmpeq>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f000 80b4 	beq.w	8008930 <__kernel_rem_pio2+0x3e8>
 80087c8:	f104 3bff 	add.w	fp, r4, #4294967295
 80087cc:	465b      	mov	r3, fp
 80087ce:	2200      	movs	r2, #0
 80087d0:	9904      	ldr	r1, [sp, #16]
 80087d2:	428b      	cmp	r3, r1
 80087d4:	da65      	bge.n	80088a2 <__kernel_rem_pio2+0x35a>
 80087d6:	2a00      	cmp	r2, #0
 80087d8:	d07b      	beq.n	80088d2 <__kernel_rem_pio2+0x38a>
 80087da:	ab0c      	add	r3, sp, #48	; 0x30
 80087dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80087e0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 80a0 	beq.w	800892a <__kernel_rem_pio2+0x3e2>
 80087ea:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8008870 <__kernel_rem_pio2+0x328>
 80087ee:	4650      	mov	r0, sl
 80087f0:	f000 fb32 	bl	8008e58 <scalbn>
 80087f4:	4f23      	ldr	r7, [pc, #140]	; (8008884 <__kernel_rem_pio2+0x33c>)
 80087f6:	ec55 4b10 	vmov	r4, r5, d0
 80087fa:	46d8      	mov	r8, fp
 80087fc:	2600      	movs	r6, #0
 80087fe:	f1b8 0f00 	cmp.w	r8, #0
 8008802:	f280 80cf 	bge.w	80089a4 <__kernel_rem_pio2+0x45c>
 8008806:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8008868 <__kernel_rem_pio2+0x320>
 800880a:	465f      	mov	r7, fp
 800880c:	f04f 0800 	mov.w	r8, #0
 8008810:	2f00      	cmp	r7, #0
 8008812:	f2c0 80fd 	blt.w	8008a10 <__kernel_rem_pio2+0x4c8>
 8008816:	ab70      	add	r3, sp, #448	; 0x1c0
 8008818:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008890 <__kernel_rem_pio2+0x348>
 800881c:	ec55 4b18 	vmov	r4, r5, d8
 8008820:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008824:	2600      	movs	r6, #0
 8008826:	e0e5      	b.n	80089f4 <__kernel_rem_pio2+0x4ac>
 8008828:	2302      	movs	r3, #2
 800882a:	9302      	str	r3, [sp, #8]
 800882c:	e75c      	b.n	80086e8 <__kernel_rem_pio2+0x1a0>
 800882e:	f8db 3000 	ldr.w	r3, [fp]
 8008832:	b955      	cbnz	r5, 800884a <__kernel_rem_pio2+0x302>
 8008834:	b123      	cbz	r3, 8008840 <__kernel_rem_pio2+0x2f8>
 8008836:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800883a:	f8cb 3000 	str.w	r3, [fp]
 800883e:	2301      	movs	r3, #1
 8008840:	3201      	adds	r2, #1
 8008842:	f10b 0b04 	add.w	fp, fp, #4
 8008846:	461d      	mov	r5, r3
 8008848:	e755      	b.n	80086f6 <__kernel_rem_pio2+0x1ae>
 800884a:	1acb      	subs	r3, r1, r3
 800884c:	f8cb 3000 	str.w	r3, [fp]
 8008850:	462b      	mov	r3, r5
 8008852:	e7f5      	b.n	8008840 <__kernel_rem_pio2+0x2f8>
 8008854:	1e62      	subs	r2, r4, #1
 8008856:	ab0c      	add	r3, sp, #48	; 0x30
 8008858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800885c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008860:	a90c      	add	r1, sp, #48	; 0x30
 8008862:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008866:	e754      	b.n	8008712 <__kernel_rem_pio2+0x1ca>
	...
 8008874:	3ff00000 	.word	0x3ff00000
 8008878:	08009358 	.word	0x08009358
 800887c:	40200000 	.word	0x40200000
 8008880:	3ff00000 	.word	0x3ff00000
 8008884:	3e700000 	.word	0x3e700000
 8008888:	41700000 	.word	0x41700000
 800888c:	3fe00000 	.word	0x3fe00000
 8008890:	08009318 	.word	0x08009318
 8008894:	1e62      	subs	r2, r4, #1
 8008896:	ab0c      	add	r3, sp, #48	; 0x30
 8008898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80088a0:	e7de      	b.n	8008860 <__kernel_rem_pio2+0x318>
 80088a2:	a90c      	add	r1, sp, #48	; 0x30
 80088a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80088a8:	3b01      	subs	r3, #1
 80088aa:	430a      	orrs	r2, r1
 80088ac:	e790      	b.n	80087d0 <__kernel_rem_pio2+0x288>
 80088ae:	3301      	adds	r3, #1
 80088b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80088b4:	2900      	cmp	r1, #0
 80088b6:	d0fa      	beq.n	80088ae <__kernel_rem_pio2+0x366>
 80088b8:	9a08      	ldr	r2, [sp, #32]
 80088ba:	18e3      	adds	r3, r4, r3
 80088bc:	18a6      	adds	r6, r4, r2
 80088be:	aa20      	add	r2, sp, #128	; 0x80
 80088c0:	1c65      	adds	r5, r4, #1
 80088c2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80088c6:	9302      	str	r3, [sp, #8]
 80088c8:	9b02      	ldr	r3, [sp, #8]
 80088ca:	42ab      	cmp	r3, r5
 80088cc:	da04      	bge.n	80088d8 <__kernel_rem_pio2+0x390>
 80088ce:	461c      	mov	r4, r3
 80088d0:	e6b5      	b.n	800863e <__kernel_rem_pio2+0xf6>
 80088d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088d4:	2301      	movs	r3, #1
 80088d6:	e7eb      	b.n	80088b0 <__kernel_rem_pio2+0x368>
 80088d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088de:	f7f7 fe29 	bl	8000534 <__aeabi_i2d>
 80088e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80088e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e8:	46b3      	mov	fp, r6
 80088ea:	461c      	mov	r4, r3
 80088ec:	2700      	movs	r7, #0
 80088ee:	f04f 0800 	mov.w	r8, #0
 80088f2:	f04f 0900 	mov.w	r9, #0
 80088f6:	9b06      	ldr	r3, [sp, #24]
 80088f8:	429f      	cmp	r7, r3
 80088fa:	dd06      	ble.n	800890a <__kernel_rem_pio2+0x3c2>
 80088fc:	ab70      	add	r3, sp, #448	; 0x1c0
 80088fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008902:	e9c3 8900 	strd	r8, r9, [r3]
 8008906:	3501      	adds	r5, #1
 8008908:	e7de      	b.n	80088c8 <__kernel_rem_pio2+0x380>
 800890a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800890e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008912:	f7f7 fe79 	bl	8000608 <__aeabi_dmul>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4640      	mov	r0, r8
 800891c:	4649      	mov	r1, r9
 800891e:	f7f7 fcbd 	bl	800029c <__adddf3>
 8008922:	3701      	adds	r7, #1
 8008924:	4680      	mov	r8, r0
 8008926:	4689      	mov	r9, r1
 8008928:	e7e5      	b.n	80088f6 <__kernel_rem_pio2+0x3ae>
 800892a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800892e:	e754      	b.n	80087da <__kernel_rem_pio2+0x292>
 8008930:	ec47 6b10 	vmov	d0, r6, r7
 8008934:	f1ca 0000 	rsb	r0, sl, #0
 8008938:	f000 fa8e 	bl	8008e58 <scalbn>
 800893c:	ec57 6b10 	vmov	r6, r7, d0
 8008940:	4b9f      	ldr	r3, [pc, #636]	; (8008bc0 <__kernel_rem_pio2+0x678>)
 8008942:	ee10 0a10 	vmov	r0, s0
 8008946:	2200      	movs	r2, #0
 8008948:	4639      	mov	r1, r7
 800894a:	f7f8 f8e3 	bl	8000b14 <__aeabi_dcmpge>
 800894e:	b300      	cbz	r0, 8008992 <__kernel_rem_pio2+0x44a>
 8008950:	4b9c      	ldr	r3, [pc, #624]	; (8008bc4 <__kernel_rem_pio2+0x67c>)
 8008952:	2200      	movs	r2, #0
 8008954:	4630      	mov	r0, r6
 8008956:	4639      	mov	r1, r7
 8008958:	f7f7 fe56 	bl	8000608 <__aeabi_dmul>
 800895c:	f7f8 f8ee 	bl	8000b3c <__aeabi_d2iz>
 8008960:	4605      	mov	r5, r0
 8008962:	f7f7 fde7 	bl	8000534 <__aeabi_i2d>
 8008966:	4b96      	ldr	r3, [pc, #600]	; (8008bc0 <__kernel_rem_pio2+0x678>)
 8008968:	2200      	movs	r2, #0
 800896a:	f7f7 fe4d 	bl	8000608 <__aeabi_dmul>
 800896e:	460b      	mov	r3, r1
 8008970:	4602      	mov	r2, r0
 8008972:	4639      	mov	r1, r7
 8008974:	4630      	mov	r0, r6
 8008976:	f7f7 fc8f 	bl	8000298 <__aeabi_dsub>
 800897a:	f7f8 f8df 	bl	8000b3c <__aeabi_d2iz>
 800897e:	f104 0b01 	add.w	fp, r4, #1
 8008982:	ab0c      	add	r3, sp, #48	; 0x30
 8008984:	f10a 0a18 	add.w	sl, sl, #24
 8008988:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800898c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8008990:	e72b      	b.n	80087ea <__kernel_rem_pio2+0x2a2>
 8008992:	4630      	mov	r0, r6
 8008994:	4639      	mov	r1, r7
 8008996:	f7f8 f8d1 	bl	8000b3c <__aeabi_d2iz>
 800899a:	ab0c      	add	r3, sp, #48	; 0x30
 800899c:	46a3      	mov	fp, r4
 800899e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80089a2:	e722      	b.n	80087ea <__kernel_rem_pio2+0x2a2>
 80089a4:	ab70      	add	r3, sp, #448	; 0x1c0
 80089a6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80089aa:	ab0c      	add	r3, sp, #48	; 0x30
 80089ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80089b0:	f7f7 fdc0 	bl	8000534 <__aeabi_i2d>
 80089b4:	4622      	mov	r2, r4
 80089b6:	462b      	mov	r3, r5
 80089b8:	f7f7 fe26 	bl	8000608 <__aeabi_dmul>
 80089bc:	4632      	mov	r2, r6
 80089be:	e9c9 0100 	strd	r0, r1, [r9]
 80089c2:	463b      	mov	r3, r7
 80089c4:	4620      	mov	r0, r4
 80089c6:	4629      	mov	r1, r5
 80089c8:	f7f7 fe1e 	bl	8000608 <__aeabi_dmul>
 80089cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80089d0:	4604      	mov	r4, r0
 80089d2:	460d      	mov	r5, r1
 80089d4:	e713      	b.n	80087fe <__kernel_rem_pio2+0x2b6>
 80089d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80089da:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80089de:	f7f7 fe13 	bl	8000608 <__aeabi_dmul>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4620      	mov	r0, r4
 80089e8:	4629      	mov	r1, r5
 80089ea:	f7f7 fc57 	bl	800029c <__adddf3>
 80089ee:	3601      	adds	r6, #1
 80089f0:	4604      	mov	r4, r0
 80089f2:	460d      	mov	r5, r1
 80089f4:	9b04      	ldr	r3, [sp, #16]
 80089f6:	429e      	cmp	r6, r3
 80089f8:	dc01      	bgt.n	80089fe <__kernel_rem_pio2+0x4b6>
 80089fa:	45b0      	cmp	r8, r6
 80089fc:	daeb      	bge.n	80089d6 <__kernel_rem_pio2+0x48e>
 80089fe:	ab48      	add	r3, sp, #288	; 0x120
 8008a00:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008a04:	e9c3 4500 	strd	r4, r5, [r3]
 8008a08:	3f01      	subs	r7, #1
 8008a0a:	f108 0801 	add.w	r8, r8, #1
 8008a0e:	e6ff      	b.n	8008810 <__kernel_rem_pio2+0x2c8>
 8008a10:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	dc0b      	bgt.n	8008a2e <__kernel_rem_pio2+0x4e6>
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	dc6e      	bgt.n	8008af8 <__kernel_rem_pio2+0x5b0>
 8008a1a:	d045      	beq.n	8008aa8 <__kernel_rem_pio2+0x560>
 8008a1c:	9b07      	ldr	r3, [sp, #28]
 8008a1e:	f003 0007 	and.w	r0, r3, #7
 8008a22:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008a26:	ecbd 8b02 	vpop	{d8}
 8008a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d1f3      	bne.n	8008a1c <__kernel_rem_pio2+0x4d4>
 8008a34:	ab48      	add	r3, sp, #288	; 0x120
 8008a36:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8008a3a:	46d0      	mov	r8, sl
 8008a3c:	46d9      	mov	r9, fp
 8008a3e:	f1b9 0f00 	cmp.w	r9, #0
 8008a42:	f1a8 0808 	sub.w	r8, r8, #8
 8008a46:	dc64      	bgt.n	8008b12 <__kernel_rem_pio2+0x5ca>
 8008a48:	465c      	mov	r4, fp
 8008a4a:	2c01      	cmp	r4, #1
 8008a4c:	f1aa 0a08 	sub.w	sl, sl, #8
 8008a50:	dc7e      	bgt.n	8008b50 <__kernel_rem_pio2+0x608>
 8008a52:	2000      	movs	r0, #0
 8008a54:	2100      	movs	r1, #0
 8008a56:	f1bb 0f01 	cmp.w	fp, #1
 8008a5a:	f300 8097 	bgt.w	8008b8c <__kernel_rem_pio2+0x644>
 8008a5e:	9b02      	ldr	r3, [sp, #8]
 8008a60:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8008a64:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f040 8099 	bne.w	8008ba0 <__kernel_rem_pio2+0x658>
 8008a6e:	9b01      	ldr	r3, [sp, #4]
 8008a70:	e9c3 5600 	strd	r5, r6, [r3]
 8008a74:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008a78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008a7c:	e7ce      	b.n	8008a1c <__kernel_rem_pio2+0x4d4>
 8008a7e:	ab48      	add	r3, sp, #288	; 0x120
 8008a80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	f7f7 fc08 	bl	800029c <__adddf3>
 8008a8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a90:	f1bb 0f00 	cmp.w	fp, #0
 8008a94:	daf3      	bge.n	8008a7e <__kernel_rem_pio2+0x536>
 8008a96:	9b02      	ldr	r3, [sp, #8]
 8008a98:	b113      	cbz	r3, 8008aa0 <__kernel_rem_pio2+0x558>
 8008a9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	9b01      	ldr	r3, [sp, #4]
 8008aa2:	e9c3 0100 	strd	r0, r1, [r3]
 8008aa6:	e7b9      	b.n	8008a1c <__kernel_rem_pio2+0x4d4>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	2100      	movs	r1, #0
 8008aac:	e7f0      	b.n	8008a90 <__kernel_rem_pio2+0x548>
 8008aae:	ab48      	add	r3, sp, #288	; 0x120
 8008ab0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	f7f7 fbf0 	bl	800029c <__adddf3>
 8008abc:	3c01      	subs	r4, #1
 8008abe:	2c00      	cmp	r4, #0
 8008ac0:	daf5      	bge.n	8008aae <__kernel_rem_pio2+0x566>
 8008ac2:	9b02      	ldr	r3, [sp, #8]
 8008ac4:	b1e3      	cbz	r3, 8008b00 <__kernel_rem_pio2+0x5b8>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008acc:	9c01      	ldr	r4, [sp, #4]
 8008ace:	e9c4 2300 	strd	r2, r3, [r4]
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008ada:	f7f7 fbdd 	bl	8000298 <__aeabi_dsub>
 8008ade:	ad4a      	add	r5, sp, #296	; 0x128
 8008ae0:	2401      	movs	r4, #1
 8008ae2:	45a3      	cmp	fp, r4
 8008ae4:	da0f      	bge.n	8008b06 <__kernel_rem_pio2+0x5be>
 8008ae6:	9b02      	ldr	r3, [sp, #8]
 8008ae8:	b113      	cbz	r3, 8008af0 <__kernel_rem_pio2+0x5a8>
 8008aea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008aee:	4619      	mov	r1, r3
 8008af0:	9b01      	ldr	r3, [sp, #4]
 8008af2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008af6:	e791      	b.n	8008a1c <__kernel_rem_pio2+0x4d4>
 8008af8:	465c      	mov	r4, fp
 8008afa:	2000      	movs	r0, #0
 8008afc:	2100      	movs	r1, #0
 8008afe:	e7de      	b.n	8008abe <__kernel_rem_pio2+0x576>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	e7e2      	b.n	8008acc <__kernel_rem_pio2+0x584>
 8008b06:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008b0a:	f7f7 fbc7 	bl	800029c <__adddf3>
 8008b0e:	3401      	adds	r4, #1
 8008b10:	e7e7      	b.n	8008ae2 <__kernel_rem_pio2+0x59a>
 8008b12:	e9d8 4500 	ldrd	r4, r5, [r8]
 8008b16:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	4632      	mov	r2, r6
 8008b1e:	463b      	mov	r3, r7
 8008b20:	4629      	mov	r1, r5
 8008b22:	f7f7 fbbb 	bl	800029c <__adddf3>
 8008b26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4620      	mov	r0, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	f7f7 fbb1 	bl	8000298 <__aeabi_dsub>
 8008b36:	4632      	mov	r2, r6
 8008b38:	463b      	mov	r3, r7
 8008b3a:	f7f7 fbaf 	bl	800029c <__adddf3>
 8008b3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b42:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8008b46:	ed88 7b00 	vstr	d7, [r8]
 8008b4a:	f109 39ff 	add.w	r9, r9, #4294967295
 8008b4e:	e776      	b.n	8008a3e <__kernel_rem_pio2+0x4f6>
 8008b50:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b54:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4632      	mov	r2, r6
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	4649      	mov	r1, r9
 8008b60:	f7f7 fb9c 	bl	800029c <__adddf3>
 8008b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	4649      	mov	r1, r9
 8008b70:	f7f7 fb92 	bl	8000298 <__aeabi_dsub>
 8008b74:	4632      	mov	r2, r6
 8008b76:	463b      	mov	r3, r7
 8008b78:	f7f7 fb90 	bl	800029c <__adddf3>
 8008b7c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008b84:	ed8a 7b00 	vstr	d7, [sl]
 8008b88:	3c01      	subs	r4, #1
 8008b8a:	e75e      	b.n	8008a4a <__kernel_rem_pio2+0x502>
 8008b8c:	ab48      	add	r3, sp, #288	; 0x120
 8008b8e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	f7f7 fb81 	bl	800029c <__adddf3>
 8008b9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b9e:	e75a      	b.n	8008a56 <__kernel_rem_pio2+0x50e>
 8008ba0:	9b01      	ldr	r3, [sp, #4]
 8008ba2:	9a01      	ldr	r2, [sp, #4]
 8008ba4:	601d      	str	r5, [r3, #0]
 8008ba6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008baa:	605c      	str	r4, [r3, #4]
 8008bac:	609f      	str	r7, [r3, #8]
 8008bae:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008bb2:	60d3      	str	r3, [r2, #12]
 8008bb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bb8:	6110      	str	r0, [r2, #16]
 8008bba:	6153      	str	r3, [r2, #20]
 8008bbc:	e72e      	b.n	8008a1c <__kernel_rem_pio2+0x4d4>
 8008bbe:	bf00      	nop
 8008bc0:	41700000 	.word	0x41700000
 8008bc4:	3e700000 	.word	0x3e700000

08008bc8 <__kernel_sin>:
 8008bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	ed2d 8b04 	vpush	{d8-d9}
 8008bd0:	eeb0 8a41 	vmov.f32	s16, s2
 8008bd4:	eef0 8a61 	vmov.f32	s17, s3
 8008bd8:	ec55 4b10 	vmov	r4, r5, d0
 8008bdc:	b083      	sub	sp, #12
 8008bde:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008be2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008be6:	9001      	str	r0, [sp, #4]
 8008be8:	da06      	bge.n	8008bf8 <__kernel_sin+0x30>
 8008bea:	ee10 0a10 	vmov	r0, s0
 8008bee:	4629      	mov	r1, r5
 8008bf0:	f7f7 ffa4 	bl	8000b3c <__aeabi_d2iz>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	d051      	beq.n	8008c9c <__kernel_sin+0xd4>
 8008bf8:	4622      	mov	r2, r4
 8008bfa:	462b      	mov	r3, r5
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7f7 fd02 	bl	8000608 <__aeabi_dmul>
 8008c04:	4682      	mov	sl, r0
 8008c06:	468b      	mov	fp, r1
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	4629      	mov	r1, r5
 8008c10:	f7f7 fcfa 	bl	8000608 <__aeabi_dmul>
 8008c14:	a341      	add	r3, pc, #260	; (adr r3, 8008d1c <__kernel_sin+0x154>)
 8008c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	4689      	mov	r9, r1
 8008c1e:	4650      	mov	r0, sl
 8008c20:	4659      	mov	r1, fp
 8008c22:	f7f7 fcf1 	bl	8000608 <__aeabi_dmul>
 8008c26:	a33f      	add	r3, pc, #252	; (adr r3, 8008d24 <__kernel_sin+0x15c>)
 8008c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2c:	f7f7 fb34 	bl	8000298 <__aeabi_dsub>
 8008c30:	4652      	mov	r2, sl
 8008c32:	465b      	mov	r3, fp
 8008c34:	f7f7 fce8 	bl	8000608 <__aeabi_dmul>
 8008c38:	a33c      	add	r3, pc, #240	; (adr r3, 8008d2c <__kernel_sin+0x164>)
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	f7f7 fb2d 	bl	800029c <__adddf3>
 8008c42:	4652      	mov	r2, sl
 8008c44:	465b      	mov	r3, fp
 8008c46:	f7f7 fcdf 	bl	8000608 <__aeabi_dmul>
 8008c4a:	a33a      	add	r3, pc, #232	; (adr r3, 8008d34 <__kernel_sin+0x16c>)
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	f7f7 fb22 	bl	8000298 <__aeabi_dsub>
 8008c54:	4652      	mov	r2, sl
 8008c56:	465b      	mov	r3, fp
 8008c58:	f7f7 fcd6 	bl	8000608 <__aeabi_dmul>
 8008c5c:	a337      	add	r3, pc, #220	; (adr r3, 8008d3c <__kernel_sin+0x174>)
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	f7f7 fb1b 	bl	800029c <__adddf3>
 8008c66:	9b01      	ldr	r3, [sp, #4]
 8008c68:	4606      	mov	r6, r0
 8008c6a:	460f      	mov	r7, r1
 8008c6c:	b9eb      	cbnz	r3, 8008caa <__kernel_sin+0xe2>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4650      	mov	r0, sl
 8008c74:	4659      	mov	r1, fp
 8008c76:	f7f7 fcc7 	bl	8000608 <__aeabi_dmul>
 8008c7a:	a325      	add	r3, pc, #148	; (adr r3, 8008d10 <__kernel_sin+0x148>)
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	f7f7 fb0a 	bl	8000298 <__aeabi_dsub>
 8008c84:	4642      	mov	r2, r8
 8008c86:	464b      	mov	r3, r9
 8008c88:	f7f7 fcbe 	bl	8000608 <__aeabi_dmul>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4620      	mov	r0, r4
 8008c92:	4629      	mov	r1, r5
 8008c94:	f7f7 fb02 	bl	800029c <__adddf3>
 8008c98:	4604      	mov	r4, r0
 8008c9a:	460d      	mov	r5, r1
 8008c9c:	ec45 4b10 	vmov	d0, r4, r5
 8008ca0:	b003      	add	sp, #12
 8008ca2:	ecbd 8b04 	vpop	{d8-d9}
 8008ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008caa:	4b1b      	ldr	r3, [pc, #108]	; (8008d18 <__kernel_sin+0x150>)
 8008cac:	ec51 0b18 	vmov	r0, r1, d8
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f7f7 fca9 	bl	8000608 <__aeabi_dmul>
 8008cb6:	4632      	mov	r2, r6
 8008cb8:	ec41 0b19 	vmov	d9, r0, r1
 8008cbc:	463b      	mov	r3, r7
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	f7f7 fca1 	bl	8000608 <__aeabi_dmul>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	ec51 0b19 	vmov	r0, r1, d9
 8008cce:	f7f7 fae3 	bl	8000298 <__aeabi_dsub>
 8008cd2:	4652      	mov	r2, sl
 8008cd4:	465b      	mov	r3, fp
 8008cd6:	f7f7 fc97 	bl	8000608 <__aeabi_dmul>
 8008cda:	ec53 2b18 	vmov	r2, r3, d8
 8008cde:	f7f7 fadb 	bl	8000298 <__aeabi_dsub>
 8008ce2:	a30b      	add	r3, pc, #44	; (adr r3, 8008d10 <__kernel_sin+0x148>)
 8008ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce8:	4606      	mov	r6, r0
 8008cea:	460f      	mov	r7, r1
 8008cec:	4640      	mov	r0, r8
 8008cee:	4649      	mov	r1, r9
 8008cf0:	f7f7 fc8a 	bl	8000608 <__aeabi_dmul>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	f7f7 face 	bl	800029c <__adddf3>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4620      	mov	r0, r4
 8008d06:	4629      	mov	r1, r5
 8008d08:	f7f7 fac6 	bl	8000298 <__aeabi_dsub>
 8008d0c:	e7c4      	b.n	8008c98 <__kernel_sin+0xd0>
 8008d0e:	bf00      	nop
 8008d10:	55555549 	.word	0x55555549
 8008d14:	3fc55555 	.word	0x3fc55555
 8008d18:	3fe00000 	.word	0x3fe00000
 8008d1c:	5acfd57c 	.word	0x5acfd57c
 8008d20:	3de5d93a 	.word	0x3de5d93a
 8008d24:	8a2b9ceb 	.word	0x8a2b9ceb
 8008d28:	3e5ae5e6 	.word	0x3e5ae5e6
 8008d2c:	57b1fe7d 	.word	0x57b1fe7d
 8008d30:	3ec71de3 	.word	0x3ec71de3
 8008d34:	19c161d5 	.word	0x19c161d5
 8008d38:	3f2a01a0 	.word	0x3f2a01a0
 8008d3c:	1110f8a6 	.word	0x1110f8a6
 8008d40:	3f811111 	.word	0x3f811111

08008d44 <fabs>:
 8008d44:	ec51 0b10 	vmov	r0, r1, d0
 8008d48:	ee10 2a10 	vmov	r2, s0
 8008d4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d50:	ec43 2b10 	vmov	d0, r2, r3
 8008d54:	4770      	bx	lr
	...

08008d58 <floor>:
 8008d58:	ec51 0b10 	vmov	r0, r1, d0
 8008d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008d64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008d68:	2e13      	cmp	r6, #19
 8008d6a:	ee10 5a10 	vmov	r5, s0
 8008d6e:	ee10 8a10 	vmov	r8, s0
 8008d72:	460c      	mov	r4, r1
 8008d74:	dc32      	bgt.n	8008ddc <floor+0x84>
 8008d76:	2e00      	cmp	r6, #0
 8008d78:	da14      	bge.n	8008da4 <floor+0x4c>
 8008d7a:	a333      	add	r3, pc, #204	; (adr r3, 8008e48 <floor+0xf0>)
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	f7f7 fa8c 	bl	800029c <__adddf3>
 8008d84:	2200      	movs	r2, #0
 8008d86:	2300      	movs	r3, #0
 8008d88:	f7f7 fece 	bl	8000b28 <__aeabi_dcmpgt>
 8008d8c:	b138      	cbz	r0, 8008d9e <floor+0x46>
 8008d8e:	2c00      	cmp	r4, #0
 8008d90:	da57      	bge.n	8008e42 <floor+0xea>
 8008d92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008d96:	431d      	orrs	r5, r3
 8008d98:	d001      	beq.n	8008d9e <floor+0x46>
 8008d9a:	4c2d      	ldr	r4, [pc, #180]	; (8008e50 <floor+0xf8>)
 8008d9c:	2500      	movs	r5, #0
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4628      	mov	r0, r5
 8008da2:	e025      	b.n	8008df0 <floor+0x98>
 8008da4:	4f2b      	ldr	r7, [pc, #172]	; (8008e54 <floor+0xfc>)
 8008da6:	4137      	asrs	r7, r6
 8008da8:	ea01 0307 	and.w	r3, r1, r7
 8008dac:	4303      	orrs	r3, r0
 8008dae:	d01f      	beq.n	8008df0 <floor+0x98>
 8008db0:	a325      	add	r3, pc, #148	; (adr r3, 8008e48 <floor+0xf0>)
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	f7f7 fa71 	bl	800029c <__adddf3>
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f7f7 feb3 	bl	8000b28 <__aeabi_dcmpgt>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d0eb      	beq.n	8008d9e <floor+0x46>
 8008dc6:	2c00      	cmp	r4, #0
 8008dc8:	bfbe      	ittt	lt
 8008dca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008dce:	fa43 f606 	asrlt.w	r6, r3, r6
 8008dd2:	19a4      	addlt	r4, r4, r6
 8008dd4:	ea24 0407 	bic.w	r4, r4, r7
 8008dd8:	2500      	movs	r5, #0
 8008dda:	e7e0      	b.n	8008d9e <floor+0x46>
 8008ddc:	2e33      	cmp	r6, #51	; 0x33
 8008dde:	dd0b      	ble.n	8008df8 <floor+0xa0>
 8008de0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008de4:	d104      	bne.n	8008df0 <floor+0x98>
 8008de6:	ee10 2a10 	vmov	r2, s0
 8008dea:	460b      	mov	r3, r1
 8008dec:	f7f7 fa56 	bl	800029c <__adddf3>
 8008df0:	ec41 0b10 	vmov	d0, r0, r1
 8008df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8008e00:	fa23 f707 	lsr.w	r7, r3, r7
 8008e04:	4207      	tst	r7, r0
 8008e06:	d0f3      	beq.n	8008df0 <floor+0x98>
 8008e08:	a30f      	add	r3, pc, #60	; (adr r3, 8008e48 <floor+0xf0>)
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	f7f7 fa45 	bl	800029c <__adddf3>
 8008e12:	2200      	movs	r2, #0
 8008e14:	2300      	movs	r3, #0
 8008e16:	f7f7 fe87 	bl	8000b28 <__aeabi_dcmpgt>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d0bf      	beq.n	8008d9e <floor+0x46>
 8008e1e:	2c00      	cmp	r4, #0
 8008e20:	da02      	bge.n	8008e28 <floor+0xd0>
 8008e22:	2e14      	cmp	r6, #20
 8008e24:	d103      	bne.n	8008e2e <floor+0xd6>
 8008e26:	3401      	adds	r4, #1
 8008e28:	ea25 0507 	bic.w	r5, r5, r7
 8008e2c:	e7b7      	b.n	8008d9e <floor+0x46>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008e34:	fa03 f606 	lsl.w	r6, r3, r6
 8008e38:	4435      	add	r5, r6
 8008e3a:	4545      	cmp	r5, r8
 8008e3c:	bf38      	it	cc
 8008e3e:	18e4      	addcc	r4, r4, r3
 8008e40:	e7f2      	b.n	8008e28 <floor+0xd0>
 8008e42:	2500      	movs	r5, #0
 8008e44:	462c      	mov	r4, r5
 8008e46:	e7aa      	b.n	8008d9e <floor+0x46>
 8008e48:	8800759c 	.word	0x8800759c
 8008e4c:	7e37e43c 	.word	0x7e37e43c
 8008e50:	bff00000 	.word	0xbff00000
 8008e54:	000fffff 	.word	0x000fffff

08008e58 <scalbn>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	ec55 4b10 	vmov	r4, r5, d0
 8008e5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008e62:	4606      	mov	r6, r0
 8008e64:	462b      	mov	r3, r5
 8008e66:	b99a      	cbnz	r2, 8008e90 <scalbn+0x38>
 8008e68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008e6c:	4323      	orrs	r3, r4
 8008e6e:	d036      	beq.n	8008ede <scalbn+0x86>
 8008e70:	4b39      	ldr	r3, [pc, #228]	; (8008f58 <scalbn+0x100>)
 8008e72:	4629      	mov	r1, r5
 8008e74:	ee10 0a10 	vmov	r0, s0
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f7f7 fbc5 	bl	8000608 <__aeabi_dmul>
 8008e7e:	4b37      	ldr	r3, [pc, #220]	; (8008f5c <scalbn+0x104>)
 8008e80:	429e      	cmp	r6, r3
 8008e82:	4604      	mov	r4, r0
 8008e84:	460d      	mov	r5, r1
 8008e86:	da10      	bge.n	8008eaa <scalbn+0x52>
 8008e88:	a32b      	add	r3, pc, #172	; (adr r3, 8008f38 <scalbn+0xe0>)
 8008e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8e:	e03a      	b.n	8008f06 <scalbn+0xae>
 8008e90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008e94:	428a      	cmp	r2, r1
 8008e96:	d10c      	bne.n	8008eb2 <scalbn+0x5a>
 8008e98:	ee10 2a10 	vmov	r2, s0
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	f7f7 f9fc 	bl	800029c <__adddf3>
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	460d      	mov	r5, r1
 8008ea8:	e019      	b.n	8008ede <scalbn+0x86>
 8008eaa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008eae:	460b      	mov	r3, r1
 8008eb0:	3a36      	subs	r2, #54	; 0x36
 8008eb2:	4432      	add	r2, r6
 8008eb4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008eb8:	428a      	cmp	r2, r1
 8008eba:	dd08      	ble.n	8008ece <scalbn+0x76>
 8008ebc:	2d00      	cmp	r5, #0
 8008ebe:	a120      	add	r1, pc, #128	; (adr r1, 8008f40 <scalbn+0xe8>)
 8008ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec4:	da1c      	bge.n	8008f00 <scalbn+0xa8>
 8008ec6:	a120      	add	r1, pc, #128	; (adr r1, 8008f48 <scalbn+0xf0>)
 8008ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ecc:	e018      	b.n	8008f00 <scalbn+0xa8>
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	dd08      	ble.n	8008ee4 <scalbn+0x8c>
 8008ed2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ed6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008eda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ede:	ec45 4b10 	vmov	d0, r4, r5
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008ee8:	da19      	bge.n	8008f1e <scalbn+0xc6>
 8008eea:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008eee:	429e      	cmp	r6, r3
 8008ef0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008ef4:	dd0a      	ble.n	8008f0c <scalbn+0xb4>
 8008ef6:	a112      	add	r1, pc, #72	; (adr r1, 8008f40 <scalbn+0xe8>)
 8008ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1e2      	bne.n	8008ec6 <scalbn+0x6e>
 8008f00:	a30f      	add	r3, pc, #60	; (adr r3, 8008f40 <scalbn+0xe8>)
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	f7f7 fb7f 	bl	8000608 <__aeabi_dmul>
 8008f0a:	e7cb      	b.n	8008ea4 <scalbn+0x4c>
 8008f0c:	a10a      	add	r1, pc, #40	; (adr r1, 8008f38 <scalbn+0xe0>)
 8008f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0b8      	beq.n	8008e88 <scalbn+0x30>
 8008f16:	a10e      	add	r1, pc, #56	; (adr r1, 8008f50 <scalbn+0xf8>)
 8008f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f1c:	e7b4      	b.n	8008e88 <scalbn+0x30>
 8008f1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f22:	3236      	adds	r2, #54	; 0x36
 8008f24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <scalbn+0x108>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	e7e8      	b.n	8008f06 <scalbn+0xae>
 8008f34:	f3af 8000 	nop.w
 8008f38:	c2f8f359 	.word	0xc2f8f359
 8008f3c:	01a56e1f 	.word	0x01a56e1f
 8008f40:	8800759c 	.word	0x8800759c
 8008f44:	7e37e43c 	.word	0x7e37e43c
 8008f48:	8800759c 	.word	0x8800759c
 8008f4c:	fe37e43c 	.word	0xfe37e43c
 8008f50:	c2f8f359 	.word	0xc2f8f359
 8008f54:	81a56e1f 	.word	0x81a56e1f
 8008f58:	43500000 	.word	0x43500000
 8008f5c:	ffff3cb0 	.word	0xffff3cb0
 8008f60:	3c900000 	.word	0x3c900000

08008f64 <_init>:
 8008f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f66:	bf00      	nop
 8008f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6a:	bc08      	pop	{r3}
 8008f6c:	469e      	mov	lr, r3
 8008f6e:	4770      	bx	lr

08008f70 <_fini>:
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	bf00      	nop
 8008f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f76:	bc08      	pop	{r3}
 8008f78:	469e      	mov	lr, r3
 8008f7a:	4770      	bx	lr
